
usb2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135d4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014f8  080137c4  080137c4  000237c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014cbc  08014cbc  00030a7c  2**0
                  CONTENTS
  4 .ARM          00000008  08014cbc  08014cbc  00024cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014cc4  08014cc4  00030a7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014cc4  08014cc4  00024cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014cc8  08014cc8  00024cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a7c  20000000  08014ccc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012be8  20000a7c  08015748  00030a7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013664  08015748  00033664  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030a7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026b38  00000000  00000000  00030aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c42  00000000  00000000  000575de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  0005d220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  0005eb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002983f  00000000  00000000  00060248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a9f  00000000  00000000  00089a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc36f  00000000  00000000  000ab526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a9  00000000  00000000  00177895  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000733c  00000000  00000000  00177940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  0017ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000a7c 	.word	0x20000a7c
 800020c:	00000000 	.word	0x00000000
 8000210:	080137ac 	.word	0x080137ac

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000a80 	.word	0x20000a80
 800022c:	080137ac 	.word	0x080137ac

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_uldivmod>:
 8000254:	b953      	cbnz	r3, 800026c <__aeabi_uldivmod+0x18>
 8000256:	b94a      	cbnz	r2, 800026c <__aeabi_uldivmod+0x18>
 8000258:	2900      	cmp	r1, #0
 800025a:	bf08      	it	eq
 800025c:	2800      	cmpeq	r0, #0
 800025e:	bf1c      	itt	ne
 8000260:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000264:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000268:	f000 b976 	b.w	8000558 <__aeabi_idiv0>
 800026c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000270:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000280:	b004      	add	sp, #16
 8000282:	4770      	bx	lr

08000284 <__udivmoddi4>:
 8000284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000288:	9e08      	ldr	r6, [sp, #32]
 800028a:	460d      	mov	r5, r1
 800028c:	4604      	mov	r4, r0
 800028e:	4688      	mov	r8, r1
 8000290:	2b00      	cmp	r3, #0
 8000292:	d14d      	bne.n	8000330 <__udivmoddi4+0xac>
 8000294:	428a      	cmp	r2, r1
 8000296:	4694      	mov	ip, r2
 8000298:	d968      	bls.n	800036c <__udivmoddi4+0xe8>
 800029a:	fab2 f282 	clz	r2, r2
 800029e:	b152      	cbz	r2, 80002b6 <__udivmoddi4+0x32>
 80002a0:	fa01 f302 	lsl.w	r3, r1, r2
 80002a4:	f1c2 0120 	rsb	r1, r2, #32
 80002a8:	fa20 f101 	lsr.w	r1, r0, r1
 80002ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80002b0:	ea41 0803 	orr.w	r8, r1, r3
 80002b4:	4094      	lsls	r4, r2
 80002b6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002ba:	fbb8 f7f1 	udiv	r7, r8, r1
 80002be:	fa1f fe8c 	uxth.w	lr, ip
 80002c2:	fb01 8817 	mls	r8, r1, r7, r8
 80002c6:	fb07 f00e 	mul.w	r0, r7, lr
 80002ca:	0c23      	lsrs	r3, r4, #16
 80002cc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d0:	4298      	cmp	r0, r3
 80002d2:	d90a      	bls.n	80002ea <__udivmoddi4+0x66>
 80002d4:	eb1c 0303 	adds.w	r3, ip, r3
 80002d8:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80002dc:	f080 811e 	bcs.w	800051c <__udivmoddi4+0x298>
 80002e0:	4298      	cmp	r0, r3
 80002e2:	f240 811b 	bls.w	800051c <__udivmoddi4+0x298>
 80002e6:	3f02      	subs	r7, #2
 80002e8:	4463      	add	r3, ip
 80002ea:	1a1b      	subs	r3, r3, r0
 80002ec:	fbb3 f0f1 	udiv	r0, r3, r1
 80002f0:	fb01 3310 	mls	r3, r1, r0, r3
 80002f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002f8:	b2a4      	uxth	r4, r4
 80002fa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002fe:	45a6      	cmp	lr, r4
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x94>
 8000302:	eb1c 0404 	adds.w	r4, ip, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	f080 8109 	bcs.w	8000520 <__udivmoddi4+0x29c>
 800030e:	45a6      	cmp	lr, r4
 8000310:	f240 8106 	bls.w	8000520 <__udivmoddi4+0x29c>
 8000314:	4464      	add	r4, ip
 8000316:	3802      	subs	r0, #2
 8000318:	2100      	movs	r1, #0
 800031a:	eba4 040e 	sub.w	r4, r4, lr
 800031e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000322:	b11e      	cbz	r6, 800032c <__udivmoddi4+0xa8>
 8000324:	2300      	movs	r3, #0
 8000326:	40d4      	lsrs	r4, r2
 8000328:	e9c6 4300 	strd	r4, r3, [r6]
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	428b      	cmp	r3, r1
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0xc2>
 8000334:	2e00      	cmp	r6, #0
 8000336:	f000 80ee 	beq.w	8000516 <__udivmoddi4+0x292>
 800033a:	2100      	movs	r1, #0
 800033c:	e9c6 0500 	strd	r0, r5, [r6]
 8000340:	4608      	mov	r0, r1
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f183 	clz	r1, r3
 800034a:	2900      	cmp	r1, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x160>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0xd4>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80fc 	bhi.w	8000550 <__udivmoddi4+0x2cc>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb65 0303 	sbc.w	r3, r5, r3
 800035e:	2001      	movs	r0, #1
 8000360:	4698      	mov	r8, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d0e2      	beq.n	800032c <__udivmoddi4+0xa8>
 8000366:	e9c6 4800 	strd	r4, r8, [r6]
 800036a:	e7df      	b.n	800032c <__udivmoddi4+0xa8>
 800036c:	b902      	cbnz	r2, 8000370 <__udivmoddi4+0xec>
 800036e:	deff      	udf	#255	; 0xff
 8000370:	fab2 f282 	clz	r2, r2
 8000374:	2a00      	cmp	r2, #0
 8000376:	f040 8091 	bne.w	800049c <__udivmoddi4+0x218>
 800037a:	eba1 000c 	sub.w	r0, r1, ip
 800037e:	2101      	movs	r1, #1
 8000380:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fbb0 f3f7 	udiv	r3, r0, r7
 800038c:	fb07 0013 	mls	r0, r7, r3, r0
 8000390:	0c25      	lsrs	r5, r4, #16
 8000392:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000396:	fb0e f003 	mul.w	r0, lr, r3
 800039a:	42a8      	cmp	r0, r5
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x12c>
 800039e:	eb1c 0505 	adds.w	r5, ip, r5
 80003a2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x12a>
 80003a8:	42a8      	cmp	r0, r5
 80003aa:	f200 80ce 	bhi.w	800054a <__udivmoddi4+0x2c6>
 80003ae:	4643      	mov	r3, r8
 80003b0:	1a2d      	subs	r5, r5, r0
 80003b2:	fbb5 f0f7 	udiv	r0, r5, r7
 80003b6:	fb07 5510 	mls	r5, r7, r0, r5
 80003ba:	fb0e fe00 	mul.w	lr, lr, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x156>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003d0:	d202      	bcs.n	80003d8 <__udivmoddi4+0x154>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f200 80b6 	bhi.w	8000544 <__udivmoddi4+0x2c0>
 80003d8:	4628      	mov	r0, r5
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003e2:	e79e      	b.n	8000322 <__udivmoddi4+0x9e>
 80003e4:	f1c1 0720 	rsb	r7, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80003f2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003f6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fa:	fbba f8f9 	udiv	r8, sl, r9
 80003fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000402:	fb09 aa18 	mls	sl, r9, r8, sl
 8000406:	408d      	lsls	r5, r1
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	431d      	orrs	r5, r3
 800040e:	fa00 f301 	lsl.w	r3, r0, r1
 8000412:	fb08 f00e 	mul.w	r0, r8, lr
 8000416:	0c2c      	lsrs	r4, r5, #16
 8000418:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800041c:	42a0      	cmp	r0, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90b      	bls.n	800043c <__udivmoddi4+0x1b8>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800042c:	f080 8088 	bcs.w	8000540 <__udivmoddi4+0x2bc>
 8000430:	42a0      	cmp	r0, r4
 8000432:	f240 8085 	bls.w	8000540 <__udivmoddi4+0x2bc>
 8000436:	f1a8 0802 	sub.w	r8, r8, #2
 800043a:	4464      	add	r4, ip
 800043c:	1a24      	subs	r4, r4, r0
 800043e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000442:	fb09 4410 	mls	r4, r9, r0, r4
 8000446:	fb00 fe0e 	mul.w	lr, r0, lr
 800044a:	b2ad      	uxth	r5, r5
 800044c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x1e2>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d26c      	bcs.n	8000538 <__udivmoddi4+0x2b4>
 800045e:	45a6      	cmp	lr, r4
 8000460:	d96a      	bls.n	8000538 <__udivmoddi4+0x2b4>
 8000462:	3802      	subs	r0, #2
 8000464:	4464      	add	r4, ip
 8000466:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800046a:	fba0 9502 	umull	r9, r5, r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	42ac      	cmp	r4, r5
 8000474:	46c8      	mov	r8, r9
 8000476:	46ae      	mov	lr, r5
 8000478:	d356      	bcc.n	8000528 <__udivmoddi4+0x2a4>
 800047a:	d053      	beq.n	8000524 <__udivmoddi4+0x2a0>
 800047c:	2e00      	cmp	r6, #0
 800047e:	d069      	beq.n	8000554 <__udivmoddi4+0x2d0>
 8000480:	ebb3 0208 	subs.w	r2, r3, r8
 8000484:	eb64 040e 	sbc.w	r4, r4, lr
 8000488:	fa22 f301 	lsr.w	r3, r2, r1
 800048c:	fa04 f707 	lsl.w	r7, r4, r7
 8000490:	431f      	orrs	r7, r3
 8000492:	40cc      	lsrs	r4, r1
 8000494:	e9c6 7400 	strd	r7, r4, [r6]
 8000498:	2100      	movs	r1, #0
 800049a:	e747      	b.n	800032c <__udivmoddi4+0xa8>
 800049c:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a0:	f1c2 0120 	rsb	r1, r2, #32
 80004a4:	fa25 f301 	lsr.w	r3, r5, r1
 80004a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ac:	fa20 f101 	lsr.w	r1, r0, r1
 80004b0:	4095      	lsls	r5, r2
 80004b2:	430d      	orrs	r5, r1
 80004b4:	fbb3 f1f7 	udiv	r1, r3, r7
 80004b8:	fb07 3311 	mls	r3, r7, r1, r3
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	0c28      	lsrs	r0, r5, #16
 80004c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004c6:	fb01 f30e 	mul.w	r3, r1, lr
 80004ca:	4283      	cmp	r3, r0
 80004cc:	fa04 f402 	lsl.w	r4, r4, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x260>
 80004d2:	eb1c 0000 	adds.w	r0, ip, r0
 80004d6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004da:	d22f      	bcs.n	800053c <__udivmoddi4+0x2b8>
 80004dc:	4283      	cmp	r3, r0
 80004de:	d92d      	bls.n	800053c <__udivmoddi4+0x2b8>
 80004e0:	3902      	subs	r1, #2
 80004e2:	4460      	add	r0, ip
 80004e4:	1ac0      	subs	r0, r0, r3
 80004e6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ea:	fb07 0013 	mls	r0, r7, r3, r0
 80004ee:	b2ad      	uxth	r5, r5
 80004f0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004f4:	fb03 f00e 	mul.w	r0, r3, lr
 80004f8:	42a8      	cmp	r0, r5
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x28a>
 80004fc:	eb1c 0505 	adds.w	r5, ip, r5
 8000500:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000504:	d216      	bcs.n	8000534 <__udivmoddi4+0x2b0>
 8000506:	42a8      	cmp	r0, r5
 8000508:	d914      	bls.n	8000534 <__udivmoddi4+0x2b0>
 800050a:	3b02      	subs	r3, #2
 800050c:	4465      	add	r5, ip
 800050e:	1a28      	subs	r0, r5, r0
 8000510:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000514:	e738      	b.n	8000388 <__udivmoddi4+0x104>
 8000516:	4631      	mov	r1, r6
 8000518:	4630      	mov	r0, r6
 800051a:	e707      	b.n	800032c <__udivmoddi4+0xa8>
 800051c:	462f      	mov	r7, r5
 800051e:	e6e4      	b.n	80002ea <__udivmoddi4+0x66>
 8000520:	4618      	mov	r0, r3
 8000522:	e6f9      	b.n	8000318 <__udivmoddi4+0x94>
 8000524:	454b      	cmp	r3, r9
 8000526:	d2a9      	bcs.n	800047c <__udivmoddi4+0x1f8>
 8000528:	ebb9 0802 	subs.w	r8, r9, r2
 800052c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000530:	3801      	subs	r0, #1
 8000532:	e7a3      	b.n	800047c <__udivmoddi4+0x1f8>
 8000534:	4643      	mov	r3, r8
 8000536:	e7ea      	b.n	800050e <__udivmoddi4+0x28a>
 8000538:	4628      	mov	r0, r5
 800053a:	e794      	b.n	8000466 <__udivmoddi4+0x1e2>
 800053c:	4641      	mov	r1, r8
 800053e:	e7d1      	b.n	80004e4 <__udivmoddi4+0x260>
 8000540:	46d0      	mov	r8, sl
 8000542:	e77b      	b.n	800043c <__udivmoddi4+0x1b8>
 8000544:	4464      	add	r4, ip
 8000546:	3802      	subs	r0, #2
 8000548:	e747      	b.n	80003da <__udivmoddi4+0x156>
 800054a:	3b02      	subs	r3, #2
 800054c:	4465      	add	r5, ip
 800054e:	e72f      	b.n	80003b0 <__udivmoddi4+0x12c>
 8000550:	4608      	mov	r0, r1
 8000552:	e706      	b.n	8000362 <__udivmoddi4+0xde>
 8000554:	4631      	mov	r1, r6
 8000556:	e6e9      	b.n	800032c <__udivmoddi4+0xa8>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <sendData>:
 * SERIAL CONNECTION
 *
 */

char *sendData(char *buf, int size, uint16_t *retsize)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b0b0      	sub	sp, #192	; 0xc0
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
	//	serial_t serial;
	int ret= 0;
 8000568:	2300      	movs	r3, #0
 800056a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	char *retbuf = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	char buf2[100];
	char *res = calloc(1024, sizeof(char));
 8000574:	2101      	movs	r1, #1
 8000576:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800057a:	f011 fe55 	bl	8012228 <calloc>
 800057e:	4603      	mov	r3, r0
 8000580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	extern USBH_StatusTypeDef usbresult;

	#define RX_BUFF_SIZE   64
	//ret - кол-во принятых символов

	*retsize = ret;
 8000584:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000588:	b29a      	uxth	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	801a      	strh	r2, [r3, #0]
	retbuf = calloc(ret, sizeof(char));
 800058e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000592:	2101      	movs	r1, #1
 8000594:	4618      	mov	r0, r3
 8000596:	f011 fe47 	bl	8012228 <calloc>
 800059a:	4603      	mov	r3, r0
 800059c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	memcpy(retbuf, res, ret);
 80005a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80005a4:	461a      	mov	r2, r3
 80005a6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80005aa:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80005ae:	f011 ff01 	bl	80123b4 <memcpy>
	 MX_USB_HOST_Process();
 80005b2:	f00d fc4d 	bl	800de50 <MX_USB_HOST_Process>
//			fprintf(stderr, "serial_open(): %s\n", serial_errmsg(&serial));
//			retbuf = 0;
//		}
//		else
		uint8_t CDC_TX_Buffer[64];
		sendUSB(buf, size);
 80005b6:	68b9      	ldr	r1, [r7, #8]
 80005b8:	68f8      	ldr	r0, [r7, #12]
 80005ba:	f000 f933 	bl	8000824 <sendUSB>
		USBH_CDC_Receive(&hUsbHostFS,buf, size);
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	461a      	mov	r2, r3
 80005c2:	68f9      	ldr	r1, [r7, #12]
 80005c4:	4807      	ldr	r0, [pc, #28]	; (80005e4 <sendData+0x88>)
 80005c6:	f007 fd55 	bl	8008074 <USBH_CDC_Receive>
		HAL_UART_Transmit_IT(&huart5, buf, size);
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	68f9      	ldr	r1, [r7, #12]
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <sendData+0x8c>)
 80005d4:	f003 ff47 	bl	8004466 <HAL_UART_Transmit_IT>
//			}


		//serial_close(&serial);

	return retbuf;
 80005d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
}
 80005dc:	4618      	mov	r0, r3
 80005de:	37c0      	adds	r7, #192	; 0xc0
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000b68 	.word	0x20000b68
 80005e8:	20000ae8 	.word	0x20000ae8

080005ec <sendRequest>:
//  mem->memory[mem->size] = 0;
//
//  return realsize;
//}

MemoryStruct *sendRequest(const char *url, const char *postdata) {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
	//   return chunk;
	//  }
	//
	//  curl_easy_cleanup(curl_handle);
	//  curl_global_cleanup();
}
 80005f6:	bf00      	nop
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <sendWebRequest>:

Ibox_MemoryStruct *sendWebRequest(const char *request, const char *url)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b084      	sub	sp, #16
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	6039      	str	r1, [r7, #0]
	MemoryStruct *chunk = sendRequest(url, request);
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	6838      	ldr	r0, [r7, #0]
 8000610:	f7ff ffec 	bl	80005ec <sendRequest>
 8000614:	60f8      	str	r0, [r7, #12]

	Ibox_MemoryStruct *response = calloc(1, sizeof(Ibox_MemoryStruct));
 8000616:	2108      	movs	r1, #8
 8000618:	2001      	movs	r0, #1
 800061a:	f011 fe05 	bl	8012228 <calloc>
 800061e:	4603      	mov	r3, r0
 8000620:	60bb      	str	r3, [r7, #8]
	response->length = chunk ? chunk->size : 0;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d003      	beq.n	8000630 <sendWebRequest+0x2e>
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	461a      	mov	r2, r3
 800062e:	e000      	b.n	8000632 <sendWebRequest+0x30>
 8000630:	2200      	movs	r2, #0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	605a      	str	r2, [r3, #4]
	response->data = chunk ? chunk->memory : NULL;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <sendWebRequest+0x40>
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	e000      	b.n	8000644 <sendWebRequest+0x42>
 8000642:	2300      	movs	r3, #0
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	6013      	str	r3, [r2, #0]

	return response;
 8000648:	68bb      	ldr	r3, [r7, #8]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <sendReaderRequest>:

Ibox_MemoryStruct *sendReaderRequest(char *request, int length)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b086      	sub	sp, #24
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	6039      	str	r1, [r7, #0]
	Ibox_MemoryStruct *response = NULL;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]

	uint16_t responseLength = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	81fb      	strh	r3, [r7, #14]
	char *responseData = sendData(request, length, &responseLength);
 8000664:	f107 030e 	add.w	r3, r7, #14
 8000668:	461a      	mov	r2, r3
 800066a:	6839      	ldr	r1, [r7, #0]
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff75 	bl	800055c <sendData>
 8000672:	6138      	str	r0, [r7, #16]
	if (responseData)
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00c      	beq.n	8000694 <sendReaderRequest+0x42>
	{
		response = calloc(1, sizeof(Ibox_MemoryStruct));
 800067a:	2108      	movs	r1, #8
 800067c:	2001      	movs	r0, #1
 800067e:	f011 fdd3 	bl	8012228 <calloc>
 8000682:	4603      	mov	r3, r0
 8000684:	617b      	str	r3, [r7, #20]
		response->length = responseLength;
 8000686:	89fb      	ldrh	r3, [r7, #14]
 8000688:	461a      	mov	r2, r3
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	605a      	str	r2, [r3, #4]
		response->data = responseData;
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	693a      	ldr	r2, [r7, #16]
 8000692:	601a      	str	r2, [r3, #0]
	}
	return response;
 8000694:	697b      	ldr	r3, [r7, #20]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_GPIO_Init+0x90>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <MX_GPIO_Init+0x90>)
 80006ba:	f043 0320 	orr.w	r3, r3, #32
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_GPIO_Init+0x90>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0320 	and.w	r3, r3, #32
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_GPIO_Init+0x90>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a17      	ldr	r2, [pc, #92]	; (8000730 <MX_GPIO_Init+0x90>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_GPIO_Init+0x90>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_GPIO_Init+0x90>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a11      	ldr	r2, [pc, #68]	; (8000730 <MX_GPIO_Init+0x90>)
 80006ea:	f043 0310 	orr.w	r3, r3, #16
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_GPIO_Init+0x90>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0310 	and.w	r3, r3, #16
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000702:	480c      	ldr	r0, [pc, #48]	; (8000734 <MX_GPIO_Init+0x94>)
 8000704:	f000 fff2 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2302      	movs	r3, #2
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	4619      	mov	r1, r3
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_GPIO_Init+0x94>)
 8000722:	f000 fe5f 	bl	80013e4 <HAL_GPIO_Init>

}
 8000726:	bf00      	nop
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	40010800 	.word	0x40010800

08000738 <UARTPrint>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UARTPrint(const char *args, ...)
{
 8000738:	b40f      	push	{r0, r1, r2, r3}
 800073a:	b580      	push	{r7, lr}
 800073c:	b0c2      	sub	sp, #264	; 0x108
 800073e:	af00      	add	r7, sp, #0
	char StrBuff[256];
	va_list ap;
	va_start(ap, args);
 8000740:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800074c:	601a      	str	r2, [r3, #0]
	char len = vsnprintf(StrBuff, sizeof(StrBuff), args, ap);
 800074e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000756:	1d38      	adds	r0, r7, #4
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800075e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000762:	f012 fac5 	bl	8012cf0 <vsniprintf>
 8000766:	4603      	mov	r3, r0
 8000768:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	va_end(ap);
	HAL_UART_Transmit(&huart5,(uint8_t*)StrBuff,len,100);
 800076c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000770:	b29a      	uxth	r2, r3
 8000772:	1d39      	adds	r1, r7, #4
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <UARTPrint+0x54>)
 8000778:	f003 fde3 	bl	8004342 <HAL_UART_Transmit>
}
 800077c:	bf00      	nop
 800077e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000782:	46bd      	mov	sp, r7
 8000784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000788:	b004      	add	sp, #16
 800078a:	4770      	bx	lr
 800078c:	20000ae8 	.word	0x20000ae8

08000790 <startTransactionAction>:
	}
}
Ibox_Account *mAccount = NULL;
const char *mTransactionId = NULL;
void startTransactionAction(const char *transactionId)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	mTransactionId = transactionId;
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <startTransactionAction+0x28>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]
	fprintf(stderr, "TransactionID:%s\n", transactionId);
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <startTransactionAction+0x2c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4906      	ldr	r1, [pc, #24]	; (80007c0 <startTransactionAction+0x30>)
 80007a8:	4618      	mov	r0, r3
 80007aa:	f011 fd4b 	bl	8012244 <fiprintf>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000a98 	.word	0x20000a98
 80007bc:	20000a18 	.word	0x20000a18
 80007c0:	080137d0 	.word	0x080137d0

080007c4 <selectEmvApplicationAction>:
int selectEmvApplicationAction(char **emvApplications, int emvApplicationsCount)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
	fprintf(stderr, "selectEmvApplicationAction\n");
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <selectEmvApplicationAction+0x54>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	221b      	movs	r2, #27
 80007d6:	2101      	movs	r1, #1
 80007d8:	4810      	ldr	r0, [pc, #64]	; (800081c <selectEmvApplicationAction+0x58>)
 80007da:	f011 fda5 	bl	8012328 <fwrite>
	int selectedIndex = 1;
 80007de:	2301      	movs	r3, #1
 80007e0:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < emvApplicationsCount; i++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	e00e      	b.n	8000806 <selectEmvApplicationAction+0x42>
		fprintf(stderr, "emv app title: %d - %s\n", i, emvApplications[i]);
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <selectEmvApplicationAction+0x54>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	68d8      	ldr	r0, [r3, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4909      	ldr	r1, [pc, #36]	; (8000820 <selectEmvApplicationAction+0x5c>)
 80007fc:	f011 fd22 	bl	8012244 <fiprintf>
	for (int i = 0; i < emvApplicationsCount; i++)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3301      	adds	r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	dbec      	blt.n	80007e8 <selectEmvApplicationAction+0x24>
	return selectedIndex;
 800080e:	68bb      	ldr	r3, [r7, #8]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000a18 	.word	0x20000a18
 800081c:	080137e4 	.word	0x080137e4
 8000820:	08013800 	.word	0x08013800

08000824 <sendUSB>:
void sendUSB(char *buf, int size)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]


		switch(Appli_state)
 800082e:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <sendUSB+0x84>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b03      	cmp	r3, #3
 8000834:	d833      	bhi.n	800089e <sendUSB+0x7a>
 8000836:	a201      	add	r2, pc, #4	; (adr r2, 800083c <sendUSB+0x18>)
 8000838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083c:	0800084d 	.word	0x0800084d
 8000840:	0800085d 	.word	0x0800085d
 8000844:	08000885 	.word	0x08000885
 8000848:	08000855 	.word	0x08000855
		{
		case  APPLICATION_IDLE:
			UARTPrint("APPLICATION_IDLE\r\n");
 800084c:	4817      	ldr	r0, [pc, #92]	; (80008ac <sendUSB+0x88>)
 800084e:	f7ff ff73 	bl	8000738 <UARTPrint>
			break;
 8000852:	e024      	b.n	800089e <sendUSB+0x7a>
		case  APPLICATION_DISCONNECT:
			UARTPrint("APPLICATION_DISCONNECT\r\n");
 8000854:	4816      	ldr	r0, [pc, #88]	; (80008b0 <sendUSB+0x8c>)
 8000856:	f7ff ff6f 	bl	8000738 <UARTPrint>
			break;
 800085a:	e020      	b.n	800089e <sendUSB+0x7a>
		case    APPLICATION_START:
			//UARTPrint("  APPLICATION_START\r\n");
			USBH_CDC_Stop(&hUsbHostFS);
 800085c:	4815      	ldr	r0, [pc, #84]	; (80008b4 <sendUSB+0x90>)
 800085e:	f007 fb71 	bl	8007f44 <USBH_CDC_Stop>
			USBH_CDC_Transmit (&hUsbHostFS, buf, size);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	4812      	ldr	r0, [pc, #72]	; (80008b4 <sendUSB+0x90>)
 800086a:	f007 fbd4 	bl	8008016 <USBH_CDC_Transmit>
			//HAL_UART_Transmit_IT(&huart5, buf, size);
			i++;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <sendUSB+0x94>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <sendUSB+0x94>)
 8000878:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 800087a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087e:	f000 fb6b 	bl	8000f58 <HAL_Delay>
//			USBH_CDC_Receive(&hUsbHostFS,buf, size);
//			UARTPrint("Recive ------------------------------\r\n\n");
//
//			HAL_UART_Transmit_IT(&huart5, buf, size);
			break;
 8000882:	e00c      	b.n	800089e <sendUSB+0x7a>
		case APPLICATION_READY:
			UARTPrint("  APPLICATION_READY\r\n");
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <sendUSB+0x98>)
 8000886:	f7ff ff57 	bl	8000738 <UARTPrint>
			USBH_CDC_Stop(&hUsbHostFS);
 800088a:	480a      	ldr	r0, [pc, #40]	; (80008b4 <sendUSB+0x90>)
 800088c:	f007 fb5a 	bl	8007f44 <USBH_CDC_Stop>
			USBH_CDC_Transmit (&hUsbHostFS, buf, size);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	4807      	ldr	r0, [pc, #28]	; (80008b4 <sendUSB+0x90>)
 8000898:	f007 fbbd 	bl	8008016 <USBH_CDC_Transmit>
//			HAL_Delay(1000);
//			USBH_CDC_Receive(&hUsbHostFS,buf, size);
//			UARTPrint("Recive:\r\n");
//
//			HAL_UART_Transmit_IT(&huart5, buf, size);
			break;
 800089c:	bf00      	nop
		}

}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20001cdc 	.word	0x20001cdc
 80008ac:	08013818 	.word	0x08013818
 80008b0:	0801382c 	.word	0x0801382c
 80008b4:	20000b68 	.word	0x20000b68
 80008b8:	20000000 	.word	0x20000000
 80008bc:	08013848 	.word	0x08013848

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f000 fb15 	bl	8000ef4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ca:	f000 f85f 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ce:	f7ff fee7 	bl	80006a0 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80008d2:	f00d fa6b 	bl	800ddac <MX_USB_HOST_Init>
  MX_UART5_Init();
 80008d6:	f000 fa5b 	bl	8000d90 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

	Ibox_Result_Authentication *authResult = NULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
	Ibox_PaymentController_SetSendWebRequestAction(&sendWebRequest);
 80008de:	481e      	ldr	r0, [pc, #120]	; (8000958 <main+0x98>)
 80008e0:	f00d fdae 	bl	800e440 <Ibox_PaymentController_SetSendWebRequestAction>
	Ibox_PaymentController_SetSendReaderRequestAction(&sendReaderRequest);
 80008e4:	481d      	ldr	r0, [pc, #116]	; (800095c <main+0x9c>)
 80008e6:	f00d fdb3 	bl	800e450 <Ibox_PaymentController_SetSendReaderRequestAction>
	Ibox_PaymentController_SetStartTransactionAction(&startTransactionAction);
 80008ea:	481d      	ldr	r0, [pc, #116]	; (8000960 <main+0xa0>)
 80008ec:	f00d fdb8 	bl	800e460 <Ibox_PaymentController_SetStartTransactionAction>
	Ibox_PaymentController_SetSelectEmvApplicationAction(&selectEmvApplicationAction);
 80008f0:	481c      	ldr	r0, [pc, #112]	; (8000964 <main+0xa4>)
 80008f2:	f00d fdbd 	bl	800e470 <Ibox_PaymentController_SetSelectEmvApplicationAction>
	Ibox_PaymentController_SetCredentials(EMAIL, SECRET_KEY);
 80008f6:	491c      	ldr	r1, [pc, #112]	; (8000968 <main+0xa8>)
 80008f8:	481b      	ldr	r0, [pc, #108]	; (8000968 <main+0xa8>)
 80008fa:	f00d fd99 	bl	800e430 <Ibox_PaymentController_SetCredentials>
	Ibox_PaymentController_SetDebugEnabled(DEBUG_ENABLED);
 80008fe:	2001      	movs	r0, #1
 8000900:	f00d fdc6 	bl	800e490 <Ibox_PaymentController_SetDebugEnabled>
	Ibox_PaymentController_ReaderSoundEnabled(1);
 8000904:	2001      	movs	r0, #1
 8000906:	f00d fdbb 	bl	800e480 <Ibox_PaymentController_ReaderSoundEnabled>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000910:	4816      	ldr	r0, [pc, #88]	; (800096c <main+0xac>)
 8000912:	f000 feeb 	bl	80016ec <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart5, "ready", 5);
 8000916:	2205      	movs	r2, #5
 8000918:	4915      	ldr	r1, [pc, #84]	; (8000970 <main+0xb0>)
 800091a:	4816      	ldr	r0, [pc, #88]	; (8000974 <main+0xb4>)
 800091c:	f003 fde7 	bl	80044ee <HAL_UART_Receive_IT>
	int i=0;
 8000920:	2300      	movs	r3, #0
 8000922:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit_IT(&huart5, "1\n", 3);
 8000924:	2203      	movs	r2, #3
 8000926:	4914      	ldr	r1, [pc, #80]	; (8000978 <main+0xb8>)
 8000928:	4812      	ldr	r0, [pc, #72]	; (8000974 <main+0xb4>)
 800092a:	f003 fd9c 	bl	8004466 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart5, (uint8_t*)"2", 1);
 800092e:	2201      	movs	r2, #1
 8000930:	4912      	ldr	r1, [pc, #72]	; (800097c <main+0xbc>)
 8000932:	4810      	ldr	r0, [pc, #64]	; (8000974 <main+0xb4>)
 8000934:	f003 fd97 	bl	8004466 <HAL_UART_Transmit_IT>

	HAL_UART_Transmit_IT(&huart5, "3", 1);
 8000938:	2201      	movs	r2, #1
 800093a:	4911      	ldr	r1, [pc, #68]	; (8000980 <main+0xc0>)
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <main+0xb4>)
 800093e:	f003 fd92 	bl	8004466 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart5, (uint8_t*)"4", 1);
 8000942:	2201      	movs	r2, #1
 8000944:	490f      	ldr	r1, [pc, #60]	; (8000984 <main+0xc4>)
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <main+0xb4>)
 8000948:	f003 fd8d 	bl	8004466 <HAL_UART_Transmit_IT>
	UARTPrint("Getting reader info.\r\n");
 800094c:	480e      	ldr	r0, [pc, #56]	; (8000988 <main+0xc8>)
 800094e:	f7ff fef3 	bl	8000738 <UARTPrint>
	Ibox_Result_ReaderId *readerIdResult;// = Ibox_PaymentController_ReaderId();

	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000952:	f00d fa7d 	bl	800de50 <MX_USB_HOST_Process>
 8000956:	e7fc      	b.n	8000952 <main+0x92>
 8000958:	08000603 	.word	0x08000603
 800095c:	08000653 	.word	0x08000653
 8000960:	08000791 	.word	0x08000791
 8000964:	080007c5 	.word	0x080007c5
 8000968:	08013860 	.word	0x08013860
 800096c:	40010800 	.word	0x40010800
 8000970:	08013864 	.word	0x08013864
 8000974:	20000ae8 	.word	0x20000ae8
 8000978:	0801386c 	.word	0x0801386c
 800097c:	08013870 	.word	0x08013870
 8000980:	08013874 	.word	0x08013874
 8000984:	08013878 	.word	0x08013878
 8000988:	0801387c 	.word	0x0801387c

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b09c      	sub	sp, #112	; 0x70
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000996:	2238      	movs	r2, #56	; 0x38
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f011 fd18 	bl	80123d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2220      	movs	r2, #32
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f011 fd0a 	bl	80123d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009bc:	2301      	movs	r3, #1
 80009be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80009c6:	2304      	movs	r3, #4
 80009c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ca:	2301      	movs	r3, #1
 80009cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80009ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d4:	2302      	movs	r3, #2
 80009d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80009e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 fb6a 	bl	80030d0 <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a02:	f000 f83f 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	230f      	movs	r3, #15
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	2102      	movs	r1, #2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 fe6a 	bl	80036fc <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a2e:	f000 f829 	bl	8000a84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a32:	2310      	movs	r3, #16
 8000a34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 f8a5 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a48:	f000 f81c 	bl	8000a84 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <SystemClock_Config+0xd0>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]
}
 8000a52:	bf00      	nop
 8000a54:	3770      	adds	r7, #112	; 0x70
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	42420070 	.word	0x42420070

08000a60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a72:	f000 fa55 	bl	8000f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40012c00 	.word	0x40012c00

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_MspInit+0x40>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <HAL_MspInit+0x40>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_MspInit+0x40>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_MspInit+0x40>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_MspInit+0x40>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_MspInit+0x40>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	; 0x30
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	4a2d      	ldr	r2, [pc, #180]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000af0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af4:	6193      	str	r3, [r2, #24]
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b02:	f107 020c 	add.w	r2, r7, #12
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 ffef 	bl	8003af0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b12:	f002 ffd9 	bl	8003ac8 <HAL_RCC_GetPCLK2Freq>
 8000b16:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <HAL_InitTick+0xd4>)
 8000b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b20:	0c9b      	lsrs	r3, r3, #18
 8000b22:	3b01      	subs	r3, #1
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <HAL_InitTick+0xd8>)
 8000b28:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <HAL_InitTick+0xdc>)
 8000b2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <HAL_InitTick+0xd8>)
 8000b2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b32:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b34:	4a1d      	ldr	r2, [pc, #116]	; (8000bac <HAL_InitTick+0xd8>)
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_InitTick+0xd8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <HAL_InitTick+0xd8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_InitTick+0xd8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b4c:	4817      	ldr	r0, [pc, #92]	; (8000bac <HAL_InitTick+0xd8>)
 8000b4e:	f003 f94f 	bl	8003df0 <HAL_TIM_Base_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d11b      	bne.n	8000b98 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b60:	4812      	ldr	r0, [pc, #72]	; (8000bac <HAL_InitTick+0xd8>)
 8000b62:	f003 f99d 	bl	8003ea0 <HAL_TIM_Base_Start_IT>
 8000b66:	4603      	mov	r3, r0
 8000b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d111      	bne.n	8000b98 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b74:	2019      	movs	r0, #25
 8000b76:	f000 fae4 	bl	8001142 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d808      	bhi.n	8000b92 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	2019      	movs	r0, #25
 8000b86:	f000 fac0 	bl	800110a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_InitTick+0xe0>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	e002      	b.n	8000b98 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3730      	adds	r7, #48	; 0x30
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	431bde83 	.word	0x431bde83
 8000bac:	20000a9c 	.word	0x20000a9c
 8000bb0:	40012c00 	.word	0x40012c00
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
	...

08000c08 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM1_UP_IRQHandler+0x10>)
 8000c0e:	f003 f9a1 	bl	8003f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000a9c 	.word	0x20000a9c

08000c1c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <UART5_IRQHandler+0x10>)
 8000c22:	f003 fc95 	bl	8004550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000ae8 	.word	0x20000ae8

08000c30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <OTG_FS_IRQHandler+0x10>)
 8000c36:	f000 ffd7 	bl	8001be8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20001ce0 	.word	0x20001ce0

08000c44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	e00a      	b.n	8000c6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c56:	f3af 8000 	nop.w
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	60ba      	str	r2, [r7, #8]
 8000c62:	b2ca      	uxtb	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbf0      	blt.n	8000c56 <_read+0x12>
  }

  return len;
 8000c74:	687b      	ldr	r3, [r7, #4]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e009      	b.n	8000ca4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbf1      	blt.n	8000c90 <_write+0x12>
  }
  return len;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_close>:

int _close(int file)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cdc:	605a      	str	r2, [r3, #4]
  return 0;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <_isatty>:

int _isatty(int file)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b085      	sub	sp, #20
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
	...

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d48:	f011 fa76 	bl	8012238 <__errno>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d56:	e009      	b.n	8000d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <_sbrk+0x64>)
 8000d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20018000 	.word	0x20018000
 8000d78:	00000400 	.word	0x00000400
 8000d7c:	20000ae4 	.word	0x20000ae4
 8000d80:	20013668 	.word	0x20013668

08000d84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_UART5_Init+0x50>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_UART5_Init+0x4c>)
 8000dc8:	f003 fa6e 	bl	80042a8 <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000dd2:	f7ff fe57 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000ae8 	.word	0x20000ae8
 8000de0:	40005000 	.word	0x40005000

08000de4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0318 	add.w	r3, r7, #24
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <HAL_UART_MspInit+0xb4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d144      	bne.n	8000e8e <HAL_UART_MspInit+0xaa>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <HAL_UART_MspInit+0xb8>)
 8000e06:	69db      	ldr	r3, [r3, #28]
 8000e08:	4a24      	ldr	r2, [pc, #144]	; (8000e9c <HAL_UART_MspInit+0xb8>)
 8000e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e0e:	61d3      	str	r3, [r2, #28]
 8000e10:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <HAL_UART_MspInit+0xb8>)
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <HAL_UART_MspInit+0xb8>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <HAL_UART_MspInit+0xb8>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <HAL_UART_MspInit+0xb8>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0310 	and.w	r3, r3, #16
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_UART_MspInit+0xb8>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <HAL_UART_MspInit+0xb8>)
 8000e3a:	f043 0320 	orr.w	r3, r3, #32
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_UART_MspInit+0xb8>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0320 	and.w	r3, r3, #32
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5a:	f107 0318 	add.w	r3, r7, #24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <HAL_UART_MspInit+0xbc>)
 8000e62:	f000 fabf 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e66:	2304      	movs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	4619      	mov	r1, r3
 8000e78:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <HAL_UART_MspInit+0xc0>)
 8000e7a:	f000 fab3 	bl	80013e4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2035      	movs	r0, #53	; 0x35
 8000e84:	f000 f941 	bl	800110a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000e88:	2035      	movs	r0, #53	; 0x35
 8000e8a:	f000 f95a 	bl	8001142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40005000 	.word	0x40005000
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40011000 	.word	0x40011000
 8000ea4:	40011400 	.word	0x40011400

08000ea8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eaa:	490d      	ldr	r1, [pc, #52]	; (8000ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec0:	4c0a      	ldr	r4, [pc, #40]	; (8000eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ece:	f7ff ff59 	bl	8000d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f011 fa37 	bl	8012344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed6:	f7ff fcf3 	bl	80008c0 <main>
  bx lr
 8000eda:	4770      	bx	lr
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	20000a7c 	.word	0x20000a7c
  ldr r2, =_sidata
 8000ee4:	08014ccc 	.word	0x08014ccc
  ldr r2, =_sbss
 8000ee8:	20000a7c 	.word	0x20000a7c
  ldr r4, =_ebss
 8000eec:	20013664 	.word	0x20013664

08000ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC1_2_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_Init+0x28>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_Init+0x28>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f8f5 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f7ff fde2 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fdbe 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40022000 	.word	0x40022000

08000f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_IncTick+0x1c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x20>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <HAL_IncTick+0x20>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	2000000c 	.word	0x2000000c
 8000f40:	20000b2c 	.word	0x20000b2c

08000f44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <HAL_GetTick+0x10>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	20000b2c 	.word	0x20000b2c

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff fff0 	bl	8000f44 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffe0 	bl	8000f44 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000000c 	.word	0x2000000c

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4906      	ldr	r1, [pc, #24]	; (8001038 <__NVIC_EnableIRQ+0x34>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0a      	blt.n	8001066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	490c      	ldr	r1, [pc, #48]	; (8001088 <__NVIC_SetPriority+0x4c>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	440b      	add	r3, r1
 8001060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001064:	e00a      	b.n	800107c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <__NVIC_SetPriority+0x50>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	3b04      	subs	r3, #4
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	440b      	add	r3, r1
 800107a:	761a      	strb	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43da      	mvns	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	4313      	orrs	r3, r2
         );
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff4f 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800111c:	f7ff ff64 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 8001120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff ffb2 	bl	8001090 <NVIC_EncodePriority>
 800112c:	4602      	mov	r2, r0
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff81 	bl	800103c <__NVIC_SetPriority>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff57 	bl	8001004 <__NVIC_EnableIRQ>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800115e:	b480      	push	{r7}
 8001160:	b085      	sub	sp, #20
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001170:	2b02      	cmp	r3, #2
 8001172:	d008      	beq.n	8001186 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2204      	movs	r2, #4
 8001178:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e020      	b.n	80011c8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 020e 	bic.w	r2, r2, #14
 8001194:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0201 	bic.w	r2, r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ae:	2101      	movs	r1, #1
 80011b0:	fa01 f202 	lsl.w	r2, r1, r2
 80011b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d005      	beq.n	80011f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2204      	movs	r2, #4
 80011ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e0d6      	b.n	80013a4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 020e 	bic.w	r2, r2, #14
 8001204:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0201 	bic.w	r2, r2, #1
 8001214:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <HAL_DMA_Abort_IT+0x1dc>)
 800121e:	429a      	cmp	r2, r3
 8001220:	d958      	bls.n	80012d4 <HAL_DMA_Abort_IT+0x100>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a63      	ldr	r2, [pc, #396]	; (80013b4 <HAL_DMA_Abort_IT+0x1e0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d04f      	beq.n	80012cc <HAL_DMA_Abort_IT+0xf8>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a61      	ldr	r2, [pc, #388]	; (80013b8 <HAL_DMA_Abort_IT+0x1e4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d048      	beq.n	80012c8 <HAL_DMA_Abort_IT+0xf4>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a60      	ldr	r2, [pc, #384]	; (80013bc <HAL_DMA_Abort_IT+0x1e8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d040      	beq.n	80012c2 <HAL_DMA_Abort_IT+0xee>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a5e      	ldr	r2, [pc, #376]	; (80013c0 <HAL_DMA_Abort_IT+0x1ec>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d038      	beq.n	80012bc <HAL_DMA_Abort_IT+0xe8>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a5d      	ldr	r2, [pc, #372]	; (80013c4 <HAL_DMA_Abort_IT+0x1f0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d030      	beq.n	80012b6 <HAL_DMA_Abort_IT+0xe2>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a5b      	ldr	r2, [pc, #364]	; (80013c8 <HAL_DMA_Abort_IT+0x1f4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d028      	beq.n	80012b0 <HAL_DMA_Abort_IT+0xdc>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a53      	ldr	r2, [pc, #332]	; (80013b0 <HAL_DMA_Abort_IT+0x1dc>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d020      	beq.n	80012aa <HAL_DMA_Abort_IT+0xd6>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a57      	ldr	r2, [pc, #348]	; (80013cc <HAL_DMA_Abort_IT+0x1f8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d019      	beq.n	80012a6 <HAL_DMA_Abort_IT+0xd2>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a56      	ldr	r2, [pc, #344]	; (80013d0 <HAL_DMA_Abort_IT+0x1fc>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d012      	beq.n	80012a2 <HAL_DMA_Abort_IT+0xce>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a54      	ldr	r2, [pc, #336]	; (80013d4 <HAL_DMA_Abort_IT+0x200>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00a      	beq.n	800129c <HAL_DMA_Abort_IT+0xc8>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a53      	ldr	r2, [pc, #332]	; (80013d8 <HAL_DMA_Abort_IT+0x204>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d102      	bne.n	8001296 <HAL_DMA_Abort_IT+0xc2>
 8001290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001294:	e01b      	b.n	80012ce <HAL_DMA_Abort_IT+0xfa>
 8001296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129a:	e018      	b.n	80012ce <HAL_DMA_Abort_IT+0xfa>
 800129c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a0:	e015      	b.n	80012ce <HAL_DMA_Abort_IT+0xfa>
 80012a2:	2310      	movs	r3, #16
 80012a4:	e013      	b.n	80012ce <HAL_DMA_Abort_IT+0xfa>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e011      	b.n	80012ce <HAL_DMA_Abort_IT+0xfa>
 80012aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012ae:	e00e      	b.n	80012ce <HAL_DMA_Abort_IT+0xfa>
 80012b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012b4:	e00b      	b.n	80012ce <HAL_DMA_Abort_IT+0xfa>
 80012b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ba:	e008      	b.n	80012ce <HAL_DMA_Abort_IT+0xfa>
 80012bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c0:	e005      	b.n	80012ce <HAL_DMA_Abort_IT+0xfa>
 80012c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c6:	e002      	b.n	80012ce <HAL_DMA_Abort_IT+0xfa>
 80012c8:	2310      	movs	r3, #16
 80012ca:	e000      	b.n	80012ce <HAL_DMA_Abort_IT+0xfa>
 80012cc:	2301      	movs	r3, #1
 80012ce:	4a43      	ldr	r2, [pc, #268]	; (80013dc <HAL_DMA_Abort_IT+0x208>)
 80012d0:	6053      	str	r3, [r2, #4]
 80012d2:	e057      	b.n	8001384 <HAL_DMA_Abort_IT+0x1b0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a36      	ldr	r2, [pc, #216]	; (80013b4 <HAL_DMA_Abort_IT+0x1e0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d04f      	beq.n	800137e <HAL_DMA_Abort_IT+0x1aa>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a35      	ldr	r2, [pc, #212]	; (80013b8 <HAL_DMA_Abort_IT+0x1e4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d048      	beq.n	800137a <HAL_DMA_Abort_IT+0x1a6>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a33      	ldr	r2, [pc, #204]	; (80013bc <HAL_DMA_Abort_IT+0x1e8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d040      	beq.n	8001374 <HAL_DMA_Abort_IT+0x1a0>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a32      	ldr	r2, [pc, #200]	; (80013c0 <HAL_DMA_Abort_IT+0x1ec>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d038      	beq.n	800136e <HAL_DMA_Abort_IT+0x19a>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a30      	ldr	r2, [pc, #192]	; (80013c4 <HAL_DMA_Abort_IT+0x1f0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d030      	beq.n	8001368 <HAL_DMA_Abort_IT+0x194>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <HAL_DMA_Abort_IT+0x1f4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d028      	beq.n	8001362 <HAL_DMA_Abort_IT+0x18e>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <HAL_DMA_Abort_IT+0x1dc>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d020      	beq.n	800135c <HAL_DMA_Abort_IT+0x188>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a2b      	ldr	r2, [pc, #172]	; (80013cc <HAL_DMA_Abort_IT+0x1f8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d019      	beq.n	8001358 <HAL_DMA_Abort_IT+0x184>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <HAL_DMA_Abort_IT+0x1fc>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d012      	beq.n	8001354 <HAL_DMA_Abort_IT+0x180>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a28      	ldr	r2, [pc, #160]	; (80013d4 <HAL_DMA_Abort_IT+0x200>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00a      	beq.n	800134e <HAL_DMA_Abort_IT+0x17a>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a26      	ldr	r2, [pc, #152]	; (80013d8 <HAL_DMA_Abort_IT+0x204>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d102      	bne.n	8001348 <HAL_DMA_Abort_IT+0x174>
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	e01b      	b.n	8001380 <HAL_DMA_Abort_IT+0x1ac>
 8001348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134c:	e018      	b.n	8001380 <HAL_DMA_Abort_IT+0x1ac>
 800134e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001352:	e015      	b.n	8001380 <HAL_DMA_Abort_IT+0x1ac>
 8001354:	2310      	movs	r3, #16
 8001356:	e013      	b.n	8001380 <HAL_DMA_Abort_IT+0x1ac>
 8001358:	2301      	movs	r3, #1
 800135a:	e011      	b.n	8001380 <HAL_DMA_Abort_IT+0x1ac>
 800135c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001360:	e00e      	b.n	8001380 <HAL_DMA_Abort_IT+0x1ac>
 8001362:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001366:	e00b      	b.n	8001380 <HAL_DMA_Abort_IT+0x1ac>
 8001368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136c:	e008      	b.n	8001380 <HAL_DMA_Abort_IT+0x1ac>
 800136e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001372:	e005      	b.n	8001380 <HAL_DMA_Abort_IT+0x1ac>
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001378:	e002      	b.n	8001380 <HAL_DMA_Abort_IT+0x1ac>
 800137a:	2310      	movs	r3, #16
 800137c:	e000      	b.n	8001380 <HAL_DMA_Abort_IT+0x1ac>
 800137e:	2301      	movs	r3, #1
 8001380:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_DMA_Abort_IT+0x20c>)
 8001382:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	4798      	blx	r3
    } 
  }
  return status;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40020080 	.word	0x40020080
 80013b4:	40020008 	.word	0x40020008
 80013b8:	4002001c 	.word	0x4002001c
 80013bc:	40020030 	.word	0x40020030
 80013c0:	40020044 	.word	0x40020044
 80013c4:	40020058 	.word	0x40020058
 80013c8:	4002006c 	.word	0x4002006c
 80013cc:	40020408 	.word	0x40020408
 80013d0:	4002041c 	.word	0x4002041c
 80013d4:	40020430 	.word	0x40020430
 80013d8:	40020444 	.word	0x40020444
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020000 	.word	0x40020000

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f6:	e169      	b.n	80016cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013f8:	2201      	movs	r2, #1
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	429a      	cmp	r2, r3
 8001412:	f040 8158 	bne.w	80016c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a9a      	ldr	r2, [pc, #616]	; (8001684 <HAL_GPIO_Init+0x2a0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d05e      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001420:	4a98      	ldr	r2, [pc, #608]	; (8001684 <HAL_GPIO_Init+0x2a0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d875      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001426:	4a98      	ldr	r2, [pc, #608]	; (8001688 <HAL_GPIO_Init+0x2a4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d058      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 800142c:	4a96      	ldr	r2, [pc, #600]	; (8001688 <HAL_GPIO_Init+0x2a4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d86f      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001432:	4a96      	ldr	r2, [pc, #600]	; (800168c <HAL_GPIO_Init+0x2a8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d052      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001438:	4a94      	ldr	r2, [pc, #592]	; (800168c <HAL_GPIO_Init+0x2a8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d869      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800143e:	4a94      	ldr	r2, [pc, #592]	; (8001690 <HAL_GPIO_Init+0x2ac>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d04c      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001444:	4a92      	ldr	r2, [pc, #584]	; (8001690 <HAL_GPIO_Init+0x2ac>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d863      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800144a:	4a92      	ldr	r2, [pc, #584]	; (8001694 <HAL_GPIO_Init+0x2b0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d046      	beq.n	80014de <HAL_GPIO_Init+0xfa>
 8001450:	4a90      	ldr	r2, [pc, #576]	; (8001694 <HAL_GPIO_Init+0x2b0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d85d      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 8001456:	2b12      	cmp	r3, #18
 8001458:	d82a      	bhi.n	80014b0 <HAL_GPIO_Init+0xcc>
 800145a:	2b12      	cmp	r3, #18
 800145c:	d859      	bhi.n	8001512 <HAL_GPIO_Init+0x12e>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <HAL_GPIO_Init+0x80>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	080014df 	.word	0x080014df
 8001468:	080014b9 	.word	0x080014b9
 800146c:	080014cb 	.word	0x080014cb
 8001470:	0800150d 	.word	0x0800150d
 8001474:	08001513 	.word	0x08001513
 8001478:	08001513 	.word	0x08001513
 800147c:	08001513 	.word	0x08001513
 8001480:	08001513 	.word	0x08001513
 8001484:	08001513 	.word	0x08001513
 8001488:	08001513 	.word	0x08001513
 800148c:	08001513 	.word	0x08001513
 8001490:	08001513 	.word	0x08001513
 8001494:	08001513 	.word	0x08001513
 8001498:	08001513 	.word	0x08001513
 800149c:	08001513 	.word	0x08001513
 80014a0:	08001513 	.word	0x08001513
 80014a4:	08001513 	.word	0x08001513
 80014a8:	080014c1 	.word	0x080014c1
 80014ac:	080014d5 	.word	0x080014d5
 80014b0:	4a79      	ldr	r2, [pc, #484]	; (8001698 <HAL_GPIO_Init+0x2b4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014b6:	e02c      	b.n	8001512 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e029      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	3304      	adds	r3, #4
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e024      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	3308      	adds	r3, #8
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e01f      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	330c      	adds	r3, #12
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e01a      	b.n	8001514 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014e6:	2304      	movs	r3, #4
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e013      	b.n	8001514 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f4:	2308      	movs	r3, #8
 80014f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	611a      	str	r2, [r3, #16]
          break;
 80014fe:	e009      	b.n	8001514 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001500:	2308      	movs	r3, #8
 8001502:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	615a      	str	r2, [r3, #20]
          break;
 800150a:	e003      	b.n	8001514 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x130>
          break;
 8001512:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2bff      	cmp	r3, #255	; 0xff
 8001518:	d801      	bhi.n	800151e <HAL_GPIO_Init+0x13a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	e001      	b.n	8001522 <HAL_GPIO_Init+0x13e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3304      	adds	r3, #4
 8001522:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2bff      	cmp	r3, #255	; 0xff
 8001528:	d802      	bhi.n	8001530 <HAL_GPIO_Init+0x14c>
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x152>
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	3b08      	subs	r3, #8
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	210f      	movs	r1, #15
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	401a      	ands	r2, r3
 8001548:	6a39      	ldr	r1, [r7, #32]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	431a      	orrs	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80b1 	beq.w	80016c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001564:	4b4d      	ldr	r3, [pc, #308]	; (800169c <HAL_GPIO_Init+0x2b8>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a4c      	ldr	r2, [pc, #304]	; (800169c <HAL_GPIO_Init+0x2b8>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b4a      	ldr	r3, [pc, #296]	; (800169c <HAL_GPIO_Init+0x2b8>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800157c:	4a48      	ldr	r2, [pc, #288]	; (80016a0 <HAL_GPIO_Init+0x2bc>)
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001588:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a40      	ldr	r2, [pc, #256]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d013      	beq.n	80015d0 <HAL_GPIO_Init+0x1ec>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3f      	ldr	r2, [pc, #252]	; (80016a8 <HAL_GPIO_Init+0x2c4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00d      	beq.n	80015cc <HAL_GPIO_Init+0x1e8>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3e      	ldr	r2, [pc, #248]	; (80016ac <HAL_GPIO_Init+0x2c8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d007      	beq.n	80015c8 <HAL_GPIO_Init+0x1e4>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a3d      	ldr	r2, [pc, #244]	; (80016b0 <HAL_GPIO_Init+0x2cc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d101      	bne.n	80015c4 <HAL_GPIO_Init+0x1e0>
 80015c0:	2303      	movs	r3, #3
 80015c2:	e006      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015c4:	2304      	movs	r3, #4
 80015c6:	e004      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e002      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_GPIO_Init+0x1ee>
 80015d0:	2300      	movs	r3, #0
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	f002 0203 	and.w	r2, r2, #3
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	4093      	lsls	r3, r2
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e2:	492f      	ldr	r1, [pc, #188]	; (80016a0 <HAL_GPIO_Init+0x2bc>)
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fc:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	492c      	ldr	r1, [pc, #176]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	43db      	mvns	r3, r3
 8001612:	4928      	ldr	r1, [pc, #160]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001614:	4013      	ands	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	4922      	ldr	r1, [pc, #136]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	43db      	mvns	r3, r3
 800163a:	491e      	ldr	r1, [pc, #120]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800163c:	4013      	ands	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	4918      	ldr	r1, [pc, #96]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	43db      	mvns	r3, r3
 8001662:	4914      	ldr	r1, [pc, #80]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001664:	4013      	ands	r3, r2
 8001666:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d021      	beq.n	80016b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	490e      	ldr	r1, [pc, #56]	; (80016b4 <HAL_GPIO_Init+0x2d0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
 8001680:	e021      	b.n	80016c6 <HAL_GPIO_Init+0x2e2>
 8001682:	bf00      	nop
 8001684:	10320000 	.word	0x10320000
 8001688:	10310000 	.word	0x10310000
 800168c:	10220000 	.word	0x10220000
 8001690:	10210000 	.word	0x10210000
 8001694:	10120000 	.word	0x10120000
 8001698:	10110000 	.word	0x10110000
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010000 	.word	0x40010000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40010c00 	.word	0x40010c00
 80016ac:	40011000 	.word	0x40011000
 80016b0:	40011400 	.word	0x40011400
 80016b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_GPIO_Init+0x304>)
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	43db      	mvns	r3, r3
 80016c0:	4909      	ldr	r1, [pc, #36]	; (80016e8 <HAL_GPIO_Init+0x304>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	3301      	adds	r3, #1
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	fa22 f303 	lsr.w	r3, r2, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f47f ae8e 	bne.w	80013f8 <HAL_GPIO_Init+0x14>
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	372c      	adds	r7, #44	; 0x2c
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001708:	e003      	b.n	8001712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	041a      	lsls	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	611a      	str	r2, [r3, #16]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	b08f      	sub	sp, #60	; 0x3c
 8001720:	af0a      	add	r7, sp, #40	; 0x28
 8001722:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e054      	b.n	80017d8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d106      	bne.n	800174e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f00c fbe1 	bl	800df10 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2203      	movs	r2, #3
 8001752:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f003 fb53 	bl	8004e18 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	687e      	ldr	r6, [r7, #4]
 800177a:	466d      	mov	r5, sp
 800177c:	f106 0410 	add.w	r4, r6, #16
 8001780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001788:	e894 0003 	ldmia.w	r4, {r0, r1}
 800178c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001790:	1d33      	adds	r3, r6, #4
 8001792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001794:	6838      	ldr	r0, [r7, #0]
 8001796:	f003 fb0d 	bl	8004db4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2101      	movs	r1, #1
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 fb49 	bl	8004e38 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	687e      	ldr	r6, [r7, #4]
 80017ae:	466d      	mov	r5, sp
 80017b0:	f106 0410 	add.w	r4, r6, #16
 80017b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80017c4:	1d33      	adds	r3, r6, #4
 80017c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c8:	6838      	ldr	r0, [r7, #0]
 80017ca:	f003 fca7 	bl	800511c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017e0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	70fb      	strb	r3, [r7, #3]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70bb      	strb	r3, [r7, #2]
 80017f6:	4613      	mov	r3, r2
 80017f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_HCD_HC_Init+0x28>
 8001804:	2302      	movs	r3, #2
 8001806:	e076      	b.n	80018f6 <HAL_HCD_HC_Init+0x116>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	212c      	movs	r1, #44	; 0x2c
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	333d      	adds	r3, #61	; 0x3d
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	3338      	adds	r3, #56	; 0x38
 8001830:	787a      	ldrb	r2, [r7, #1]
 8001832:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	212c      	movs	r1, #44	; 0x2c
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	4413      	add	r3, r2
 8001840:	3340      	adds	r3, #64	; 0x40
 8001842:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001844:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	212c      	movs	r1, #44	; 0x2c
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	3339      	adds	r3, #57	; 0x39
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	212c      	movs	r1, #44	; 0x2c
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	333f      	adds	r3, #63	; 0x3f
 8001866:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800186a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	78ba      	ldrb	r2, [r7, #2]
 8001870:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001874:	b2d0      	uxtb	r0, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	212c      	movs	r1, #44	; 0x2c
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4413      	add	r3, r2
 8001880:	333a      	adds	r3, #58	; 0x3a
 8001882:	4602      	mov	r2, r0
 8001884:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001886:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800188a:	2b00      	cmp	r3, #0
 800188c:	da09      	bge.n	80018a2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	212c      	movs	r1, #44	; 0x2c
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	4413      	add	r3, r2
 800189a:	333b      	adds	r3, #59	; 0x3b
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e008      	b.n	80018b4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	212c      	movs	r1, #44	; 0x2c
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	333b      	adds	r3, #59	; 0x3b
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	212c      	movs	r1, #44	; 0x2c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	333c      	adds	r3, #60	; 0x3c
 80018c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018c6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	787c      	ldrb	r4, [r7, #1]
 80018ce:	78ba      	ldrb	r2, [r7, #2]
 80018d0:	78f9      	ldrb	r1, [r7, #3]
 80018d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	4623      	mov	r3, r4
 80018e4:	f003 fd52 	bl	800538c <USB_HC_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}

080018fe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_HCD_HC_Halt+0x1e>
 8001918:	2302      	movs	r3, #2
 800191a:	e00f      	b.n	800193c <HAL_HCD_HC_Halt+0x3e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	78fa      	ldrb	r2, [r7, #3]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f003 ff2d 	bl	800578c <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	4608      	mov	r0, r1
 800194e:	4611      	mov	r1, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4603      	mov	r3, r0
 8001954:	70fb      	strb	r3, [r7, #3]
 8001956:	460b      	mov	r3, r1
 8001958:	70bb      	strb	r3, [r7, #2]
 800195a:	4613      	mov	r3, r2
 800195c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	212c      	movs	r1, #44	; 0x2c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	333b      	adds	r3, #59	; 0x3b
 800196c:	78ba      	ldrb	r2, [r7, #2]
 800196e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	212c      	movs	r1, #44	; 0x2c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	333f      	adds	r3, #63	; 0x3f
 800197e:	787a      	ldrb	r2, [r7, #1]
 8001980:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001982:	7c3b      	ldrb	r3, [r7, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d112      	bne.n	80019ae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	212c      	movs	r1, #44	; 0x2c
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	3342      	adds	r3, #66	; 0x42
 8001996:	2203      	movs	r2, #3
 8001998:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	212c      	movs	r1, #44	; 0x2c
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	333d      	adds	r3, #61	; 0x3d
 80019a8:	7f3a      	ldrb	r2, [r7, #28]
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	e008      	b.n	80019c0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	212c      	movs	r1, #44	; 0x2c
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	3342      	adds	r3, #66	; 0x42
 80019bc:	2202      	movs	r2, #2
 80019be:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019c0:	787b      	ldrb	r3, [r7, #1]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	f200 80c6 	bhi.w	8001b54 <HAL_HCD_HC_SubmitRequest+0x210>
 80019c8:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	08001b41 	.word	0x08001b41
 80019d8:	08001a45 	.word	0x08001a45
 80019dc:	08001ac3 	.word	0x08001ac3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019e0:	7c3b      	ldrb	r3, [r7, #16]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	f040 80b8 	bne.w	8001b58 <HAL_HCD_HC_SubmitRequest+0x214>
 80019e8:	78bb      	ldrb	r3, [r7, #2]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 80b4 	bne.w	8001b58 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80019f0:	8b3b      	ldrh	r3, [r7, #24]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d108      	bne.n	8001a08 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	212c      	movs	r1, #44	; 0x2c
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	3355      	adds	r3, #85	; 0x55
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	212c      	movs	r1, #44	; 0x2c
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3355      	adds	r3, #85	; 0x55
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	212c      	movs	r1, #44	; 0x2c
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	3342      	adds	r3, #66	; 0x42
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a2e:	e093      	b.n	8001b58 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3342      	adds	r3, #66	; 0x42
 8001a3e:	2202      	movs	r2, #2
 8001a40:	701a      	strb	r2, [r3, #0]
      break;
 8001a42:	e089      	b.n	8001b58 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a44:	78bb      	ldrb	r3, [r7, #2]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d11d      	bne.n	8001a86 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3355      	adds	r3, #85	; 0x55
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	3342      	adds	r3, #66	; 0x42
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a70:	e073      	b.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	212c      	movs	r1, #44	; 0x2c
 8001a78:	fb01 f303 	mul.w	r3, r1, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3342      	adds	r3, #66	; 0x42
 8001a80:	2202      	movs	r2, #2
 8001a82:	701a      	strb	r2, [r3, #0]
      break;
 8001a84:	e069      	b.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	212c      	movs	r1, #44	; 0x2c
 8001a8c:	fb01 f303 	mul.w	r3, r1, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	3354      	adds	r3, #84	; 0x54
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	212c      	movs	r1, #44	; 0x2c
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3342      	adds	r3, #66	; 0x42
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
      break;
 8001aac:	e055      	b.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	3342      	adds	r3, #66	; 0x42
 8001abc:	2202      	movs	r2, #2
 8001abe:	701a      	strb	r2, [r3, #0]
      break;
 8001ac0:	e04b      	b.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ac2:	78bb      	ldrb	r3, [r7, #2]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11d      	bne.n	8001b04 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	212c      	movs	r1, #44	; 0x2c
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3355      	adds	r3, #85	; 0x55
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	212c      	movs	r1, #44	; 0x2c
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3342      	adds	r3, #66	; 0x42
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001aee:	e034      	b.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	212c      	movs	r1, #44	; 0x2c
 8001af6:	fb01 f303 	mul.w	r3, r1, r3
 8001afa:	4413      	add	r3, r2
 8001afc:	3342      	adds	r3, #66	; 0x42
 8001afe:	2202      	movs	r2, #2
 8001b00:	701a      	strb	r2, [r3, #0]
      break;
 8001b02:	e02a      	b.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	212c      	movs	r1, #44	; 0x2c
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	3354      	adds	r3, #84	; 0x54
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d109      	bne.n	8001b2c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	212c      	movs	r1, #44	; 0x2c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	3342      	adds	r3, #66	; 0x42
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
      break;
 8001b2a:	e016      	b.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	212c      	movs	r1, #44	; 0x2c
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	3342      	adds	r3, #66	; 0x42
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	701a      	strb	r2, [r3, #0]
      break;
 8001b3e:	e00c      	b.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	212c      	movs	r1, #44	; 0x2c
 8001b46:	fb01 f303 	mul.w	r3, r1, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3342      	adds	r3, #66	; 0x42
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
      break;
 8001b52:	e002      	b.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b54:	bf00      	nop
 8001b56:	e000      	b.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b58:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	212c      	movs	r1, #44	; 0x2c
 8001b60:	fb01 f303 	mul.w	r3, r1, r3
 8001b64:	4413      	add	r3, r2
 8001b66:	3344      	adds	r3, #68	; 0x44
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	8b3a      	ldrh	r2, [r7, #24]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	202c      	movs	r0, #44	; 0x2c
 8001b74:	fb00 f303 	mul.w	r3, r0, r3
 8001b78:	440b      	add	r3, r1
 8001b7a:	334c      	adds	r3, #76	; 0x4c
 8001b7c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	212c      	movs	r1, #44	; 0x2c
 8001b84:	fb01 f303 	mul.w	r3, r1, r3
 8001b88:	4413      	add	r3, r2
 8001b8a:	3360      	adds	r3, #96	; 0x60
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	212c      	movs	r1, #44	; 0x2c
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3350      	adds	r3, #80	; 0x50
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	212c      	movs	r1, #44	; 0x2c
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	3339      	adds	r3, #57	; 0x39
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	212c      	movs	r1, #44	; 0x2c
 8001bba:	fb01 f303 	mul.w	r3, r1, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3361      	adds	r3, #97	; 0x61
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	222c      	movs	r2, #44	; 0x2c
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	3338      	adds	r3, #56	; 0x38
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f003 fccf 	bl	800557c <USB_HC_StartXfer>
 8001bde:	4603      	mov	r3, r0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 fa4c 	bl	800509c <USB_GetMode>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	f040 80ef 	bne.w	8001dea <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fa31 	bl	8005078 <USB_ReadInterrupts>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80e5 	beq.w	8001de8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fa28 	bl	8005078 <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c32:	d104      	bne.n	8001c3e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 fa18 	bl	8005078 <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c52:	d104      	bne.n	8001c5e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 fa08 	bl	8005078 <USB_ReadInterrupts>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c72:	d104      	bne.n	8001c7e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 f9f8 	bl	8005078 <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d103      	bne.n	8001c9a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2202      	movs	r2, #2
 8001c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 f9ea 	bl	8005078 <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cae:	d115      	bne.n	8001cdc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cb8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d108      	bne.n	8001cdc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f00c f960 	bl	800df90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 fa96 	bl	8005208 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 f9c9 	bl	8005078 <USB_ReadInterrupts>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d102      	bne.n	8001cf8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f001 f978 	bl	8002fe8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 f9bb 	bl	8005078 <USB_ReadInterrupts>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d106      	bne.n	8001d1a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f00c f923 	bl	800df58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2208      	movs	r2, #8
 8001d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 f9aa 	bl	8005078 <USB_ReadInterrupts>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d101      	bne.n	8001d32 <HAL_HCD_IRQHandler+0x14a>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_HCD_IRQHandler+0x14c>
 8001d32:	2300      	movs	r3, #0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d012      	beq.n	8001d5e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0210 	bic.w	r2, r2, #16
 8001d46:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f001 f87b 	bl	8002e44 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699a      	ldr	r2, [r3, #24]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0210 	orr.w	r2, r2, #16
 8001d5c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 f988 	bl	8005078 <USB_ReadInterrupts>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d72:	d13a      	bne.n	8001dea <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fcf7 	bl	800576c <USB_HC_ReadInterrupt>
 8001d7e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	e025      	b.n	8001dd2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d018      	beq.n	8001dcc <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db0:	d106      	bne.n	8001dc0 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	4619      	mov	r1, r3
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f8a9 	bl	8001f10 <HCD_HC_IN_IRQHandler>
 8001dbe:	e005      	b.n	8001dcc <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fca2 	bl	8002710 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d3d4      	bcc.n	8001d86 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de4:	615a      	str	r2, [r3, #20]
 8001de6:	e000      	b.n	8001dea <HAL_HCD_IRQHandler+0x202>
      return;
 8001de8:	bf00      	nop
    }
  }
}
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_HCD_Start+0x16>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e013      	b.n	8001e2e <HAL_HCD_Start+0x3e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2101      	movs	r1, #1
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 fa5a 	bl	80052ce <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f002 ffea 	bl	8004df8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_HCD_Stop+0x16>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e00d      	b.n	8001e68 <HAL_HCD_Stop+0x32>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 fdb2 	bl	80059c2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 f9fc 	bl	800527a <USB_ResetPort>
 8001e82:	4603      	mov	r3, r0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	212c      	movs	r1, #44	; 0x2c
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3360      	adds	r3, #96	; 0x60
 8001ea6:	781b      	ldrb	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	212c      	movs	r1, #44	; 0x2c
 8001ec4:	fb01 f303 	mul.w	r3, r1, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	3350      	adds	r3, #80	; 0x50
 8001ecc:	681b      	ldr	r3, [r3, #0]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 fa40 	bl	800536a <USB_GetCurrentFrame>
 8001eea:	4603      	mov	r3, r0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 fa1c 	bl	800533e <USB_GetHostSpeed>
 8001f06:	4603      	mov	r3, r0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d119      	bne.n	8001f74 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2304      	movs	r3, #4
 8001f50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	0151      	lsls	r1, r2, #5
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	440a      	add	r2, r1
 8001f68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	60d3      	str	r3, [r2, #12]
 8001f72:	e101      	b.n	8002178 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f8a:	d12b      	bne.n	8001fe4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	212c      	movs	r1, #44	; 0x2c
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	3361      	adds	r3, #97	; 0x61
 8001fae:	2207      	movs	r2, #7
 8001fb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	0151      	lsls	r1, r2, #5
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	440a      	add	r2, r1
 8001fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fbd5 	bl	800578c <USB_HC_Halt>
 8001fe2:	e0c9      	b.n	8002178 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	d109      	bne.n	800200e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4413      	add	r3, r2
 8002002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002006:	461a      	mov	r2, r3
 8002008:	2320      	movs	r3, #32
 800200a:	6093      	str	r3, [r2, #8]
 800200c:	e0b4      	b.n	8002178 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b08      	cmp	r3, #8
 8002022:	d133      	bne.n	800208c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4413      	add	r3, r2
 800202c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	0151      	lsls	r1, r2, #5
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	440a      	add	r2, r1
 800203a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800203e:	f043 0302 	orr.w	r3, r3, #2
 8002042:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3361      	adds	r3, #97	; 0x61
 8002052:	2205      	movs	r2, #5
 8002054:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	461a      	mov	r2, r3
 8002064:	2310      	movs	r3, #16
 8002066:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002074:	461a      	mov	r2, r3
 8002076:	2308      	movs	r3, #8
 8002078:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f003 fb81 	bl	800578c <USB_HC_Halt>
 800208a:	e075      	b.n	8002178 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a2:	d134      	bne.n	800210e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	0151      	lsls	r1, r2, #5
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	440a      	add	r2, r1
 80020ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020be:	f043 0302 	orr.w	r3, r3, #2
 80020c2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	3361      	adds	r3, #97	; 0x61
 80020d2:	2208      	movs	r2, #8
 80020d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e2:	461a      	mov	r2, r3
 80020e4:	2310      	movs	r3, #16
 80020e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f4:	461a      	mov	r2, r3
 80020f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020fa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f003 fb40 	bl	800578c <USB_HC_Halt>
 800210c:	e034      	b.n	8002178 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002120:	2b80      	cmp	r3, #128	; 0x80
 8002122:	d129      	bne.n	8002178 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	0151      	lsls	r1, r2, #5
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	440a      	add	r2, r1
 800213a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800213e:	f043 0302 	orr.w	r3, r3, #2
 8002142:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	3361      	adds	r3, #97	; 0x61
 8002152:	2206      	movs	r2, #6
 8002154:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f003 fb13 	bl	800578c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002172:	461a      	mov	r2, r3
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800218a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800218e:	d122      	bne.n	80021d6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	0151      	lsls	r1, r2, #5
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	440a      	add	r2, r1
 80021a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021aa:	f043 0302 	orr.w	r3, r3, #2
 80021ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 fae6 	bl	800578c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	461a      	mov	r2, r3
 80021ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80021d4:	e298      	b.n	8002708 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	f040 80fd 	bne.w	80023e8 <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	3361      	adds	r3, #97	; 0x61
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	335c      	adds	r3, #92	; 0x5c
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221e:	461a      	mov	r2, r3
 8002220:	2301      	movs	r3, #1
 8002222:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	212c      	movs	r1, #44	; 0x2c
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	4413      	add	r3, r2
 8002230:	333f      	adds	r3, #63	; 0x3f
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d009      	beq.n	800224c <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	333f      	adds	r3, #63	; 0x3f
 8002246:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002248:	2b02      	cmp	r3, #2
 800224a:	d121      	bne.n	8002290 <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	0151      	lsls	r1, r2, #5
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	440a      	add	r2, r1
 8002262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f003 fa88 	bl	800578c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4413      	add	r3, r2
 8002284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002288:	461a      	mov	r2, r3
 800228a:	2310      	movs	r3, #16
 800228c:	6093      	str	r3, [r2, #8]
 800228e:	e066      	b.n	800235e <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	333f      	adds	r3, #63	; 0x3f
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d127      	bne.n	80022f4 <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	0151      	lsls	r1, r2, #5
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	440a      	add	r2, r1
 80022ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022c2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3360      	adds	r3, #96	; 0x60
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	b2d9      	uxtb	r1, r3
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	202c      	movs	r0, #44	; 0x2c
 80022e0:	fb00 f303 	mul.w	r3, r0, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3360      	adds	r3, #96	; 0x60
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f00b fe5d 	bl	800dfac <HAL_HCD_HC_NotifyURBChange_Callback>
 80022f2:	e034      	b.n	800235e <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	333f      	adds	r3, #63	; 0x3f
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d12a      	bne.n	800235e <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3360      	adds	r3, #96	; 0x60
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3354      	adds	r3, #84	; 0x54
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	f083 0301 	eor.w	r3, r3, #1
 800232e:	b2d8      	uxtb	r0, r3
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	3354      	adds	r3, #84	; 0x54
 800233e:	4602      	mov	r2, r0
 8002340:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	b2d9      	uxtb	r1, r3
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	202c      	movs	r0, #44	; 0x2c
 800234c:	fb00 f303 	mul.w	r3, r0, r3
 8002350:	4413      	add	r3, r2
 8002352:	3360      	adds	r3, #96	; 0x60
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f00b fe27 	bl	800dfac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d12b      	bne.n	80023be <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	3348      	adds	r3, #72	; 0x48
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	202c      	movs	r0, #44	; 0x2c
 800237c:	fb00 f202 	mul.w	r2, r0, r2
 8002380:	440a      	add	r2, r1
 8002382:	3240      	adds	r2, #64	; 0x40
 8002384:	8812      	ldrh	r2, [r2, #0]
 8002386:	fbb3 f3f2 	udiv	r3, r3, r2
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 81ba 	beq.w	8002708 <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3354      	adds	r3, #84	; 0x54
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	f083 0301 	eor.w	r3, r3, #1
 80023a8:	b2d8      	uxtb	r0, r3
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3354      	adds	r3, #84	; 0x54
 80023b8:	4602      	mov	r2, r0
 80023ba:	701a      	strb	r2, [r3, #0]
}
 80023bc:	e1a4      	b.n	8002708 <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3354      	adds	r3, #84	; 0x54
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	f083 0301 	eor.w	r3, r3, #1
 80023d2:	b2d8      	uxtb	r0, r3
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	3354      	adds	r3, #84	; 0x54
 80023e2:	4602      	mov	r2, r0
 80023e4:	701a      	strb	r2, [r3, #0]
}
 80023e6:	e18f      	b.n	8002708 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	f040 8106 	bne.w	800260c <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	0151      	lsls	r1, r2, #5
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	440a      	add	r2, r1
 8002416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800241a:	f023 0302 	bic.w	r3, r3, #2
 800241e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3361      	adds	r3, #97	; 0x61
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d109      	bne.n	8002448 <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	212c      	movs	r1, #44	; 0x2c
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	4413      	add	r3, r2
 8002440:	3360      	adds	r3, #96	; 0x60
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	e0c9      	b.n	80025dc <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	212c      	movs	r1, #44	; 0x2c
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	4413      	add	r3, r2
 8002454:	3361      	adds	r3, #97	; 0x61
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d109      	bne.n	8002470 <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3360      	adds	r3, #96	; 0x60
 800246a:	2205      	movs	r2, #5
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e0b5      	b.n	80025dc <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	3361      	adds	r3, #97	; 0x61
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b06      	cmp	r3, #6
 8002482:	d009      	beq.n	8002498 <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	3361      	adds	r3, #97	; 0x61
 8002492:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002494:	2b08      	cmp	r3, #8
 8002496:	d150      	bne.n	800253a <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	335c      	adds	r3, #92	; 0x5c
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	202c      	movs	r0, #44	; 0x2c
 80024b0:	fb00 f303 	mul.w	r3, r0, r3
 80024b4:	440b      	add	r3, r1
 80024b6:	335c      	adds	r3, #92	; 0x5c
 80024b8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	335c      	adds	r3, #92	; 0x5c
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d912      	bls.n	80024f4 <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	335c      	adds	r3, #92	; 0x5c
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3360      	adds	r3, #96	; 0x60
 80024ee:	2204      	movs	r2, #4
 80024f0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024f2:	e073      	b.n	80025dc <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3360      	adds	r3, #96	; 0x60
 8002502:	2202      	movs	r2, #2
 8002504:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800251c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002524:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002538:	e050      	b.n	80025dc <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	3361      	adds	r3, #97	; 0x61
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d122      	bne.n	8002594 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	3360      	adds	r3, #96	; 0x60
 800255c:	2202      	movs	r2, #2
 800255e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002576:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800257e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e023      	b.n	80025dc <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3361      	adds	r3, #97	; 0x61
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b07      	cmp	r3, #7
 80025a6:	d119      	bne.n	80025dc <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	335c      	adds	r3, #92	; 0x5c
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	202c      	movs	r0, #44	; 0x2c
 80025c0:	fb00 f303 	mul.w	r3, r0, r3
 80025c4:	440b      	add	r3, r1
 80025c6:	335c      	adds	r3, #92	; 0x5c
 80025c8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	3360      	adds	r3, #96	; 0x60
 80025d8:	2204      	movs	r2, #4
 80025da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e8:	461a      	mov	r2, r3
 80025ea:	2302      	movs	r3, #2
 80025ec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	b2d9      	uxtb	r1, r3
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	202c      	movs	r0, #44	; 0x2c
 80025f8:	fb00 f303 	mul.w	r3, r0, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	3360      	adds	r3, #96	; 0x60
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f00b fcd1 	bl	800dfac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800260a:	e07d      	b.n	8002708 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b10      	cmp	r3, #16
 8002620:	d172      	bne.n	8002708 <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	212c      	movs	r1, #44	; 0x2c
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	333f      	adds	r3, #63	; 0x3f
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d121      	bne.n	800267a <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	335c      	adds	r3, #92	; 0x5c
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	0151      	lsls	r1, r2, #5
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	440a      	add	r2, r1
 800265e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002662:	f043 0302 	orr.w	r3, r3, #2
 8002666:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f003 f88a 	bl	800578c <USB_HC_Halt>
 8002678:	e03d      	b.n	80026f6 <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	333f      	adds	r3, #63	; 0x3f
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	212c      	movs	r1, #44	; 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	333f      	adds	r3, #63	; 0x3f
 800269c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d129      	bne.n	80026f6 <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	335c      	adds	r3, #92	; 0x5c
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	3361      	adds	r3, #97	; 0x61
 80026c2:	2203      	movs	r2, #3
 80026c4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	0151      	lsls	r1, r2, #5
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	440a      	add	r2, r1
 80026dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f003 f84b 	bl	800578c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002702:	461a      	mov	r2, r3
 8002704:	2310      	movs	r3, #16
 8002706:	6093      	str	r3, [r2, #8]
}
 8002708:	bf00      	nop
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b04      	cmp	r3, #4
 800273e:	d119      	bne.n	8002774 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	461a      	mov	r2, r3
 800274e:	2304      	movs	r3, #4
 8002750:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	0151      	lsls	r1, r2, #5
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	440a      	add	r2, r1
 8002768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002772:	e363      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b20      	cmp	r3, #32
 8002788:	d13e      	bne.n	8002808 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	461a      	mov	r2, r3
 8002798:	2320      	movs	r3, #32
 800279a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	333d      	adds	r3, #61	; 0x3d
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	f040 8345 	bne.w	8002e3c <HCD_HC_OUT_IRQHandler+0x72c>
      hhcd->hc[ch_num].do_ping = 0U;
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	333d      	adds	r3, #61	; 0x3d
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3360      	adds	r3, #96	; 0x60
 80027d2:	2202      	movs	r2, #2
 80027d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	0151      	lsls	r1, r2, #5
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	440a      	add	r2, r1
 80027ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f002 ffc3 	bl	800578c <USB_HC_Halt>
}
 8002806:	e319      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800281e:	d122      	bne.n	8002866 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	0151      	lsls	r1, r2, #5
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	440a      	add	r2, r1
 8002836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800283a:	f043 0302 	orr.w	r3, r3, #2
 800283e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f002 ff9e 	bl	800578c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	461a      	mov	r2, r3
 800285e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002862:	6093      	str	r3, [r2, #8]
}
 8002864:	e2ea      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d150      	bne.n	800291e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	335c      	adds	r3, #92	; 0x5c
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4413      	add	r3, r2
 8002896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d111      	bne.n	80028c8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	333d      	adds	r3, #61	; 0x3d
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	461a      	mov	r2, r3
 80028c4:	2340      	movs	r3, #64	; 0x40
 80028c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	0151      	lsls	r1, r2, #5
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	440a      	add	r2, r1
 80028de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e2:	f043 0302 	orr.w	r3, r3, #2
 80028e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 ff4a 	bl	800578c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	461a      	mov	r2, r3
 8002906:	2301      	movs	r3, #1
 8002908:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	3361      	adds	r3, #97	; 0x61
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
}
 800291c:	e28e      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4413      	add	r3, r2
 8002926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002930:	2b40      	cmp	r3, #64	; 0x40
 8002932:	d13c      	bne.n	80029ae <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	212c      	movs	r1, #44	; 0x2c
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	4413      	add	r3, r2
 8002940:	3361      	adds	r3, #97	; 0x61
 8002942:	2204      	movs	r2, #4
 8002944:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	333d      	adds	r3, #61	; 0x3d
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	335c      	adds	r3, #92	; 0x5c
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	0151      	lsls	r1, r2, #5
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	440a      	add	r2, r1
 8002980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f002 fef9 	bl	800578c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a6:	461a      	mov	r2, r3
 80029a8:	2340      	movs	r3, #64	; 0x40
 80029aa:	6093      	str	r3, [r2, #8]
}
 80029ac:	e246      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d12a      	bne.n	8002a1a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	461a      	mov	r2, r3
 80029d2:	2308      	movs	r3, #8
 80029d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	0151      	lsls	r1, r2, #5
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	440a      	add	r2, r1
 80029ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f002 fec3 	bl	800578c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	3361      	adds	r3, #97	; 0x61
 8002a14:	2205      	movs	r2, #5
 8002a16:	701a      	strb	r2, [r3, #0]
}
 8002a18:	e210      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d133      	bne.n	8002a98 <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	335c      	adds	r3, #92	; 0x5c
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3361      	adds	r3, #97	; 0x61
 8002a50:	2203      	movs	r2, #3
 8002a52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	0151      	lsls	r1, r2, #5
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	440a      	add	r2, r1
 8002a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a6e:	f043 0302 	orr.w	r3, r3, #2
 8002a72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 fe84 	bl	800578c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	461a      	mov	r2, r3
 8002a92:	2310      	movs	r3, #16
 8002a94:	6093      	str	r3, [r2, #8]
}
 8002a96:	e1d1      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	2b80      	cmp	r3, #128	; 0x80
 8002aac:	d12a      	bne.n	8002b04 <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3361      	adds	r3, #97	; 0x61
 8002abc:	2206      	movs	r2, #6
 8002abe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	0151      	lsls	r1, r2, #5
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	440a      	add	r2, r1
 8002ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fe4e 	bl	800578c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	461a      	mov	r2, r3
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	6093      	str	r3, [r2, #8]
}
 8002b02:	e19b      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1a:	d134      	bne.n	8002b86 <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	0151      	lsls	r1, r2, #5
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	440a      	add	r2, r1
 8002b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f002 fe20 	bl	800578c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2310      	movs	r3, #16
 8002b5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b70:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3361      	adds	r3, #97	; 0x61
 8002b80:	2208      	movs	r2, #8
 8002b82:	701a      	strb	r2, [r3, #0]
}
 8002b84:	e15a      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	f040 814f 	bne.w	8002e3c <HCD_HC_OUT_IRQHandler+0x72c>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	0151      	lsls	r1, r2, #5
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	440a      	add	r2, r1
 8002bb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bb8:	f023 0302 	bic.w	r3, r3, #2
 8002bbc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3361      	adds	r3, #97	; 0x61
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d17d      	bne.n	8002cce <HCD_HC_OUT_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3360      	adds	r3, #96	; 0x60
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	333f      	adds	r3, #63	; 0x3f
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d00a      	beq.n	8002c0e <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	333f      	adds	r3, #63	; 0x3f
 8002c06:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	f040 8100 	bne.w	8002e0e <HCD_HC_OUT_IRQHandler+0x6fe>
        if (hhcd->Init.dma_enable == 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d113      	bne.n	8002c3e <HCD_HC_OUT_IRQHandler+0x52e>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3355      	adds	r3, #85	; 0x55
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	f083 0301 	eor.w	r3, r3, #1
 8002c2a:	b2d8      	uxtb	r0, r3
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3355      	adds	r3, #85	; 0x55
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	f040 80e3 	bne.w	8002e0e <HCD_HC_OUT_IRQHandler+0x6fe>
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	334c      	adds	r3, #76	; 0x4c
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80d8 	beq.w	8002e0e <HCD_HC_OUT_IRQHandler+0x6fe>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	334c      	adds	r3, #76	; 0x4c
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	202c      	movs	r0, #44	; 0x2c
 8002c74:	fb00 f202 	mul.w	r2, r0, r2
 8002c78:	440a      	add	r2, r1
 8002c7a:	3240      	adds	r2, #64	; 0x40
 8002c7c:	8812      	ldrh	r2, [r2, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	3b01      	subs	r3, #1
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	202c      	movs	r0, #44	; 0x2c
 8002c88:	fb00 f202 	mul.w	r2, r0, r2
 8002c8c:	440a      	add	r2, r1
 8002c8e:	3240      	adds	r2, #64	; 0x40
 8002c90:	8812      	ldrh	r2, [r2, #0]
 8002c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80b5 	beq.w	8002e0e <HCD_HC_OUT_IRQHandler+0x6fe>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3355      	adds	r3, #85	; 0x55
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	f083 0301 	eor.w	r3, r3, #1
 8002cb8:	b2d8      	uxtb	r0, r3
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3355      	adds	r3, #85	; 0x55
 8002cc8:	4602      	mov	r2, r0
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	e09f      	b.n	8002e0e <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3361      	adds	r3, #97	; 0x61
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d109      	bne.n	8002cf6 <HCD_HC_OUT_IRQHandler+0x5e6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3360      	adds	r3, #96	; 0x60
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	e08b      	b.n	8002e0e <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3361      	adds	r3, #97	; 0x61
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d109      	bne.n	8002d1e <HCD_HC_OUT_IRQHandler+0x60e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3360      	adds	r3, #96	; 0x60
 8002d18:	2202      	movs	r2, #2
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	e077      	b.n	8002e0e <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3361      	adds	r3, #97	; 0x61
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b05      	cmp	r3, #5
 8002d30:	d109      	bne.n	8002d46 <HCD_HC_OUT_IRQHandler+0x636>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	212c      	movs	r1, #44	; 0x2c
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3360      	adds	r3, #96	; 0x60
 8002d40:	2205      	movs	r2, #5
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	e063      	b.n	8002e0e <HCD_HC_OUT_IRQHandler+0x6fe>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	3361      	adds	r3, #97	; 0x61
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d009      	beq.n	8002d6e <HCD_HC_OUT_IRQHandler+0x65e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3361      	adds	r3, #97	; 0x61
 8002d68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d14f      	bne.n	8002e0e <HCD_HC_OUT_IRQHandler+0x6fe>
      hhcd->hc[ch_num].ErrCnt++;
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	335c      	adds	r3, #92	; 0x5c
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	202c      	movs	r0, #44	; 0x2c
 8002d86:	fb00 f303 	mul.w	r3, r0, r3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	335c      	adds	r3, #92	; 0x5c
 8002d8e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	335c      	adds	r3, #92	; 0x5c
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d912      	bls.n	8002dca <HCD_HC_OUT_IRQHandler+0x6ba>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	335c      	adds	r3, #92	; 0x5c
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3360      	adds	r3, #96	; 0x60
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e021      	b.n	8002e0e <HCD_HC_OUT_IRQHandler+0x6fe>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3360      	adds	r3, #96	; 0x60
 8002dd8:	2202      	movs	r2, #2
 8002dda:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002df2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dfa:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	461a      	mov	r2, r3
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	b2d9      	uxtb	r1, r3
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	202c      	movs	r0, #44	; 0x2c
 8002e2a:	fb00 f303 	mul.w	r3, r0, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3360      	adds	r3, #96	; 0x60
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f00b f8b8 	bl	800dfac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e3c:	bf00      	nop
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	0c5b      	lsrs	r3, r3, #17
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e78:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d004      	beq.n	8002e8a <HCD_RXQLVL_IRQHandler+0x46>
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	f000 80a9 	beq.w	8002fda <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e88:	e0aa      	b.n	8002fe0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80a6 	beq.w	8002fde <HCD_RXQLVL_IRQHandler+0x19a>
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3344      	adds	r3, #68	; 0x44
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 809b 	beq.w	8002fde <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3350      	adds	r3, #80	; 0x50
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	441a      	add	r2, r3
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	202c      	movs	r0, #44	; 0x2c
 8002ec2:	fb00 f303 	mul.w	r3, r0, r3
 8002ec6:	440b      	add	r3, r1
 8002ec8:	334c      	adds	r3, #76	; 0x4c
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d87a      	bhi.n	8002fc6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3344      	adds	r3, #68	; 0x44
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	b292      	uxth	r2, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f002 f86e 	bl	8004fca <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	212c      	movs	r1, #44	; 0x2c
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	4413      	add	r3, r2
 8002efa:	3344      	adds	r3, #68	; 0x44
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	441a      	add	r2, r3
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	202c      	movs	r0, #44	; 0x2c
 8002f08:	fb00 f303 	mul.w	r3, r0, r3
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3344      	adds	r3, #68	; 0x44
 8002f10:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3350      	adds	r3, #80	; 0x50
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	441a      	add	r2, r3
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	202c      	movs	r0, #44	; 0x2c
 8002f2c:	fb00 f303 	mul.w	r3, r0, r3
 8002f30:	440b      	add	r3, r1
 8002f32:	3350      	adds	r3, #80	; 0x50
 8002f34:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	0cdb      	lsrs	r3, r3, #19
 8002f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f4a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	3340      	adds	r3, #64	; 0x40
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d13c      	bne.n	8002fde <HCD_RXQLVL_IRQHandler+0x19a>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d039      	beq.n	8002fde <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f80:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f88:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f96:	461a      	mov	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3354      	adds	r3, #84	; 0x54
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	f083 0301 	eor.w	r3, r3, #1
 8002fb0:	b2d8      	uxtb	r0, r3
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3354      	adds	r3, #84	; 0x54
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	701a      	strb	r2, [r3, #0]
      break;
 8002fc4:	e00b      	b.n	8002fde <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3360      	adds	r3, #96	; 0x60
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	701a      	strb	r2, [r3, #0]
      break;
 8002fd8:	e001      	b.n	8002fde <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e000      	b.n	8002fe0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fde:	bf00      	nop
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	3728      	adds	r7, #40	; 0x28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003014:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b02      	cmp	r3, #2
 800301e:	d10b      	bne.n	8003038 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d102      	bne.n	8003030 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f00a ffa2 	bl	800df74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f043 0302 	orr.w	r3, r3, #2
 8003036:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b08      	cmp	r3, #8
 8003040:	d132      	bne.n	80030a8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f043 0308 	orr.w	r3, r3, #8
 8003048:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b04      	cmp	r3, #4
 8003052:	d126      	bne.n	80030a2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d113      	bne.n	8003084 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003062:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003066:	d106      	bne.n	8003076 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2102      	movs	r1, #2
 800306e:	4618      	mov	r0, r3
 8003070:	f002 f8ca 	bl	8005208 <USB_InitFSLSPClkSel>
 8003074:	e011      	b.n	800309a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2101      	movs	r1, #1
 800307c:	4618      	mov	r0, r3
 800307e:	f002 f8c3 	bl	8005208 <USB_InitFSLSPClkSel>
 8003082:	e00a      	b.n	800309a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d106      	bne.n	800309a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003092:	461a      	mov	r2, r3
 8003094:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003098:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f00a ff93 	bl	800dfc6 <HAL_HCD_PortEnabled_Callback>
 80030a0:	e002      	b.n	80030a8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f00a ff9d 	bl	800dfe2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d103      	bne.n	80030ba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f043 0320 	orr.w	r3, r3, #32
 80030b8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030c0:	461a      	mov	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	6013      	str	r3, [r2, #0]
}
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e304      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 8087 	beq.w	80031fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f0:	4b92      	ldr	r3, [pc, #584]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d00c      	beq.n	8003116 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030fc:	4b8f      	ldr	r3, [pc, #572]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d112      	bne.n	800312e <HAL_RCC_OscConfig+0x5e>
 8003108:	4b8c      	ldr	r3, [pc, #560]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d10b      	bne.n	800312e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003116:	4b89      	ldr	r3, [pc, #548]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d06c      	beq.n	80031fc <HAL_RCC_OscConfig+0x12c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d168      	bne.n	80031fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e2de      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x76>
 8003138:	4b80      	ldr	r3, [pc, #512]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a7f      	ldr	r2, [pc, #508]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800313e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	e02e      	b.n	80031a4 <HAL_RCC_OscConfig+0xd4>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x98>
 800314e:	4b7b      	ldr	r3, [pc, #492]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a7a      	ldr	r2, [pc, #488]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b78      	ldr	r3, [pc, #480]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a77      	ldr	r2, [pc, #476]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e01d      	b.n	80031a4 <HAL_RCC_OscConfig+0xd4>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0xbc>
 8003172:	4b72      	ldr	r3, [pc, #456]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a71      	ldr	r2, [pc, #452]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b6f      	ldr	r3, [pc, #444]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a6e      	ldr	r2, [pc, #440]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0xd4>
 800318c:	4b6b      	ldr	r3, [pc, #428]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a6a      	ldr	r2, [pc, #424]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	4b68      	ldr	r3, [pc, #416]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a67      	ldr	r2, [pc, #412]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800319e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d013      	beq.n	80031d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fd feca 	bl	8000f44 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fd fec6 	bl	8000f44 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e292      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	4b5d      	ldr	r3, [pc, #372]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0xe4>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fd feb6 	bl	8000f44 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fd feb2 	bl	8000f44 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e27e      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	4b53      	ldr	r3, [pc, #332]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x10c>
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d063      	beq.n	80032d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800320a:	4b4c      	ldr	r3, [pc, #304]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003216:	4b49      	ldr	r3, [pc, #292]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b08      	cmp	r3, #8
 8003220:	d11c      	bne.n	800325c <HAL_RCC_OscConfig+0x18c>
 8003222:	4b46      	ldr	r3, [pc, #280]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d116      	bne.n	800325c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322e:	4b43      	ldr	r3, [pc, #268]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_RCC_OscConfig+0x176>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e252      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003246:	4b3d      	ldr	r3, [pc, #244]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4939      	ldr	r1, [pc, #228]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325a:	e03a      	b.n	80032d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d020      	beq.n	80032a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003264:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_RCC_OscConfig+0x270>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fd fe6b 	bl	8000f44 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003272:	f7fd fe67 	bl	8000f44 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e233      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003284:	4b2d      	ldr	r3, [pc, #180]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	4b2a      	ldr	r3, [pc, #168]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4927      	ldr	r1, [pc, #156]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]
 80032a4:	e015      	b.n	80032d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a6:	4b26      	ldr	r3, [pc, #152]	; (8003340 <HAL_RCC_OscConfig+0x270>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fd fe4a 	bl	8000f44 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b4:	f7fd fe46 	bl	8000f44 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e212      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c6:	4b1d      	ldr	r3, [pc, #116]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d03a      	beq.n	8003354 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d019      	beq.n	800331a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e6:	4b17      	ldr	r3, [pc, #92]	; (8003344 <HAL_RCC_OscConfig+0x274>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ec:	f7fd fe2a 	bl	8000f44 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f4:	f7fd fe26 	bl	8000f44 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1f2      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <HAL_RCC_OscConfig+0x26c>)
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003312:	2001      	movs	r0, #1
 8003314:	f000 fc1c 	bl	8003b50 <RCC_Delay>
 8003318:	e01c      	b.n	8003354 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <HAL_RCC_OscConfig+0x274>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003320:	f7fd fe10 	bl	8000f44 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003326:	e00f      	b.n	8003348 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003328:	f7fd fe0c 	bl	8000f44 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d908      	bls.n	8003348 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e1d8      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000
 8003340:	42420000 	.word	0x42420000
 8003344:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003348:	4b9b      	ldr	r3, [pc, #620]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e9      	bne.n	8003328 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80a6 	beq.w	80034ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003366:	4b94      	ldr	r3, [pc, #592]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003372:	4b91      	ldr	r3, [pc, #580]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	4a90      	ldr	r2, [pc, #576]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337c:	61d3      	str	r3, [r2, #28]
 800337e:	4b8e      	ldr	r3, [pc, #568]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338a:	2301      	movs	r3, #1
 800338c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338e:	4b8b      	ldr	r3, [pc, #556]	; (80035bc <HAL_RCC_OscConfig+0x4ec>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	2b00      	cmp	r3, #0
 8003398:	d118      	bne.n	80033cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800339a:	4b88      	ldr	r3, [pc, #544]	; (80035bc <HAL_RCC_OscConfig+0x4ec>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a87      	ldr	r2, [pc, #540]	; (80035bc <HAL_RCC_OscConfig+0x4ec>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a6:	f7fd fdcd 	bl	8000f44 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ae:	f7fd fdc9 	bl	8000f44 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b64      	cmp	r3, #100	; 0x64
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e195      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c0:	4b7e      	ldr	r3, [pc, #504]	; (80035bc <HAL_RCC_OscConfig+0x4ec>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d106      	bne.n	80033e2 <HAL_RCC_OscConfig+0x312>
 80033d4:	4b78      	ldr	r3, [pc, #480]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	4a77      	ldr	r2, [pc, #476]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6213      	str	r3, [r2, #32]
 80033e0:	e02d      	b.n	800343e <HAL_RCC_OscConfig+0x36e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10c      	bne.n	8003404 <HAL_RCC_OscConfig+0x334>
 80033ea:	4b73      	ldr	r3, [pc, #460]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4a72      	ldr	r2, [pc, #456]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6213      	str	r3, [r2, #32]
 80033f6:	4b70      	ldr	r3, [pc, #448]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	4a6f      	ldr	r2, [pc, #444]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	6213      	str	r3, [r2, #32]
 8003402:	e01c      	b.n	800343e <HAL_RCC_OscConfig+0x36e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	2b05      	cmp	r3, #5
 800340a:	d10c      	bne.n	8003426 <HAL_RCC_OscConfig+0x356>
 800340c:	4b6a      	ldr	r3, [pc, #424]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4a69      	ldr	r2, [pc, #420]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003412:	f043 0304 	orr.w	r3, r3, #4
 8003416:	6213      	str	r3, [r2, #32]
 8003418:	4b67      	ldr	r3, [pc, #412]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4a66      	ldr	r2, [pc, #408]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6213      	str	r3, [r2, #32]
 8003424:	e00b      	b.n	800343e <HAL_RCC_OscConfig+0x36e>
 8003426:	4b64      	ldr	r3, [pc, #400]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4a63      	ldr	r2, [pc, #396]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6213      	str	r3, [r2, #32]
 8003432:	4b61      	ldr	r3, [pc, #388]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4a60      	ldr	r2, [pc, #384]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d015      	beq.n	8003472 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003446:	f7fd fd7d 	bl	8000f44 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344c:	e00a      	b.n	8003464 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fd fd79 	bl	8000f44 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e143      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003464:	4b54      	ldr	r3, [pc, #336]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ee      	beq.n	800344e <HAL_RCC_OscConfig+0x37e>
 8003470:	e014      	b.n	800349c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003472:	f7fd fd67 	bl	8000f44 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fd fd63 	bl	8000f44 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	; 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e12d      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003490:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1ee      	bne.n	800347a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800349c:	7dfb      	ldrb	r3, [r7, #23]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d105      	bne.n	80034ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a2:	4b45      	ldr	r3, [pc, #276]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	4a44      	ldr	r2, [pc, #272]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80034a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ac:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 808c 	beq.w	80035d0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80034b8:	4b3f      	ldr	r3, [pc, #252]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c4:	d10e      	bne.n	80034e4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80034c6:	4b3c      	ldr	r3, [pc, #240]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d108      	bne.n	80034e4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80034d2:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80034da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e103      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d14e      	bne.n	800358a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80034ec:	4b32      	ldr	r3, [pc, #200]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d009      	beq.n	800350c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80034f8:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0ef      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800350c:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <HAL_RCC_OscConfig+0x4f0>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fd fd17 	bl	8000f44 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800351a:	f7fd fd13 	bl	8000f44 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b64      	cmp	r3, #100	; 0x64
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e0df      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003538:	4b1f      	ldr	r3, [pc, #124]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003544:	491c      	ldr	r1, [pc, #112]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003546:	4313      	orrs	r3, r2
 8003548:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800354a:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	4918      	ldr	r1, [pc, #96]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003558:	4313      	orrs	r3, r2
 800355a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800355c:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <HAL_RCC_OscConfig+0x4f0>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7fd fcef 	bl	8000f44 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800356a:	f7fd fceb 	bl	8000f44 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b64      	cmp	r3, #100	; 0x64
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0b7      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800357c:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x49a>
 8003588:	e022      	b.n	80035d0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003594:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <HAL_RCC_OscConfig+0x4f0>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fd fcd2 	bl	8000f44 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80035a2:	e00f      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80035a4:	f7fd fcce 	bl	8000f44 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d908      	bls.n	80035c4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e09a      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40007000 	.word	0x40007000
 80035c0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80035c4:	4b4b      	ldr	r3, [pc, #300]	; (80036f4 <HAL_RCC_OscConfig+0x624>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e9      	bne.n	80035a4 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8088 	beq.w	80036ea <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035da:	4b46      	ldr	r3, [pc, #280]	; (80036f4 <HAL_RCC_OscConfig+0x624>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d068      	beq.n	80036b8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d14d      	bne.n	800368a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	4b42      	ldr	r3, [pc, #264]	; (80036f8 <HAL_RCC_OscConfig+0x628>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fd fca6 	bl	8000f44 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fd fca2 	bl	8000f44 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e06e      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360e:	4b39      	ldr	r3, [pc, #228]	; (80036f4 <HAL_RCC_OscConfig+0x624>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003622:	d10f      	bne.n	8003644 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003624:	4b33      	ldr	r3, [pc, #204]	; (80036f4 <HAL_RCC_OscConfig+0x624>)
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4931      	ldr	r1, [pc, #196]	; (80036f4 <HAL_RCC_OscConfig+0x624>)
 800362e:	4313      	orrs	r3, r2
 8003630:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003632:	4b30      	ldr	r3, [pc, #192]	; (80036f4 <HAL_RCC_OscConfig+0x624>)
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	f023 020f 	bic.w	r2, r3, #15
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	492d      	ldr	r1, [pc, #180]	; (80036f4 <HAL_RCC_OscConfig+0x624>)
 8003640:	4313      	orrs	r3, r2
 8003642:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003644:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <HAL_RCC_OscConfig+0x624>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	430b      	orrs	r3, r1
 8003656:	4927      	ldr	r1, [pc, #156]	; (80036f4 <HAL_RCC_OscConfig+0x624>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800365c:	4b26      	ldr	r3, [pc, #152]	; (80036f8 <HAL_RCC_OscConfig+0x628>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003662:	f7fd fc6f 	bl	8000f44 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366a:	f7fd fc6b 	bl	8000f44 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e037      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <HAL_RCC_OscConfig+0x624>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x59a>
 8003688:	e02f      	b.n	80036ea <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_RCC_OscConfig+0x628>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7fd fc58 	bl	8000f44 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003698:	f7fd fc54 	bl	8000f44 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e020      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_RCC_OscConfig+0x624>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x5c8>
 80036b6:	e018      	b.n	80036ea <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e013      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_RCC_OscConfig+0x624>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40021000 	.word	0x40021000
 80036f8:	42420060 	.word	0x42420060

080036fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0d0      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003710:	4b6a      	ldr	r3, [pc, #424]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d910      	bls.n	8003740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b67      	ldr	r3, [pc, #412]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 0207 	bic.w	r2, r3, #7
 8003726:	4965      	ldr	r1, [pc, #404]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b8      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003762:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003770:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800377a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377c:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	494d      	ldr	r1, [pc, #308]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d040      	beq.n	800381c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d115      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ba:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e073      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ca:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e06b      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037da:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4936      	ldr	r1, [pc, #216]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ec:	f7fd fbaa 	bl	8000f44 <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	e00a      	b.n	800380a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7fd fba6 	bl	8000f44 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e053      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 020c 	and.w	r2, r3, #12
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	429a      	cmp	r2, r3
 800381a:	d1eb      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800381c:	4b27      	ldr	r3, [pc, #156]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d210      	bcs.n	800384c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b24      	ldr	r3, [pc, #144]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 0207 	bic.w	r2, r3, #7
 8003832:	4922      	ldr	r1, [pc, #136]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e032      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4916      	ldr	r1, [pc, #88]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	490e      	ldr	r1, [pc, #56]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800388a:	f000 f821 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	490a      	ldr	r1, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1cc>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1d0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd f912 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40022000 	.word	0x40022000
 80038c0:	40021000 	.word	0x40021000
 80038c4:	0801456c 	.word	0x0801456c
 80038c8:	20000004 	.word	0x20000004
 80038cc:	20000008 	.word	0x20000008

080038d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d4:	b099      	sub	sp, #100	; 0x64
 80038d6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80038d8:	4b66      	ldr	r3, [pc, #408]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038da:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80038de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038e0:	c407      	stmia	r4!, {r0, r1, r2}
 80038e2:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80038e4:	4b64      	ldr	r3, [pc, #400]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038e6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80038ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	657b      	str	r3, [r7, #84]	; 0x54
 80038f4:	2300      	movs	r3, #0
 80038f6:	653b      	str	r3, [r7, #80]	; 0x50
 80038f8:	2300      	movs	r3, #0
 80038fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038fc:	2300      	movs	r3, #0
 80038fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	64bb      	str	r3, [r7, #72]	; 0x48
 8003908:	2300      	movs	r3, #0
 800390a:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800390c:	4b5b      	ldr	r3, [pc, #364]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003914:	f003 030c 	and.w	r3, r3, #12
 8003918:	2b04      	cmp	r3, #4
 800391a:	d002      	beq.n	8003922 <HAL_RCC_GetSysClockFreq+0x52>
 800391c:	2b08      	cmp	r3, #8
 800391e:	d003      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x58>
 8003920:	e09f      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003922:	4b57      	ldr	r3, [pc, #348]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8003924:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8003926:	e09f      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392a:	0c9b      	lsrs	r3, r3, #18
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	3340      	adds	r3, #64	; 0x40
 8003932:	f107 0220 	add.w	r2, r7, #32
 8003936:	4413      	add	r3, r2
 8003938:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800393c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800393e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8084 	beq.w	8003a52 <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800394a:	4b4c      	ldr	r3, [pc, #304]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	3340      	adds	r3, #64	; 0x40
 8003954:	f107 0220 	add.w	r2, r7, #32
 8003958:	4413      	add	r3, r2
 800395a:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800395e:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003960:	4b46      	ldr	r3, [pc, #280]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d060      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800396c:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	3301      	adds	r3, #1
 8003978:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800397a:	4b40      	ldr	r3, [pc, #256]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	3302      	adds	r3, #2
 8003986:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398a:	2200      	movs	r2, #0
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	617a      	str	r2, [r7, #20]
 8003990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003992:	2200      	movs	r2, #0
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	61fa      	str	r2, [r7, #28]
 8003998:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800399c:	4622      	mov	r2, r4
 800399e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039a2:	4684      	mov	ip, r0
 80039a4:	fb0c f202 	mul.w	r2, ip, r2
 80039a8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80039ac:	468c      	mov	ip, r1
 80039ae:	4618      	mov	r0, r3
 80039b0:	4621      	mov	r1, r4
 80039b2:	4603      	mov	r3, r0
 80039b4:	fb03 f30c 	mul.w	r3, r3, ip
 80039b8:	4413      	add	r3, r2
 80039ba:	4602      	mov	r2, r0
 80039bc:	69b9      	ldr	r1, [r7, #24]
 80039be:	fba2 8901 	umull	r8, r9, r2, r1
 80039c2:	444b      	add	r3, r9
 80039c4:	4699      	mov	r9, r3
 80039c6:	4b2e      	ldr	r3, [pc, #184]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80039c8:	fb03 f209 	mul.w	r2, r3, r9
 80039cc:	2300      	movs	r3, #0
 80039ce:	fb03 f308 	mul.w	r3, r3, r8
 80039d2:	4413      	add	r3, r2
 80039d4:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80039d6:	fba8 ab02 	umull	sl, fp, r8, r2
 80039da:	445b      	add	r3, fp
 80039dc:	469b      	mov	fp, r3
 80039de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e0:	2200      	movs	r2, #0
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	60fa      	str	r2, [r7, #12]
 80039e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e8:	2200      	movs	r2, #0
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80039f2:	4622      	mov	r2, r4
 80039f4:	e9d7 8900 	ldrd	r8, r9, [r7]
 80039f8:	4641      	mov	r1, r8
 80039fa:	fb01 f202 	mul.w	r2, r1, r2
 80039fe:	46cc      	mov	ip, r9
 8003a00:	4618      	mov	r0, r3
 8003a02:	4621      	mov	r1, r4
 8003a04:	4603      	mov	r3, r0
 8003a06:	fb03 f30c 	mul.w	r3, r3, ip
 8003a0a:	4413      	add	r3, r2
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4641      	mov	r1, r8
 8003a10:	fba2 5601 	umull	r5, r6, r2, r1
 8003a14:	4433      	add	r3, r6
 8003a16:	461e      	mov	r6, r3
 8003a18:	462a      	mov	r2, r5
 8003a1a:	4633      	mov	r3, r6
 8003a1c:	4650      	mov	r0, sl
 8003a1e:	4659      	mov	r1, fp
 8003a20:	f7fc fc18 	bl	8000254 <__aeabi_uldivmod>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4613      	mov	r3, r2
 8003a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a2c:	e007      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8003a32:	fb03 f202 	mul.w	r2, r3, r2
 8003a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003a3e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003a42:	461a      	mov	r2, r3
 8003a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d108      	bne.n	8003a5c <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 8003a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a50:	e004      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a54:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 8003a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a5e:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8003a60:	e002      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a64:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8003a66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3764      	adds	r7, #100	; 0x64
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a74:	08013894 	.word	0x08013894
 8003a78:	080138a4 	.word	0x080138a4
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	017d7840 	.word	0x017d7840
 8003a84:	003d0900 	.word	0x003d0900
 8003a88:	007a1200 	.word	0x007a1200

08003a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a90:	4b02      	ldr	r3, [pc, #8]	; (8003a9c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	20000004 	.word	0x20000004

08003aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aa4:	f7ff fff2 	bl	8003a8c <HAL_RCC_GetHCLKFreq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	4903      	ldr	r1, [pc, #12]	; (8003ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab6:	5ccb      	ldrb	r3, [r1, r3]
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	0801457c 	.word	0x0801457c

08003ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003acc:	f7ff ffde 	bl	8003a8c <HAL_RCC_GetHCLKFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	0adb      	lsrs	r3, r3, #11
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	4903      	ldr	r1, [pc, #12]	; (8003aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ade:	5ccb      	ldrb	r3, [r1, r3]
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	0801457c 	.word	0x0801457c

08003af0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	220f      	movs	r2, #15
 8003afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_RCC_GetClockConfig+0x58>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0203 	and.w	r2, r3, #3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <HAL_RCC_GetClockConfig+0x58>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_GetClockConfig+0x58>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b24:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_RCC_GetClockConfig+0x58>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	08db      	lsrs	r3, r3, #3
 8003b2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_RCC_GetClockConfig+0x5c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0207 	and.w	r2, r3, #7
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40022000 	.word	0x40022000

08003b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <RCC_Delay+0x34>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <RCC_Delay+0x38>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0a5b      	lsrs	r3, r3, #9
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b6c:	bf00      	nop
  }
  while (Delay --);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	60fa      	str	r2, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f9      	bne.n	8003b6c <RCC_Delay+0x1c>
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	20000004 	.word	0x20000004
 8003b88:	10624dd3 	.word	0x10624dd3

08003b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d07d      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003bac:	2300      	movs	r3, #0
 8003bae:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb0:	4b8b      	ldr	r3, [pc, #556]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbc:	4b88      	ldr	r3, [pc, #544]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	4a87      	ldr	r2, [pc, #540]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	61d3      	str	r3, [r2, #28]
 8003bc8:	4b85      	ldr	r3, [pc, #532]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	4b82      	ldr	r3, [pc, #520]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d118      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be4:	4b7f      	ldr	r3, [pc, #508]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a7e      	ldr	r2, [pc, #504]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf0:	f7fd f9a8 	bl	8000f44 <HAL_GetTick>
 8003bf4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf6:	e008      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf8:	f7fd f9a4 	bl	8000f44 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e0e5      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0a:	4b76      	ldr	r3, [pc, #472]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c16:	4b72      	ldr	r3, [pc, #456]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d02e      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d027      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c34:	4b6a      	ldr	r3, [pc, #424]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c3e:	4b6a      	ldr	r3, [pc, #424]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c44:	4b68      	ldr	r3, [pc, #416]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c4a:	4a65      	ldr	r2, [pc, #404]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d014      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5a:	f7fd f973 	bl	8000f44 <HAL_GetTick>
 8003c5e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c62:	f7fd f96f 	bl	8000f44 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e0ae      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c78:	4b59      	ldr	r3, [pc, #356]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0ee      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c84:	4b56      	ldr	r3, [pc, #344]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	4953      	ldr	r1, [pc, #332]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c96:	7efb      	ldrb	r3, [r7, #27]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9c:	4b50      	ldr	r3, [pc, #320]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4a4f      	ldr	r2, [pc, #316]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb4:	4b4a      	ldr	r3, [pc, #296]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4947      	ldr	r1, [pc, #284]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003cd2:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	4940      	ldr	r1, [pc, #256]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003cf0:	4b3b      	ldr	r3, [pc, #236]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	4938      	ldr	r1, [pc, #224]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003d02:	4b37      	ldr	r3, [pc, #220]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003d0e:	4b34      	ldr	r3, [pc, #208]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d148      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003d24:	4b2e      	ldr	r3, [pc, #184]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d138      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003d30:	4b2b      	ldr	r3, [pc, #172]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d009      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003d3c:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e042      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003d50:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	4920      	ldr	r1, [pc, #128]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003d62:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	491c      	ldr	r1, [pc, #112]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7a:	f7fd f8e3 	bl	8000f44 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d82:	f7fd f8df 	bl	8000f44 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b64      	cmp	r3, #100	; 0x64
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e020      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d94:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003da0:	e009      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d001      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e00f      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	4904      	ldr	r1, [pc, #16]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40007000 	.word	0x40007000
 8003de8:	42420440 	.word	0x42420440
 8003dec:	42420070 	.word	0x42420070

08003df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e041      	b.n	8003e86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f839 	bl	8003e8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f000 f9bc 	bl	80041ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d001      	beq.n	8003eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e03f      	b.n	8003f38 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <HAL_TIM_Base_Start_IT+0xa4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <HAL_TIM_Base_Start_IT+0x62>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee2:	d00e      	beq.n	8003f02 <HAL_TIM_Base_Start_IT+0x62>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a17      	ldr	r2, [pc, #92]	; (8003f48 <HAL_TIM_Base_Start_IT+0xa8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_TIM_Base_Start_IT+0x62>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a16      	ldr	r2, [pc, #88]	; (8003f4c <HAL_TIM_Base_Start_IT+0xac>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <HAL_TIM_Base_Start_IT+0x62>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a14      	ldr	r2, [pc, #80]	; (8003f50 <HAL_TIM_Base_Start_IT+0xb0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d111      	bne.n	8003f26 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b06      	cmp	r3, #6
 8003f12:	d010      	beq.n	8003f36 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f24:	e007      	b.n	8003f36 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40000c00 	.word	0x40000c00

08003f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d122      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d11b      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0202 	mvn.w	r2, #2
 8003f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8ed 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f8e0 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f8ef 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d122      	bne.n	8004004 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d11b      	bne.n	8004004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0204 	mvn.w	r2, #4
 8003fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8c3 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e005      	b.n	8003ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f8b6 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f8c5 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b08      	cmp	r3, #8
 8004010:	d122      	bne.n	8004058 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b08      	cmp	r3, #8
 800401e:	d11b      	bne.n	8004058 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0208 	mvn.w	r2, #8
 8004028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2204      	movs	r2, #4
 800402e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f899 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8004044:	e005      	b.n	8004052 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f88c 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f89b 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b10      	cmp	r3, #16
 8004064:	d122      	bne.n	80040ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b10      	cmp	r3, #16
 8004072:	d11b      	bne.n	80040ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0210 	mvn.w	r2, #16
 800407c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2208      	movs	r2, #8
 8004082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f86f 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8004098:	e005      	b.n	80040a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f862 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f871 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d10e      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d107      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0201 	mvn.w	r2, #1
 80040d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fc fcc4 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	2b80      	cmp	r3, #128	; 0x80
 80040e4:	d10e      	bne.n	8004104 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f0:	2b80      	cmp	r3, #128	; 0x80
 80040f2:	d107      	bne.n	8004104 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f8c9 	bl	8004296 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d10e      	bne.n	8004130 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d107      	bne.n	8004130 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f835 	bl	800419a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b20      	cmp	r3, #32
 800413c:	d10e      	bne.n	800415c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b20      	cmp	r3, #32
 800414a:	d107      	bne.n	800415c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0220 	mvn.w	r2, #32
 8004154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f894 	bl	8004284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a2d      	ldr	r2, [pc, #180]	; (8004274 <TIM_Base_SetConfig+0xc8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00f      	beq.n	80041e4 <TIM_Base_SetConfig+0x38>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ca:	d00b      	beq.n	80041e4 <TIM_Base_SetConfig+0x38>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a2a      	ldr	r2, [pc, #168]	; (8004278 <TIM_Base_SetConfig+0xcc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <TIM_Base_SetConfig+0x38>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a29      	ldr	r2, [pc, #164]	; (800427c <TIM_Base_SetConfig+0xd0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d003      	beq.n	80041e4 <TIM_Base_SetConfig+0x38>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a28      	ldr	r2, [pc, #160]	; (8004280 <TIM_Base_SetConfig+0xd4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d108      	bne.n	80041f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <TIM_Base_SetConfig+0xc8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00f      	beq.n	800421e <TIM_Base_SetConfig+0x72>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004204:	d00b      	beq.n	800421e <TIM_Base_SetConfig+0x72>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a1b      	ldr	r2, [pc, #108]	; (8004278 <TIM_Base_SetConfig+0xcc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d007      	beq.n	800421e <TIM_Base_SetConfig+0x72>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a1a      	ldr	r2, [pc, #104]	; (800427c <TIM_Base_SetConfig+0xd0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_Base_SetConfig+0x72>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a19      	ldr	r2, [pc, #100]	; (8004280 <TIM_Base_SetConfig+0xd4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d108      	bne.n	8004230 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a07      	ldr	r2, [pc, #28]	; (8004274 <TIM_Base_SetConfig+0xc8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d103      	bne.n	8004264 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	615a      	str	r2, [r3, #20]
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800
 8004280:	40000c00 	.word	0x40000c00

08004284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e03f      	b.n	800433a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fc fd88 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2224      	movs	r2, #36	; 0x24
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fcd3 	bl	8004c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b08a      	sub	sp, #40	; 0x28
 8004346:	af02      	add	r7, sp, #8
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b20      	cmp	r3, #32
 8004360:	d17c      	bne.n	800445c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_UART_Transmit+0x2c>
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e075      	b.n	800445e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_UART_Transmit+0x3e>
 800437c:	2302      	movs	r3, #2
 800437e:	e06e      	b.n	800445e <HAL_UART_Transmit+0x11c>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2221      	movs	r2, #33	; 0x21
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004396:	f7fc fdd5 	bl	8000f44 <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b0:	d108      	bne.n	80043c4 <HAL_UART_Transmit+0x82>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d104      	bne.n	80043c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	e003      	b.n	80043cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043d4:	e02a      	b.n	800442c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2200      	movs	r2, #0
 80043de:	2180      	movs	r1, #128	; 0x80
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fa85 	bl	80048f0 <UART_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e036      	b.n	800445e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004404:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	3302      	adds	r3, #2
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	e007      	b.n	800441e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	781a      	ldrb	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	3301      	adds	r3, #1
 800441c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1cf      	bne.n	80043d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2200      	movs	r2, #0
 800443e:	2140      	movs	r1, #64	; 0x40
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fa55 	bl	80048f0 <UART_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e006      	b.n	800445e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	e000      	b.n	800445e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800445c:	2302      	movs	r3, #2
  }
}
 800445e:	4618      	mov	r0, r3
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	4613      	mov	r3, r2
 8004472:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b20      	cmp	r3, #32
 800447e:	d130      	bne.n	80044e2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_UART_Transmit_IT+0x26>
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e029      	b.n	80044e4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_UART_Transmit_IT+0x38>
 800449a:	2302      	movs	r3, #2
 800449c:	e022      	b.n	80044e4 <HAL_UART_Transmit_IT+0x7e>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	88fa      	ldrh	r2, [r7, #6]
 80044b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	88fa      	ldrh	r2, [r7, #6]
 80044b6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2221      	movs	r2, #33	; 0x21
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044dc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	e000      	b.n	80044e4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80044e2:	2302      	movs	r3, #2
  }
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr

080044ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	4613      	mov	r3, r2
 80044fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b20      	cmp	r3, #32
 8004506:	d11d      	bne.n	8004544 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_UART_Receive_IT+0x26>
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e016      	b.n	8004546 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_UART_Receive_IT+0x38>
 8004522:	2302      	movs	r3, #2
 8004524:	e00f      	b.n	8004546 <HAL_UART_Receive_IT+0x58>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	461a      	mov	r2, r3
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fa22 	bl	8004984 <UART_Start_Receive_IT>
 8004540:	4603      	mov	r3, r0
 8004542:	e000      	b.n	8004546 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004544:	2302      	movs	r3, #2
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	; 0x28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_UART_IRQHandler+0x52>
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fad2 	bl	8004b44 <UART_Receive_IT>
      return;
 80045a0:	e17b      	b.n	800489a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80b1 	beq.w	800470c <HAL_UART_IRQHandler+0x1bc>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <HAL_UART_IRQHandler+0x70>
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80a6 	beq.w	800470c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_UART_IRQHandler+0x90>
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	f043 0201 	orr.w	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_UART_IRQHandler+0xb0>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	f043 0202 	orr.w	r2, r3, #2
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_UART_IRQHandler+0xd0>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	f043 0204 	orr.w	r2, r3, #4
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00f      	beq.n	800464a <HAL_UART_IRQHandler+0xfa>
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <HAL_UART_IRQHandler+0xee>
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f043 0208 	orr.w	r2, r3, #8
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 811e 	beq.w	8004890 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <HAL_UART_IRQHandler+0x11e>
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fa6b 	bl	8004b44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d102      	bne.n	8004696 <HAL_UART_IRQHandler+0x146>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d031      	beq.n	80046fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f9ad 	bl	80049f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d023      	beq.n	80046f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695a      	ldr	r2, [r3, #20]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d013      	beq.n	80046ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	4a76      	ldr	r2, [pc, #472]	; (80048a0 <HAL_UART_IRQHandler+0x350>)
 80046c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fc fd80 	bl	80011d4 <HAL_DMA_Abort_IT>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e4:	4610      	mov	r0, r2
 80046e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e8:	e00e      	b.n	8004708 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8ec 	bl	80048c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	e00a      	b.n	8004708 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8e8 	bl	80048c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f8:	e006      	b.n	8004708 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8e4 	bl	80048c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004706:	e0c3      	b.n	8004890 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	bf00      	nop
    return;
 800470a:	e0c1      	b.n	8004890 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	2b01      	cmp	r3, #1
 8004712:	f040 80a1 	bne.w	8004858 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 809b 	beq.w	8004858 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8095 	beq.w	8004858 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d04e      	beq.n	80047f0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800475c:	8a3b      	ldrh	r3, [r7, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8098 	beq.w	8004894 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004768:	8a3a      	ldrh	r2, [r7, #16]
 800476a:	429a      	cmp	r2, r3
 800476c:	f080 8092 	bcs.w	8004894 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8a3a      	ldrh	r2, [r7, #16]
 8004774:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b20      	cmp	r3, #32
 800477e:	d02b      	beq.n	80047d8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800478e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0210 	bic.w	r2, r2, #16
 80047cc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fc fcc3 	bl	800115e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f876 	bl	80048da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047ee:	e051      	b.n	8004894 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d047      	beq.n	8004898 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004808:	8a7b      	ldrh	r3, [r7, #18]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d044      	beq.n	8004898 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800481c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0210 	bic.w	r2, r2, #16
 800484a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800484c:	8a7b      	ldrh	r3, [r7, #18]
 800484e:	4619      	mov	r1, r3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f842 	bl	80048da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004856:	e01f      	b.n	8004898 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485e:	2b00      	cmp	r3, #0
 8004860:	d008      	beq.n	8004874 <HAL_UART_IRQHandler+0x324>
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f902 	bl	8004a76 <UART_Transmit_IT>
    return;
 8004872:	e012      	b.n	800489a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <HAL_UART_IRQHandler+0x34a>
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f943 	bl	8004b14 <UART_EndTransmit_IT>
    return;
 800488e:	e004      	b.n	800489a <HAL_UART_IRQHandler+0x34a>
    return;
 8004890:	bf00      	nop
 8004892:	e002      	b.n	800489a <HAL_UART_IRQHandler+0x34a>
      return;
 8004894:	bf00      	nop
 8004896:	e000      	b.n	800489a <HAL_UART_IRQHandler+0x34a>
      return;
 8004898:	bf00      	nop
  }
}
 800489a:	3728      	adds	r7, #40	; 0x28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	08004a4f 	.word	0x08004a4f

080048a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	4613      	mov	r3, r2
 80048fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004900:	e02c      	b.n	800495c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004908:	d028      	beq.n	800495c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <UART_WaitOnFlagUntilTimeout+0x30>
 8004910:	f7fc fb18 	bl	8000f44 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	429a      	cmp	r2, r3
 800491e:	d21d      	bcs.n	800495c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800492e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e00f      	b.n	800497c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4013      	ands	r3, r2
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	429a      	cmp	r2, r3
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	429a      	cmp	r2, r3
 8004978:	d0c3      	beq.n	8004902 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	88fa      	ldrh	r2, [r7, #6]
 80049a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2222      	movs	r2, #34	; 0x22
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0220 	orr.w	r2, r2, #32
 80049e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a0c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d107      	bne.n	8004a36 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0210 	bic.w	r2, r2, #16
 8004a34:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr

08004a4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff ff2d 	bl	80048c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b21      	cmp	r3, #33	; 0x21
 8004a88:	d13e      	bne.n	8004b08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a92:	d114      	bne.n	8004abe <UART_Transmit_IT+0x48>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d110      	bne.n	8004abe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	1c9a      	adds	r2, r3, #2
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	621a      	str	r2, [r3, #32]
 8004abc:	e008      	b.n	8004ad0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	1c59      	adds	r1, r3, #1
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6211      	str	r1, [r2, #32]
 8004ac8:	781a      	ldrb	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	4619      	mov	r1, r3
 8004ade:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10f      	bne.n	8004b04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004af2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	e000      	b.n	8004b0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr

08004b14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff feb5 	bl	80048a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b22      	cmp	r3, #34	; 0x22
 8004b56:	f040 8099 	bne.w	8004c8c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b62:	d117      	bne.n	8004b94 <UART_Receive_IT+0x50>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d113      	bne.n	8004b94 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	1c9a      	adds	r2, r3, #2
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	629a      	str	r2, [r3, #40]	; 0x28
 8004b92:	e026      	b.n	8004be2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba6:	d007      	beq.n	8004bb8 <UART_Receive_IT+0x74>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <UART_Receive_IT+0x82>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d106      	bne.n	8004bc6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	701a      	strb	r2, [r3, #0]
 8004bc4:	e008      	b.n	8004bd8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d148      	bne.n	8004c88 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0220 	bic.w	r2, r2, #32
 8004c04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695a      	ldr	r2, [r3, #20]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0201 	bic.w	r2, r2, #1
 8004c24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d123      	bne.n	8004c7e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0210 	bic.w	r2, r2, #16
 8004c4a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d10a      	bne.n	8004c70 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c74:	4619      	mov	r1, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff fe2f 	bl	80048da <HAL_UARTEx_RxEventCallback>
 8004c7c:	e002      	b.n	8004c84 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff fe19 	bl	80048b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	e002      	b.n	8004c8e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e000      	b.n	8004c8e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004c8c:	2302      	movs	r3, #2
  }
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cd2:	f023 030c 	bic.w	r3, r3, #12
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <UART_SetConfig+0x114>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d103      	bne.n	8004d08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d00:	f7fe fee2 	bl	8003ac8 <HAL_RCC_GetPCLK2Freq>
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	e002      	b.n	8004d0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d08:	f7fe feca 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8004d0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009a      	lsls	r2, r3, #2
 8004d18:	441a      	add	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <UART_SetConfig+0x118>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	0119      	lsls	r1, r3, #4
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	009a      	lsls	r2, r3, #2
 8004d38:	441a      	add	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d44:	4b1a      	ldr	r3, [pc, #104]	; (8004db0 <UART_SetConfig+0x118>)
 8004d46:	fba3 0302 	umull	r0, r3, r3, r2
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	2064      	movs	r0, #100	; 0x64
 8004d4e:	fb00 f303 	mul.w	r3, r0, r3
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	3332      	adds	r3, #50	; 0x32
 8004d58:	4a15      	ldr	r2, [pc, #84]	; (8004db0 <UART_SetConfig+0x118>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d64:	4419      	add	r1, r3
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009a      	lsls	r2, r3, #2
 8004d70:	441a      	add	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <UART_SetConfig+0x118>)
 8004d7e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	2064      	movs	r0, #100	; 0x64
 8004d86:	fb00 f303 	mul.w	r3, r0, r3
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	3332      	adds	r3, #50	; 0x32
 8004d90:	4a07      	ldr	r2, [pc, #28]	; (8004db0 <UART_SetConfig+0x118>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	f003 020f 	and.w	r2, r3, #15
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	440a      	add	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40013800 	.word	0x40013800
 8004db0:	51eb851f 	.word	0x51eb851f

08004db4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004db4:	b084      	sub	sp, #16
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	f107 001c 	add.w	r0, r7, #28
 8004dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f970 	bl	80050b8 <USB_CoreReset>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004df4:	b004      	add	sp, #16
 8004df6:	4770      	bx	lr

08004df8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f043 0201 	orr.w	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f023 0201 	bic.w	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr

08004e38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d115      	bne.n	8004e86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e66:	2001      	movs	r0, #1
 8004e68:	f7fc f876 	bl	8000f58 <HAL_Delay>
      ms++;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f912 	bl	800509c <USB_GetMode>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d01e      	beq.n	8004ebc <USB_SetCurrentMode+0x84>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b31      	cmp	r3, #49	; 0x31
 8004e82:	d9f0      	bls.n	8004e66 <USB_SetCurrentMode+0x2e>
 8004e84:	e01a      	b.n	8004ebc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d115      	bne.n	8004eb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e98:	2001      	movs	r0, #1
 8004e9a:	f7fc f85d 	bl	8000f58 <HAL_Delay>
      ms++;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f8f9 	bl	800509c <USB_GetMode>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <USB_SetCurrentMode+0x84>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b31      	cmp	r3, #49	; 0x31
 8004eb4:	d9f0      	bls.n	8004e98 <USB_SetCurrentMode+0x60>
 8004eb6:	e001      	b.n	8004ebc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e005      	b.n	8004ec8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b32      	cmp	r3, #50	; 0x32
 8004ec0:	d101      	bne.n	8004ec6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	019b      	lsls	r3, r3, #6
 8004ee2:	f043 0220 	orr.w	r2, r3, #32
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3301      	adds	r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4a08      	ldr	r2, [pc, #32]	; (8004f14 <USB_FlushTxFifo+0x44>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d901      	bls.n	8004efc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e006      	b.n	8004f0a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d0f0      	beq.n	8004eea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr
 8004f14:	00030d40 	.word	0x00030d40

08004f18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2210      	movs	r2, #16
 8004f28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a08      	ldr	r2, [pc, #32]	; (8004f54 <USB_FlushRxFifo+0x3c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d901      	bls.n	8004f3c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e006      	b.n	8004f4a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b10      	cmp	r3, #16
 8004f46:	d0f0      	beq.n	8004f2a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr
 8004f54:	00030d40 	.word	0x00030d40

08004f58 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b089      	sub	sp, #36	; 0x24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4611      	mov	r1, r2
 8004f64:	461a      	mov	r2, r3
 8004f66:	460b      	mov	r3, r1
 8004f68:	71fb      	strb	r3, [r7, #7]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004f76:	88bb      	ldrh	r3, [r7, #4]
 8004f78:	3303      	adds	r3, #3
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	e018      	b.n	8004fb6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	031a      	lsls	r2, r3, #12
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f90:	461a      	mov	r2, r3
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	3301      	adds	r3, #1
 8004fae:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d3e2      	bcc.n	8004f84 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3724      	adds	r7, #36	; 0x24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr

08004fca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b08b      	sub	sp, #44	; 0x2c
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	089b      	lsrs	r3, r3, #2
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	623b      	str	r3, [r7, #32]
 8004ff4:	e014      	b.n	8005020 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	601a      	str	r2, [r3, #0]
    pDest++;
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	3301      	adds	r3, #1
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	3301      	adds	r3, #1
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	3301      	adds	r3, #1
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	3301      	adds	r3, #1
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	3301      	adds	r3, #1
 800501e:	623b      	str	r3, [r7, #32]
 8005020:	6a3a      	ldr	r2, [r7, #32]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	429a      	cmp	r2, r3
 8005026:	d3e6      	bcc.n	8004ff6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005028:	8bfb      	ldrh	r3, [r7, #30]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d01e      	beq.n	800506c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005038:	461a      	mov	r2, r3
 800503a:	f107 0310 	add.w	r3, r7, #16
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	fa22 f303 	lsr.w	r3, r2, r3
 800504e:	b2da      	uxtb	r2, r3
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	701a      	strb	r2, [r3, #0]
      i++;
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	3301      	adds	r3, #1
 8005058:	623b      	str	r3, [r7, #32]
      pDest++;
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	3301      	adds	r3, #1
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005060:	8bfb      	ldrh	r3, [r7, #30]
 8005062:	3b01      	subs	r3, #1
 8005064:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005066:	8bfb      	ldrh	r3, [r7, #30]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ea      	bne.n	8005042 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800506e:	4618      	mov	r0, r3
 8005070:	372c      	adds	r7, #44	; 0x2c
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4013      	ands	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005090:	68fb      	ldr	r3, [r7, #12]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f003 0301 	and.w	r3, r3, #1
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr
	...

080050b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3301      	adds	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4a12      	ldr	r2, [pc, #72]	; (8005118 <USB_CoreReset+0x60>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d901      	bls.n	80050d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e01b      	b.n	800510e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	daf2      	bge.n	80050c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f043 0201 	orr.w	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3301      	adds	r3, #1
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4a08      	ldr	r2, [pc, #32]	; (8005118 <USB_CoreReset+0x60>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e006      	b.n	800510e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b01      	cmp	r3, #1
 800510a:	d0f0      	beq.n	80050ee <USB_CoreReset+0x36>

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr
 8005118:	00030d40 	.word	0x00030d40

0800511c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800511c:	b084      	sub	sp, #16
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	f107 001c 	add.w	r0, r7, #28
 800512a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005138:	461a      	mov	r2, r3
 800513a:	2300      	movs	r3, #0
 800513c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005164:	f023 0304 	bic.w	r3, r3, #4
 8005168:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800516a:	2110      	movs	r1, #16
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff feaf 	bl	8004ed0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fed0 	bl	8004f18 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	e015      	b.n	80051aa <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	461a      	mov	r2, r3
 800518c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005190:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	461a      	mov	r2, r3
 80051a0:	2300      	movs	r3, #0
 80051a2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3301      	adds	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d3e5      	bcc.n	800517e <USB_HostInit+0x62>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051be:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2280      	movs	r2, #128	; 0x80
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a0c      	ldr	r2, [pc, #48]	; (80051fc <USB_HostInit+0xe0>)
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a0c      	ldr	r2, [pc, #48]	; (8005200 <USB_HostInit+0xe4>)
 80051d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f043 0210 	orr.w	r2, r3, #16
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699a      	ldr	r2, [r3, #24]
 80051e4:	4b07      	ldr	r3, [pc, #28]	; (8005204 <USB_HostInit+0xe8>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051f8:	b004      	add	sp, #16
 80051fa:	4770      	bx	lr
 80051fc:	00600080 	.word	0x00600080
 8005200:	004000e0 	.word	0x004000e0
 8005204:	a3200008 	.word	0xa3200008

08005208 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	68f9      	ldr	r1, [r7, #12]
 800523c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005240:	4313      	orrs	r3, r2
 8005242:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d107      	bne.n	800525a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005250:	461a      	mov	r2, r3
 8005252:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005256:	6053      	str	r3, [r2, #4]
 8005258:	e009      	b.n	800526e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d106      	bne.n	800526e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005266:	461a      	mov	r2, r3
 8005268:	f241 7370 	movw	r3, #6000	; 0x1770
 800526c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr

0800527a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800529a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80052aa:	2064      	movs	r0, #100	; 0x64
 80052ac:	f7fb fe54 	bl	8000f58 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052bc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80052be:	200a      	movs	r0, #10
 80052c0:	f7fb fe4a 	bl	8000f58 <HAL_Delay>

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	460b      	mov	r3, r1
 80052d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052f2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <USB_DriveVbus+0x44>
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d106      	bne.n	8005312 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800530c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005310:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531c:	d109      	bne.n	8005332 <USB_DriveVbus+0x64>
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d106      	bne.n	8005332 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800532c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005330:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr

0800533e <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	0c5b      	lsrs	r3, r3, #17
 800535c:	f003 0303 	and.w	r3, r3, #3
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr

0800536a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800536a:	b480      	push	{r7}
 800536c:	b085      	sub	sp, #20
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	b29b      	uxth	r3, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr
	...

0800538c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	4608      	mov	r0, r1
 8005396:	4611      	mov	r1, r2
 8005398:	461a      	mov	r2, r3
 800539a:	4603      	mov	r3, r0
 800539c:	70fb      	strb	r3, [r7, #3]
 800539e:	460b      	mov	r3, r1
 80053a0:	70bb      	strb	r3, [r7, #2]
 80053a2:	4613      	mov	r3, r2
 80053a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80053ae:	78fb      	ldrb	r3, [r7, #3]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ba:	461a      	mov	r2, r3
 80053bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80053c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d867      	bhi.n	800549a <USB_HC_Init+0x10e>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <USB_HC_Init+0x44>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	080053e1 	.word	0x080053e1
 80053d4:	0800545d 	.word	0x0800545d
 80053d8:	080053e1 	.word	0x080053e1
 80053dc:	0800541f 	.word	0x0800541f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ec:	461a      	mov	r2, r3
 80053ee:	f240 439d 	movw	r3, #1181	; 0x49d
 80053f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80053f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	da51      	bge.n	80054a0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4413      	add	r3, r2
 8005404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	78fa      	ldrb	r2, [r7, #3]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	440a      	add	r2, r1
 8005412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800541a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800541c:	e040      	b.n	80054a0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4413      	add	r3, r2
 8005426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542a:	461a      	mov	r2, r3
 800542c:	f240 639d 	movw	r3, #1693	; 0x69d
 8005430:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005432:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005436:	2b00      	cmp	r3, #0
 8005438:	da34      	bge.n	80054a4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4413      	add	r3, r2
 8005442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	0151      	lsls	r1, r2, #5
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	440a      	add	r2, r1
 8005450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005458:	60d3      	str	r3, [r2, #12]
      }

      break;
 800545a:	e023      	b.n	80054a4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	461a      	mov	r2, r3
 800546a:	f240 2325 	movw	r3, #549	; 0x225
 800546e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005470:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005474:	2b00      	cmp	r3, #0
 8005476:	da17      	bge.n	80054a8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	78fa      	ldrb	r2, [r7, #3]
 8005488:	0151      	lsls	r1, r2, #5
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	440a      	add	r2, r1
 800548e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005492:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005496:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005498:	e006      	b.n	80054a8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	77fb      	strb	r3, [r7, #31]
      break;
 800549e:	e004      	b.n	80054aa <USB_HC_Init+0x11e>
      break;
 80054a0:	bf00      	nop
 80054a2:	e002      	b.n	80054aa <USB_HC_Init+0x11e>
      break;
 80054a4:	bf00      	nop
 80054a6:	e000      	b.n	80054aa <USB_HC_Init+0x11e>
      break;
 80054a8:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	2101      	movs	r1, #1
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	6939      	ldr	r1, [r7, #16]
 80054c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054c4:	4313      	orrs	r3, r2
 80054c6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80054d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	da03      	bge.n	80054e4 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80054dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	e001      	b.n	80054e8 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff ff28 	bl	800533e <USB_GetHostSpeed>
 80054ee:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80054f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d106      	bne.n	8005506 <USB_HC_Init+0x17a>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d003      	beq.n	8005506 <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80054fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e001      	b.n	800550a <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800550a:	787b      	ldrb	r3, [r7, #1]
 800550c:	059b      	lsls	r3, r3, #22
 800550e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005512:	78bb      	ldrb	r3, [r7, #2]
 8005514:	02db      	lsls	r3, r3, #11
 8005516:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800551a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800551c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005520:	049b      	lsls	r3, r3, #18
 8005522:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005526:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005528:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800552a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800552e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	0159      	lsls	r1, r3, #5
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	440b      	add	r3, r1
 800553c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005540:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005546:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005548:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800554c:	2b03      	cmp	r3, #3
 800554e:	d10f      	bne.n	8005570 <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4413      	add	r3, r2
 8005558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	440a      	add	r2, r1
 8005566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800556a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800556e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005570:	7ffb      	ldrb	r3, [r7, #31]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop

0800557c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005594:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d018      	beq.n	80055d0 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	8912      	ldrh	r2, [r2, #8]
 80055a6:	4413      	add	r3, r2
 80055a8:	3b01      	subs	r3, #1
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	8912      	ldrh	r2, [r2, #8]
 80055ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80055b4:	8bfa      	ldrh	r2, [r7, #30]
 80055b6:	8a7b      	ldrh	r3, [r7, #18]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d90b      	bls.n	80055d4 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80055bc:	8a7b      	ldrh	r3, [r7, #18]
 80055be:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80055c0:	8bfb      	ldrh	r3, [r7, #30]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	8912      	ldrh	r2, [r2, #8]
 80055c6:	fb03 f202 	mul.w	r2, r3, r2
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	611a      	str	r2, [r3, #16]
 80055ce:	e001      	b.n	80055d4 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80055d0:	2301      	movs	r3, #1
 80055d2:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	78db      	ldrb	r3, [r3, #3]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80055dc:	8bfb      	ldrh	r3, [r7, #30]
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	8912      	ldrh	r2, [r2, #8]
 80055e2:	fb03 f202 	mul.w	r2, r3, r2
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	611a      	str	r2, [r3, #16]
 80055ea:	e003      	b.n	80055f4 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80055fc:	8bfb      	ldrh	r3, [r7, #30]
 80055fe:	04d9      	lsls	r1, r3, #19
 8005600:	4b59      	ldr	r3, [pc, #356]	; (8005768 <USB_HC_StartXfer+0x1ec>)
 8005602:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005604:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	7a9b      	ldrb	r3, [r3, #10]
 800560a:	075b      	lsls	r3, r3, #29
 800560c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005610:	6979      	ldr	r1, [r7, #20]
 8005612:	0148      	lsls	r0, r1, #5
 8005614:	69b9      	ldr	r1, [r7, #24]
 8005616:	4401      	add	r1, r0
 8005618:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800561c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800561e:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	440a      	add	r2, r1
 800564e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005652:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005656:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	4413      	add	r3, r2
 8005660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	7c7b      	ldrb	r3, [r7, #17]
 8005668:	075b      	lsls	r3, r3, #29
 800566a:	6979      	ldr	r1, [r7, #20]
 800566c:	0148      	lsls	r0, r1, #5
 800566e:	69b9      	ldr	r1, [r7, #24]
 8005670:	4401      	add	r1, r0
 8005672:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005676:	4313      	orrs	r3, r2
 8005678:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	4413      	add	r3, r2
 8005682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005690:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	78db      	ldrb	r3, [r3, #3]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d004      	beq.n	80056a4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	e003      	b.n	80056ac <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056aa:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056b2:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c0:	461a      	mov	r2, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	78db      	ldrb	r3, [r3, #3]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d147      	bne.n	800575e <USB_HC_StartXfer+0x1e2>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d043      	beq.n	800575e <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	79db      	ldrb	r3, [r3, #7]
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d830      	bhi.n	8005740 <USB_HC_StartXfer+0x1c4>
 80056de:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <USB_HC_StartXfer+0x168>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	080056f5 	.word	0x080056f5
 80056e8:	08005719 	.word	0x08005719
 80056ec:	080056f5 	.word	0x080056f5
 80056f0:	08005719 	.word	0x08005719
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	3303      	adds	r3, #3
 80056fa:	089b      	lsrs	r3, r3, #2
 80056fc:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80056fe:	89fa      	ldrh	r2, [r7, #14]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	b29b      	uxth	r3, r3
 8005706:	429a      	cmp	r2, r3
 8005708:	d91c      	bls.n	8005744 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f043 0220 	orr.w	r2, r3, #32
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	619a      	str	r2, [r3, #24]
        }
        break;
 8005716:	e015      	b.n	8005744 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	3303      	adds	r3, #3
 800571e:	089b      	lsrs	r3, r3, #2
 8005720:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005722:	89fa      	ldrh	r2, [r7, #14]
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	b29b      	uxth	r3, r3
 800572e:	429a      	cmp	r2, r3
 8005730:	d90a      	bls.n	8005748 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	619a      	str	r2, [r3, #24]
        }
        break;
 800573e:	e003      	b.n	8005748 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8005740:	bf00      	nop
 8005742:	e002      	b.n	800574a <USB_HC_StartXfer+0x1ce>
        break;
 8005744:	bf00      	nop
 8005746:	e000      	b.n	800574a <USB_HC_StartXfer+0x1ce>
        break;
 8005748:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68d9      	ldr	r1, [r3, #12]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	785a      	ldrb	r2, [r3, #1]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	b29b      	uxth	r3, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff fbfd 	bl	8004f58 <USB_WritePacket>
  }

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3720      	adds	r7, #32
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	1ff80000 	.word	0x1ff80000

0800576c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	b29b      	uxth	r3, r3
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800578c:	b480      	push	{r7}
 800578e:	b089      	sub	sp, #36	; 0x24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	0c9b      	lsrs	r3, r3, #18
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	0fdb      	lsrs	r3, r3, #31
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d104      	bne.n	80057e6 <USB_HC_Halt+0x5a>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	e0e8      	b.n	80059b8 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <USB_HC_Halt+0x66>
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d173      	bne.n	80058da <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	0151      	lsls	r1, r2, #5
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	440a      	add	r2, r1
 8005808:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800580c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005810:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	f040 80cb 	bne.w	80059b6 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d143      	bne.n	80058b4 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	4413      	add	r3, r2
 8005834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	440a      	add	r2, r1
 8005842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005846:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800584a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	4413      	add	r3, r2
 8005854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	440a      	add	r2, r1
 8005862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800586a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	4413      	add	r3, r2
 8005874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	440a      	add	r2, r1
 8005882:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005886:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800588a:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	3301      	adds	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005898:	d81d      	bhi.n	80058d6 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b0:	d0ec      	beq.n	800588c <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058b2:	e080      	b.n	80059b6 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058d2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058d4:	e06f      	b.n	80059b6 <USB_HC_Halt+0x22a>
            break;
 80058d6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058d8:	e06d      	b.n	80059b6 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058f8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d143      	bne.n	8005992 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	440a      	add	r2, r1
 8005920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005928:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	440a      	add	r2, r1
 8005940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005948:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	440a      	add	r2, r1
 8005960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005964:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005968:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3301      	adds	r3, #1
 800596e:	61fb      	str	r3, [r7, #28]
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005976:	d81d      	bhi.n	80059b4 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	4413      	add	r3, r2
 8005980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800598a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800598e:	d0ec      	beq.n	800596a <USB_HC_Halt+0x1de>
 8005990:	e011      	b.n	80059b6 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	4413      	add	r3, r2
 800599a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e000      	b.n	80059b6 <USB_HC_Halt+0x22a>
          break;
 80059b4:	bf00      	nop
    }
  }

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3724      	adds	r7, #36	; 0x24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr

080059c2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b086      	sub	sp, #24
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff fa20 	bl	8004e18 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80059d8:	2110      	movs	r1, #16
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff fa78 	bl	8004ed0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff fa99 	bl	8004f18 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80059e6:	2300      	movs	r3, #0
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	e01f      	b.n	8005a2c <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a02:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a0a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a12:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a20:	461a      	mov	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	613b      	str	r3, [r7, #16]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	2b0f      	cmp	r3, #15
 8005a30:	d9dc      	bls.n	80059ec <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005a32:	2300      	movs	r3, #0
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	e034      	b.n	8005aa2 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a4e:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a56:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a5e:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	3301      	adds	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a7e:	d80c      	bhi.n	8005a9a <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a96:	d0ec      	beq.n	8005a72 <USB_StopHost+0xb0>
 8005a98:	e000      	b.n	8005a9c <USB_StopHost+0xda>
        break;
 8005a9a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b0f      	cmp	r3, #15
 8005aa6:	d9c7      	bls.n	8005a38 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ab4:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005abc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005ac8:	b590      	push	{r4, r7, lr}
 8005aca:	b08b      	sub	sp, #44	; 0x2c
 8005acc:	af04      	add	r7, sp, #16
 8005ace:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2201      	movs	r2, #1
 8005adc:	2101      	movs	r1, #1
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f006 fe1e 	bl	800c720 <USBH_FindInterface>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 8005ae8:	7c7b      	ldrb	r3, [r7, #17]
 8005aea:	2bff      	cmp	r3, #255	; 0xff
 8005aec:	d111      	bne.n	8005b12 <USBH_AUDIO_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8005aee:	482e      	ldr	r0, [pc, #184]	; (8005ba8 <USBH_AUDIO_InterfaceInit+0xe0>)
 8005af0:	f00d f854 	bl	8012b9c <iprintf>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4619      	mov	r1, r3
 8005b02:	482a      	ldr	r0, [pc, #168]	; (8005bac <USBH_AUDIO_InterfaceInit+0xe4>)
 8005b04:	f00d f84a 	bl	8012b9c <iprintf>
 8005b08:	200a      	movs	r0, #10
 8005b0a:	f00d f85f 	bl	8012bcc <putchar>
    return USBH_FAIL;
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e1ca      	b.n	8005ea8 <USBH_AUDIO_InterfaceInit+0x3e0>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b18:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 8005b1c:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8005b20:	f00c fc38 	bl	8012394 <malloc>
 8005b24:	4603      	mov	r3, r0
 8005b26:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b2e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <USBH_AUDIO_InterfaceInit+0x8a>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
 8005b3c:	481a      	ldr	r0, [pc, #104]	; (8005ba8 <USBH_AUDIO_InterfaceInit+0xe0>)
 8005b3e:	f00d f82d 	bl	8012b9c <iprintf>
 8005b42:	481b      	ldr	r0, [pc, #108]	; (8005bb0 <USBH_AUDIO_InterfaceInit+0xe8>)
 8005b44:	f00d f82a 	bl	8012b9c <iprintf>
 8005b48:	200a      	movs	r0, #10
 8005b4a:	f00d f83f 	bl	8012bcc <putchar>
    return USBH_FAIL;
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e1aa      	b.n	8005ea8 <USBH_AUDIO_InterfaceInit+0x3e0>
  }

  /* Initialize audio handler */
  USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 8005b52:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8005b56:	2100      	movs	r1, #0
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f00c fc39 	bl	80123d0 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fc20 	bl	80063a4 <USBH_AUDIO_FindAudioStreamingIN>
 8005b64:	4603      	mov	r3, r0
 8005b66:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fce4 	bl	8006536 <USBH_AUDIO_FindAudioStreamingOUT>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8005b72:	7afb      	ldrb	r3, [r7, #11]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d114      	bne.n	8005ba2 <USBH_AUDIO_InterfaceInit+0xda>
 8005b78:	7abb      	ldrb	r3, [r7, #10]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d111      	bne.n	8005ba2 <USBH_AUDIO_InterfaceInit+0xda>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
 8005b7e:	480a      	ldr	r0, [pc, #40]	; (8005ba8 <USBH_AUDIO_InterfaceInit+0xe0>)
 8005b80:	f00d f80c 	bl	8012b9c <iprintf>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4619      	mov	r1, r3
 8005b92:	4808      	ldr	r0, [pc, #32]	; (8005bb4 <USBH_AUDIO_InterfaceInit+0xec>)
 8005b94:	f00d f802 	bl	8012b9c <iprintf>
 8005b98:	200a      	movs	r0, #10
 8005b9a:	f00d f817 	bl	8012bcc <putchar>
    return USBH_FAIL;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e182      	b.n	8005ea8 <USBH_AUDIO_InterfaceInit+0x3e0>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	75fb      	strb	r3, [r7, #23]
 8005ba6:	e0ce      	b.n	8005d46 <USBH_AUDIO_InterfaceInit+0x27e>
 8005ba8:	080138bc 	.word	0x080138bc
 8005bac:	080138c8 	.word	0x080138c8
 8005bb0:	080138f0 	.word	0x080138f0
 8005bb4:	08013918 	.word	0x08013918
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 8005bb8:	7dfa      	ldrb	r2, [r7, #23]
 8005bba:	68f9      	ldr	r1, [r7, #12]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	440b      	add	r3, r1
 8005bc6:	333e      	adds	r3, #62	; 0x3e
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d156      	bne.n	8005c7c <USBH_AUDIO_InterfaceInit+0x1b4>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 8005bce:	7dfa      	ldrb	r2, [r7, #23]
 8005bd0:	68f9      	ldr	r1, [r7, #12]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	440b      	add	r3, r1
 8005bdc:	333a      	adds	r3, #58	; 0x3a
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	8aba      	ldrh	r2, [r7, #20]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d24a      	bcs.n	8005c7c <USBH_AUDIO_InterfaceInit+0x1b4>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 8005be6:	7dfa      	ldrb	r2, [r7, #23]
 8005be8:	68f9      	ldr	r1, [r7, #12]
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	440b      	add	r3, r1
 8005bf4:	333a      	adds	r3, #58	; 0x3a
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 8005bfa:	7dfa      	ldrb	r2, [r7, #23]
 8005bfc:	68f9      	ldr	r1, [r7, #12]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	440b      	add	r3, r1
 8005c08:	333d      	adds	r3, #61	; 0x3d
 8005c0a:	781a      	ldrb	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8005c12:	7dfa      	ldrb	r2, [r7, #23]
 8005c14:	68f9      	ldr	r1, [r7, #12]
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	440b      	add	r3, r1
 8005c20:	333c      	adds	r3, #60	; 0x3c
 8005c22:	781a      	ldrb	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 8005c2a:	7dfa      	ldrb	r2, [r7, #23]
 8005c2c:	68f9      	ldr	r1, [r7, #12]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	440b      	add	r3, r1
 8005c38:	3338      	adds	r3, #56	; 0x38
 8005c3a:	781a      	ldrb	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8005c42:	7dfa      	ldrb	r2, [r7, #23]
 8005c44:	68f9      	ldr	r1, [r7, #12]
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	440b      	add	r3, r1
 8005c50:	333a      	adds	r3, #58	; 0x3a
 8005c52:	881a      	ldrh	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8005c5a:	7dfa      	ldrb	r2, [r7, #23]
 8005c5c:	68f9      	ldr	r1, [r7, #12]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	440b      	add	r3, r1
 8005c68:	3340      	adds	r3, #64	; 0x40
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 8005c7c:	7dfa      	ldrb	r2, [r7, #23]
 8005c7e:	68f9      	ldr	r1, [r7, #12]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	440b      	add	r3, r1
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d156      	bne.n	8005d40 <USBH_AUDIO_InterfaceInit+0x278>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8005c92:	7dfa      	ldrb	r2, [r7, #23]
 8005c94:	68f9      	ldr	r1, [r7, #12]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	8a7a      	ldrh	r2, [r7, #18]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d24a      	bcs.n	8005d40 <USBH_AUDIO_InterfaceInit+0x278>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 8005caa:	7dfa      	ldrb	r2, [r7, #23]
 8005cac:	68f9      	ldr	r1, [r7, #12]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	440b      	add	r3, r1
 8005cb8:	3308      	adds	r3, #8
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 8005cbe:	7dfa      	ldrb	r2, [r7, #23]
 8005cc0:	68f9      	ldr	r1, [r7, #12]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	440b      	add	r3, r1
 8005ccc:	330b      	adds	r3, #11
 8005cce:	781a      	ldrb	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 8005cd6:	7dfa      	ldrb	r2, [r7, #23]
 8005cd8:	68f9      	ldr	r1, [r7, #12]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	440b      	add	r3, r1
 8005ce4:	330a      	adds	r3, #10
 8005ce6:	781a      	ldrb	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 8005cee:	7dfa      	ldrb	r2, [r7, #23]
 8005cf0:	68f9      	ldr	r1, [r7, #12]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3306      	adds	r3, #6
 8005cfe:	781a      	ldrb	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 8005d06:	7dfa      	ldrb	r2, [r7, #23]
 8005d08:	68f9      	ldr	r1, [r7, #12]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	440b      	add	r3, r1
 8005d14:	3308      	adds	r3, #8
 8005d16:	881a      	ldrh	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8005d1e:	7dfa      	ldrb	r2, [r7, #23]
 8005d20:	68f9      	ldr	r1, [r7, #12]
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	440b      	add	r3, r1
 8005d2c:	3340      	adds	r3, #64	; 0x40
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
 8005d42:	3301      	adds	r3, #1
 8005d44:	75fb      	strb	r3, [r7, #23]
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	f67f af35 	bls.w	8005bb8 <USBH_AUDIO_InterfaceInit+0xf0>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fcba 	bl	80066c8 <USBH_AUDIO_FindHIDControl>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <USBH_AUDIO_InterfaceInit+0x29a>
  {
    AUDIO_Handle->control.supported = 1U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  USBH_AUDIO_ParseCSDescriptors(phost);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fd3c 	bl	80067e0 <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d12e      	bne.n	8005dd0 <USBH_AUDIO_InterfaceInit+0x308>
  {
    USBH_AUDIO_BuildHeadphonePath(phost);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 ff98 	bl	8006ca8 <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f007 ff98 	bl	800dcb6 <USBH_AllocPipe>
 8005d86:	4603      	mov	r3, r0
 8005d88:	461a      	mov	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 8005dae:	9202      	str	r2, [sp, #8]
 8005db0:	2201      	movs	r2, #1
 8005db2:	9201      	str	r2, [sp, #4]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	4623      	mov	r3, r4
 8005db8:	4602      	mov	r2, r0
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f007 ff4c 	bl	800dc58 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->headphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f008 fa93 	bl	800e2f6 <USBH_LL_SetToggle>

  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d12e      	bne.n	8005e38 <USBH_AUDIO_InterfaceInit+0x370>
  {
    USBH_AUDIO_BuildMicrophonePath(phost);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 feda 	bl	8006b94 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f007 ff64 	bl	800dcb6 <USBH_AllocPipe>
 8005dee:	4603      	mov	r3, r0
 8005df0:	461a      	mov	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 8005e16:	9202      	str	r2, [sp, #8]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	9201      	str	r2, [sp, #4]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	4623      	mov	r3, r4
 8005e20:	4602      	mov	r2, r0
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f007 ff18 	bl	800dc58 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->microphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005e2e:	2200      	movs	r2, #0
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f008 fa5f 	bl	800e2f6 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d12b      	bne.n	8005e9a <USBH_AUDIO_InterfaceInit+0x3d2>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f007 ff33 	bl	800dcb6 <USBH_AllocPipe>
 8005e50:	4603      	mov	r3, r0
 8005e52:	461a      	mov	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 8005e78:	9202      	str	r2, [sp, #8]
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	9201      	str	r2, [sp, #4]
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	4623      	mov	r3, r4
 8005e82:	4602      	mov	r2, r0
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f007 fee7 	bl	800dc58 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_INTR,
                  AUDIO_Handle->control.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005e90:	2200      	movs	r2, #0
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f008 fa2e 	bl	800e2f6 <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd90      	pop	{r4, r7, pc}

08005eb0 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ebe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d011      	beq.n	8005ef4 <USBH_AUDIO_InterfaceDeInit+0x44>
  {
    USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f007 fedc 	bl	800dc96 <USBH_ClosePipe>
    USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f007 ff07 	bl	800dcfa <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d011      	beq.n	8005f22 <USBH_AUDIO_InterfaceDeInit+0x72>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f007 fec5 	bl	800dc96 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f007 fef0 	bl	800dcfa <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d011      	beq.n	8005f50 <USBH_AUDIO_InterfaceDeInit+0xa0>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f007 feae 	bl	800dc96 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f007 fed9 	bl	800dcfa <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if (phost->pActiveClass->pData)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f56:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00f      	beq.n	8005f80 <USBH_AUDIO_InterfaceDeInit+0xd0>
  {
    USBH_free(phost->pActiveClass->pData);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f66:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f00c fa19 	bl	80123a4 <free>
    phost->pActiveClass->pData = 0U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f78:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f9a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	2b06      	cmp	r3, #6
 8005fb2:	f200 80a8 	bhi.w	8006106 <USBH_AUDIO_ClassRequest+0x17a>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <USBH_AUDIO_ClassRequest+0x30>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005fd9 	.word	0x08005fd9
 8005fc0:	080060eb 	.word	0x080060eb
 8005fc4:	08005fd9 	.word	0x08005fd9
 8005fc8:	0800600f 	.word	0x0800600f
 8005fcc:	0800607b 	.word	0x0800607b
 8005fd0:	080060b3 	.word	0x080060b3
 8005fd4:	08006067 	.word	0x08006067
  {
    case AUDIO_REQ_INIT:
    case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d111      	bne.n	8006006 <USBH_AUDIO_ClassRequest+0x7a>
      {
        req_status = USBH_SetInterface(phost,
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005fe8:	2200      	movs	r2, #0
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f007 f967 	bl	800d2c0 <USBH_SetInterface>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 8086 	bne.w	800610a <USBH_AUDIO_ClassRequest+0x17e>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2204      	movs	r2, #4
 8006002:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006004:	e081      	b.n	800610a <USBH_AUDIO_ClassRequest+0x17e>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2204      	movs	r2, #4
 800600a:	701a      	strb	r2, [r3, #0]
      break;
 800600c:	e07d      	b.n	800610a <USBH_AUDIO_ClassRequest+0x17e>

    case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8006014:	2b01      	cmp	r3, #1
 8006016:	d11f      	bne.n	8006058 <USBH_AUDIO_ClassRequest+0xcc>
      {
        req_status = USBH_SetInterface(phost,
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800601e:	2200      	movs	r2, #0
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f007 f94c 	bl	800d2c0 <USBH_SetInterface>
 8006028:	4603      	mov	r3, r0
 800602a:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d16d      	bne.n	800610e <USBH_AUDIO_ClassRequest+0x182>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2207      	movs	r2, #7
 8006036:	701a      	strb	r2, [r3, #0]
          AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2206      	movs	r2, #6
 800603c:	705a      	strb	r2, [r3, #1]

          AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
          AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006056:	e05a      	b.n	800610e <USBH_AUDIO_ClassRequest+0x182>
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	2207      	movs	r2, #7
 800605c:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	2206      	movs	r2, #6
 8006062:	705a      	strb	r2, [r3, #1]
      break;
 8006064:	e053      	b.n	800610e <USBH_AUDIO_ClassRequest+0x182>

    case AUDIO_REQ_CS_REQUESTS:
      if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f930 	bl	80062cc <USBH_AUDIO_HandleCSRequest>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d14f      	bne.n	8006112 <USBH_AUDIO_ClassRequest+0x186>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2205      	movs	r2, #5
 8006076:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006078:	e04b      	b.n	8006112 <USBH_AUDIO_ClassRequest+0x186>

    case AUDIO_REQ_SET_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8006080:	2b01      	cmp	r3, #1
 8006082:	d112      	bne.n	80060aa <USBH_AUDIO_ClassRequest+0x11e>
      {
        req_status = USBH_SetInterface(phost,
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8006090:	461a      	mov	r2, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f007 f914 	bl	800d2c0 <USBH_SetInterface>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       AUDIO_Handle->microphone.AltSettings);

        if (req_status == USBH_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d139      	bne.n	8006116 <USBH_AUDIO_ClassRequest+0x18a>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2206      	movs	r2, #6
 80060a6:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80060a8:	e035      	b.n	8006116 <USBH_AUDIO_ClassRequest+0x18a>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2206      	movs	r2, #6
 80060ae:	701a      	strb	r2, [r3, #0]
      break;
 80060b0:	e031      	b.n	8006116 <USBH_AUDIO_ClassRequest+0x18a>
    case AUDIO_REQ_SET_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d112      	bne.n	80060e2 <USBH_AUDIO_ClassRequest+0x156>
      {
        req_status = USBH_SetInterface(phost,
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 80060c8:	461a      	mov	r2, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f007 f8f8 	bl	800d2c0 <USBH_SetInterface>
 80060d0:	4603      	mov	r3, r0
 80060d2:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       AUDIO_Handle->headphone.AltSettings);

        if (req_status == USBH_OK)
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d11f      	bne.n	800611a <USBH_AUDIO_ClassRequest+0x18e>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2202      	movs	r2, #2
 80060de:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80060e0:	e01b      	b.n	800611a <USBH_AUDIO_ClassRequest+0x18e>
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2202      	movs	r2, #2
 80060e6:	701a      	strb	r2, [r3, #0]
      break;
 80060e8:	e017      	b.n	800611a <USBH_AUDIO_ClassRequest+0x18e>
    case AUDIO_REQ_IDLE:
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2201      	movs	r2, #1
 80060ee:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f6:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80060fa:	2102      	movs	r1, #2
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	4798      	blx	r3
      status  = USBH_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006104:	e00a      	b.n	800611c <USBH_AUDIO_ClassRequest+0x190>

    default:
      break;
 8006106:	bf00      	nop
 8006108:	e008      	b.n	800611c <USBH_AUDIO_ClassRequest+0x190>
      break;
 800610a:	bf00      	nop
 800610c:	e006      	b.n	800611c <USBH_AUDIO_ClassRequest+0x190>
      break;
 800610e:	bf00      	nop
 8006110:	e004      	b.n	800611c <USBH_AUDIO_ClassRequest+0x190>
      break;
 8006112:	bf00      	nop
 8006114:	e002      	b.n	800611c <USBH_AUDIO_ClassRequest+0x190>
      break;
 8006116:	bf00      	nop
 8006118:	e000      	b.n	800611c <USBH_AUDIO_ClassRequest+0x190>
      break;
 800611a:	bf00      	nop
  }
  return status;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop

08006128 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af02      	add	r7, sp, #8
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	70fb      	strb	r3, [r7, #3]
 8006134:	4613      	mov	r3, r2
 8006136:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800613e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006146:	2301      	movs	r3, #1
 8006148:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 800614a:	2301      	movs	r3, #1
 800614c:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	3b04      	subs	r3, #4
 8006154:	2b04      	cmp	r3, #4
 8006156:	f200 80aa 	bhi.w	80062ae <USBH_AUDIO_CSRequest+0x186>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <USBH_AUDIO_CSRequest+0x38>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	080061bd 	.word	0x080061bd
 8006164:	08006203 	.word	0x08006203
 8006168:	08006175 	.word	0x08006175
 800616c:	08006263 	.word	0x08006263
 8006170:	080062a9 	.word	0x080062a9
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 8006174:	78fa      	ldrb	r2, [r7, #3]
 8006176:	2302      	movs	r3, #2
 8006178:	9301      	str	r3, [sp, #4]
 800617a:	78bb      	ldrb	r3, [r7, #2]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	2302      	movs	r3, #2
 8006180:	2106      	movs	r1, #6
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fed2 	bl	8006f2c <USBH_AC_GetCur>
 8006188:	4603      	mov	r3, r0
 800618a:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	2b01      	cmp	r3, #1
 8006190:	f000 808f 	beq.w	80062b2 <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	2204      	movs	r2, #4
 8006198:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80061a6:	3302      	adds	r3, #2
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	021b      	lsls	r3, r3, #8
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	4313      	orrs	r3, r2
 80061b0:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 80061b2:	897a      	ldrh	r2, [r7, #10]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 80061ba:	e07a      	b.n	80062b2 <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	2302      	movs	r3, #2
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	78bb      	ldrb	r3, [r7, #2]
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	2302      	movs	r3, #2
 80061c8:	2106      	movs	r1, #6
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 f879 	bl	80072c2 <USBH_AC_GetMin>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d06d      	beq.n	80062b6 <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2205      	movs	r2, #5
 80061de:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80061ec:	3302      	adds	r3, #2
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	4313      	orrs	r3, r2
 80061f6:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 80061f8:	897a      	ldrh	r2, [r7, #10]
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8006200:	e059      	b.n	80062b6 <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8006202:	78fa      	ldrb	r2, [r7, #3]
 8006204:	2302      	movs	r3, #2
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	78bb      	ldrb	r3, [r7, #2]
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2302      	movs	r3, #2
 800620e:	2106      	movs	r1, #6
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 ff24 	bl	800705e <USBH_AC_GetMax>
 8006216:	4603      	mov	r3, r0
 8006218:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d04c      	beq.n	80062ba <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2207      	movs	r2, #7
 8006224:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006232:	3302      	adds	r3, #2
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	b29b      	uxth	r3, r3
 800623a:	4313      	orrs	r3, r2
 800623c:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 800623e:	897a      	ldrh	r2, [r7, #10]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8006252:	429a      	cmp	r2, r3
 8006254:	d231      	bcs.n	80062ba <USBH_AUDIO_CSRequest+0x192>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800625c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 8006260:	e02b      	b.n	80062ba <USBH_AUDIO_CSRequest+0x192>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 8006262:	78fa      	ldrb	r2, [r7, #3]
 8006264:	2302      	movs	r3, #2
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	78bb      	ldrb	r3, [r7, #2]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	2302      	movs	r3, #2
 800626e:	2106      	movs	r1, #6
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 ff8d 	bl	8007190 <USBH_AC_GetRes>
 8006276:	4603      	mov	r3, r0
 8006278:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d01e      	beq.n	80062be <USBH_AUDIO_CSRequest+0x196>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	2208      	movs	r2, #8
 8006284:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006292:	3302      	adds	r3, #2
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	b29b      	uxth	r3, r3
 800629a:	4313      	orrs	r3, r2
 800629c:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 800629e:	89ba      	ldrh	r2, [r7, #12]
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 80062a6:	e00a      	b.n	80062be <USBH_AUDIO_CSRequest+0x196>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	75fb      	strb	r3, [r7, #23]
      break;
 80062ac:	e008      	b.n	80062c0 <USBH_AUDIO_CSRequest+0x198>

    default:
      break;
 80062ae:	bf00      	nop
 80062b0:	e006      	b.n	80062c0 <USBH_AUDIO_CSRequest+0x198>
      break;
 80062b2:	bf00      	nop
 80062b4:	e004      	b.n	80062c0 <USBH_AUDIO_CSRequest+0x198>
      break;
 80062b6:	bf00      	nop
 80062b8:	e002      	b.n	80062c0 <USBH_AUDIO_CSRequest+0x198>
      break;
 80062ba:	bf00      	nop
 80062bc:	e000      	b.n	80062c0 <USBH_AUDIO_CSRequest+0x198>
      break;
 80062be:	bf00      	nop
  }
  return status;
 80062c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop

080062cc <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 80062d8:	2301      	movs	r3, #1
 80062da:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80062f6:	461a      	mov	r2, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff ff15 	bl	8006128 <USBH_AUDIO_CSRequest>
 80062fe:	4603      	mov	r3, r0
 8006300:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8006302:	7bbb      	ldrb	r3, [r7, #14]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d01c      	beq.n	8006342 <USBH_AUDIO_HandleCSRequest+0x76>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800630e:	2b01      	cmp	r3, #1
 8006310:	d10c      	bne.n	800632c <USBH_AUDIO_HandleCSRequest+0x60>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	73fb      	strb	r3, [r7, #15]
 800632a:	e007      	b.n	800633c <USBH_AUDIO_HandleCSRequest+0x70>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8006332:	3b01      	subs	r3, #1
 8006334:	b2da      	uxtb	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2206      	movs	r2, #6
 8006340:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006354:	2301      	movs	r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800636c:	2b01      	cmp	r3, #1
 800636e:	d102      	bne.n	8006376 <USBH_AUDIO_Process+0x2a>
  {
    USBH_AUDIO_OutputStream(phost);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 f931 	bl	80075d8 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800637c:	2b01      	cmp	r3, #1
 800637e:	d102      	bne.n	8006386 <USBH_AUDIO_Process+0x3a>
  {
    USBH_AUDIO_InputStream(phost);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 f85f 	bl	8007444 <USBH_AUDIO_InputStream>
  }

  return status;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	bc80      	pop	{r7}
 80063a2:	4770      	bx	lr

080063a4 <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 80063ac:	2302      	movs	r3, #2
 80063ae:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]
 80063c6:	e0a7      	b.n	8006518 <USBH_AUDIO_FindAudioStreamingIN+0x174>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80063c8:	7bfa      	ldrb	r2, [r7, #15]
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	019b      	lsls	r3, r3, #6
 80063d0:	4413      	add	r3, r2
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	440b      	add	r3, r1
 80063d6:	f603 1345 	addw	r3, r3, #2373	; 0x945
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	f040 8098 	bne.w	8006512 <USBH_AUDIO_FindAudioStreamingIN+0x16e>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 80063e2:	7bfa      	ldrb	r2, [r7, #15]
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	019b      	lsls	r3, r3, #6
 80063ea:	4413      	add	r3, r2
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	440b      	add	r3, r1
 80063f0:	f603 1346 	addw	r3, r3, #2374	; 0x946
 80063f4:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	f040 808b 	bne.w	8006512 <USBH_AUDIO_FindAudioStreamingIN+0x16e>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 80063fc:	7bfa      	ldrb	r2, [r7, #15]
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	4613      	mov	r3, r2
 8006402:	019b      	lsls	r3, r3, #6
 8006404:	4413      	add	r3, r2
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	440b      	add	r3, r1
 800640a:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	b25b      	sxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	da7d      	bge.n	8006512 <USBH_AUDIO_FindAudioStreamingIN+0x16e>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006416:	7bfa      	ldrb	r2, [r7, #15]
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	019b      	lsls	r3, r3, #6
 800641e:	4413      	add	r3, r2
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	440b      	add	r3, r1
 8006424:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 8006428:	881b      	ldrh	r3, [r3, #0]
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 800642a:	2b00      	cmp	r3, #0
 800642c:	d071      	beq.n	8006512 <USBH_AUDIO_FindAudioStreamingIN+0x16e>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800642e:	7bf9      	ldrb	r1, [r7, #15]
 8006430:	7bba      	ldrb	r2, [r7, #14]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	019b      	lsls	r3, r3, #6
 8006438:	440b      	add	r3, r1
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	4403      	add	r3, r0
 800643e:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8006442:	7818      	ldrb	r0, [r3, #0]
 8006444:	68b9      	ldr	r1, [r7, #8]
 8006446:	4613      	mov	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	440b      	add	r3, r1
 8006450:	3306      	adds	r3, #6
 8006452:	4602      	mov	r2, r0
 8006454:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006456:	7bf9      	ldrb	r1, [r7, #15]
 8006458:	7bba      	ldrb	r2, [r7, #14]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	019b      	lsls	r3, r3, #6
 8006460:	440b      	add	r3, r1
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	4403      	add	r3, r0
 8006466:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 800646a:	8818      	ldrh	r0, [r3, #0]
 800646c:	68b9      	ldr	r1, [r7, #8]
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	440b      	add	r3, r1
 8006478:	3308      	adds	r3, #8
 800647a:	4602      	mov	r2, r0
 800647c:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800647e:	7bf9      	ldrb	r1, [r7, #15]
 8006480:	7bba      	ldrb	r2, [r7, #14]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	019b      	lsls	r3, r3, #6
 8006488:	440b      	add	r3, r1
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	4403      	add	r3, r0
 800648e:	f603 1342 	addw	r3, r3, #2370	; 0x942
 8006492:	7818      	ldrb	r0, [r3, #0]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	440b      	add	r3, r1
 80064a0:	330b      	adds	r3, #11
 80064a2:	4602      	mov	r2, r0
 80064a4:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 80064a6:	7bf9      	ldrb	r1, [r7, #15]
 80064a8:	7bba      	ldrb	r2, [r7, #14]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	019b      	lsls	r3, r3, #6
 80064b0:	440b      	add	r3, r1
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4403      	add	r3, r0
 80064b6:	f603 1343 	addw	r3, r3, #2371	; 0x943
 80064ba:	7818      	ldrb	r0, [r3, #0]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	440b      	add	r3, r1
 80064c8:	330a      	adds	r3, #10
 80064ca:	4602      	mov	r2, r0
 80064cc:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80064ce:	7bfa      	ldrb	r2, [r7, #15]
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	019b      	lsls	r3, r3, #6
 80064d6:	4413      	add	r3, r2
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	440b      	add	r3, r1
 80064dc:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	7bba      	ldrb	r2, [r7, #14]
 80064e4:	b298      	uxth	r0, r3
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	440b      	add	r3, r1
 80064f2:	330e      	adds	r3, #14
 80064f4:	4602      	mov	r2, r0
 80064f6:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 80064f8:	7bba      	ldrb	r2, [r7, #14]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	440b      	add	r3, r1
 8006506:	330c      	adds	r3, #12
 8006508:	2201      	movs	r2, #1
 800650a:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 800650c:	7bbb      	ldrb	r3, [r7, #14]
 800650e:	3301      	adds	r3, #1
 8006510:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	3301      	adds	r3, #1
 8006516:	73fb      	strb	r3, [r7, #15]
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	2b0e      	cmp	r3, #14
 800651c:	f67f af54 	bls.w	80063c8 <USBH_AUDIO_FindAudioStreamingIN+0x24>
      }
    }
  }

  if (alt_settings > 0U)
 8006520:	7bbb      	ldrb	r3, [r7, #14]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <USBH_AUDIO_FindAudioStreamingIN+0x186>
  {
    status = USBH_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	737b      	strb	r3, [r7, #13]
  }

  return status;
 800652a:	7b7b      	ldrb	r3, [r7, #13]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	bc80      	pop	{r7}
 8006534:	4770      	bx	lr

08006536 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 800653e:	2302      	movs	r3, #2
 8006540:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006548:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
 8006558:	e0a7      	b.n	80066aa <USBH_AUDIO_FindAudioStreamingOUT+0x174>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800655a:	7bfa      	ldrb	r2, [r7, #15]
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	019b      	lsls	r3, r3, #6
 8006562:	4413      	add	r3, r2
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	440b      	add	r3, r1
 8006568:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b01      	cmp	r3, #1
 8006570:	f040 8098 	bne.w	80066a4 <USBH_AUDIO_FindAudioStreamingOUT+0x16e>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8006574:	7bfa      	ldrb	r2, [r7, #15]
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4613      	mov	r3, r2
 800657a:	019b      	lsls	r3, r3, #6
 800657c:	4413      	add	r3, r2
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	440b      	add	r3, r1
 8006582:	f603 1346 	addw	r3, r3, #2374	; 0x946
 8006586:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006588:	2b02      	cmp	r3, #2
 800658a:	f040 808b 	bne.w	80066a4 <USBH_AUDIO_FindAudioStreamingOUT+0x16e>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800658e:	7bfa      	ldrb	r2, [r7, #15]
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	019b      	lsls	r3, r3, #6
 8006596:	4413      	add	r3, r2
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	440b      	add	r3, r1
 800659c:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	b25b      	sxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	db7d      	blt.n	80066a4 <USBH_AUDIO_FindAudioStreamingOUT+0x16e>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80065a8:	7bfa      	ldrb	r2, [r7, #15]
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	4613      	mov	r3, r2
 80065ae:	019b      	lsls	r3, r3, #6
 80065b0:	4413      	add	r3, r2
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	440b      	add	r3, r1
 80065b6:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 80065ba:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d071      	beq.n	80066a4 <USBH_AUDIO_FindAudioStreamingOUT+0x16e>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065c0:	7bf9      	ldrb	r1, [r7, #15]
 80065c2:	7bba      	ldrb	r2, [r7, #14]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	460b      	mov	r3, r1
 80065c8:	019b      	lsls	r3, r3, #6
 80065ca:	440b      	add	r3, r1
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	4403      	add	r3, r0
 80065d0:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 80065d4:	7818      	ldrb	r0, [r3, #0]
 80065d6:	68b9      	ldr	r1, [r7, #8]
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	440b      	add	r3, r1
 80065e2:	3338      	adds	r3, #56	; 0x38
 80065e4:	4602      	mov	r2, r0
 80065e6:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065e8:	7bf9      	ldrb	r1, [r7, #15]
 80065ea:	7bba      	ldrb	r2, [r7, #14]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	019b      	lsls	r3, r3, #6
 80065f2:	440b      	add	r3, r1
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	4403      	add	r3, r0
 80065f8:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 80065fc:	8818      	ldrh	r0, [r3, #0]
 80065fe:	68b9      	ldr	r1, [r7, #8]
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	440b      	add	r3, r1
 800660a:	333a      	adds	r3, #58	; 0x3a
 800660c:	4602      	mov	r2, r0
 800660e:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006610:	7bf9      	ldrb	r1, [r7, #15]
 8006612:	7bba      	ldrb	r2, [r7, #14]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	460b      	mov	r3, r1
 8006618:	019b      	lsls	r3, r3, #6
 800661a:	440b      	add	r3, r1
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	4403      	add	r3, r0
 8006620:	f603 1342 	addw	r3, r3, #2370	; 0x942
 8006624:	7818      	ldrb	r0, [r3, #0]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	440b      	add	r3, r1
 8006632:	333d      	adds	r3, #61	; 0x3d
 8006634:	4602      	mov	r2, r0
 8006636:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006638:	7bf9      	ldrb	r1, [r7, #15]
 800663a:	7bba      	ldrb	r2, [r7, #14]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	460b      	mov	r3, r1
 8006640:	019b      	lsls	r3, r3, #6
 8006642:	440b      	add	r3, r1
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	4403      	add	r3, r0
 8006648:	f603 1343 	addw	r3, r3, #2371	; 0x943
 800664c:	7818      	ldrb	r0, [r3, #0]
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	440b      	add	r3, r1
 800665a:	333c      	adds	r3, #60	; 0x3c
 800665c:	4602      	mov	r2, r0
 800665e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8006660:	7bfa      	ldrb	r2, [r7, #15]
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	4613      	mov	r3, r2
 8006666:	019b      	lsls	r3, r3, #6
 8006668:	4413      	add	r3, r2
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	440b      	add	r3, r1
 800666e:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	7bba      	ldrb	r2, [r7, #14]
 8006676:	b298      	uxth	r0, r3
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	440b      	add	r3, r1
 8006684:	3340      	adds	r3, #64	; 0x40
 8006686:	4602      	mov	r2, r0
 8006688:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 800668a:	7bba      	ldrb	r2, [r7, #14]
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	440b      	add	r3, r1
 8006698:	333e      	adds	r3, #62	; 0x3e
 800669a:	2201      	movs	r2, #1
 800669c:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	3301      	adds	r3, #1
 80066a2:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	3301      	adds	r3, #1
 80066a8:	73fb      	strb	r3, [r7, #15]
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	2b0e      	cmp	r3, #14
 80066ae:	f67f af54 	bls.w	800655a <USBH_AUDIO_FindAudioStreamingOUT+0x24>
      }
    }
  }

  if (alt_settings > 0U)
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <USBH_AUDIO_FindAudioStreamingOUT+0x186>
  {
    status = USBH_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	737b      	strb	r3, [r7, #13]
  }

  return status;
 80066bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr

080066c8 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 80066d0:	2302      	movs	r3, #2
 80066d2:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066da:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 80066e2:	23ff      	movs	r3, #255	; 0xff
 80066e4:	2201      	movs	r2, #1
 80066e6:	2101      	movs	r1, #1
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f006 f819 	bl	800c720 <USBH_FindInterface>
 80066ee:	4603      	mov	r3, r0
 80066f0:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2bff      	cmp	r3, #255	; 0xff
 80066f6:	d002      	beq.n	80066fe <USBH_AUDIO_FindHIDControl+0x36>
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	2b0e      	cmp	r3, #14
 80066fc:	d901      	bls.n	8006702 <USBH_AUDIO_FindHIDControl+0x3a>
  {
    return USBH_FAIL;
 80066fe:	2302      	movs	r3, #2
 8006700:	e069      	b.n	80067d6 <USBH_AUDIO_FindHIDControl+0x10e>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006702:	2300      	movs	r3, #0
 8006704:	73fb      	strb	r3, [r7, #15]
 8006706:	e062      	b.n	80067ce <USBH_AUDIO_FindHIDControl+0x106>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8006708:	7bfa      	ldrb	r2, [r7, #15]
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	4613      	mov	r3, r2
 800670e:	019b      	lsls	r3, r3, #6
 8006710:	4413      	add	r3, r2
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	440b      	add	r3, r1
 8006716:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b03      	cmp	r3, #3
 800671e:	d153      	bne.n	80067c8 <USBH_AUDIO_FindHIDControl+0x100>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006720:	7bfa      	ldrb	r2, [r7, #15]
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	4613      	mov	r3, r2
 8006726:	019b      	lsls	r3, r3, #6
 8006728:	4413      	add	r3, r2
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	440b      	add	r3, r1
 800672e:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 8006732:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8006734:	2b00      	cmp	r3, #0
 8006736:	d047      	beq.n	80067c8 <USBH_AUDIO_FindHIDControl+0x100>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 8006738:	7bfa      	ldrb	r2, [r7, #15]
 800673a:	6879      	ldr	r1, [r7, #4]
 800673c:	4613      	mov	r3, r2
 800673e:	019b      	lsls	r3, r3, #6
 8006740:	4413      	add	r3, r2
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	440b      	add	r3, r1
 8006746:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	b25b      	sxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	da3a      	bge.n	80067c8 <USBH_AUDIO_FindHIDControl+0x100>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006752:	7bfa      	ldrb	r2, [r7, #15]
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	4613      	mov	r3, r2
 8006758:	019b      	lsls	r3, r3, #6
 800675a:	4413      	add	r3, r2
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	440b      	add	r3, r1
 8006760:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8006764:	781a      	ldrb	r2, [r3, #0]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800676c:	7bfa      	ldrb	r2, [r7, #15]
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	4613      	mov	r3, r2
 8006772:	019b      	lsls	r3, r3, #6
 8006774:	4413      	add	r3, r2
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	440b      	add	r3, r1
 800677a:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 800677e:	881a      	ldrh	r2, [r3, #0]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006786:	7bfa      	ldrb	r2, [r7, #15]
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	4613      	mov	r3, r2
 800678c:	019b      	lsls	r3, r3, #6
 800678e:	4413      	add	r3, r2
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	440b      	add	r3, r1
 8006794:	f603 1342 	addw	r3, r3, #2370	; 0x942
 8006798:	781a      	ldrb	r2, [r3, #0]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80067a0:	7bfa      	ldrb	r2, [r7, #15]
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	4613      	mov	r3, r2
 80067a6:	019b      	lsls	r3, r3, #6
 80067a8:	4413      	add	r3, r2
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	440b      	add	r3, r1
 80067ae:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 80067b2:	781a      	ldrb	r2, [r3, #0]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	73bb      	strb	r3, [r7, #14]
        break;
 80067c6:	e005      	b.n	80067d4 <USBH_AUDIO_FindHIDControl+0x10c>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	3301      	adds	r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	2b0e      	cmp	r3, #14
 80067d2:	d999      	bls.n	8006708 <USBH_AUDIO_FindHIDControl+0x40>
      }
    }
  }

  return status;
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067fa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	331c      	adds	r3, #28
 8006806:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 8006808:	2309      	movs	r3, #9
 800680a:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2200      	movs	r2, #0
 8006810:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2200      	movs	r2, #0
 8006818:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	2200      	movs	r2, #0
 8006820:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	2200      	movs	r2, #0
 8006828:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 800682c:	e04e      	b.n	80068cc <USBH_AUDIO_ParseCSDescriptors+0xec>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800682e:	f107 030c 	add.w	r3, r7, #12
 8006832:	4619      	mov	r1, r3
 8006834:	69b8      	ldr	r0, [r7, #24]
 8006836:	f006 ff51 	bl	800d6dc <USBH_GetNextDesc>
 800683a:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	2b04      	cmp	r3, #4
 8006842:	d002      	beq.n	800684a <USBH_AUDIO_ParseCSDescriptors+0x6a>
 8006844:	2b24      	cmp	r3, #36	; 0x24
 8006846:	d00f      	beq.n	8006868 <USBH_AUDIO_ParseCSDescriptors+0x88>
 8006848:	e03f      	b.n	80068ca <USBH_AUDIO_ParseCSDescriptors+0xea>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	789b      	ldrb	r3, [r3, #2]
 800684e:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	78db      	ldrb	r3, [r3, #3]
 8006854:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 8006856:	7bfa      	ldrb	r2, [r7, #15]
 8006858:	7dbb      	ldrb	r3, [r7, #22]
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f005 ffa5 	bl	800c7ac <USBH_FindInterfaceIndex>
 8006862:	4603      	mov	r3, r0
 8006864:	75fb      	strb	r3, [r7, #23]
        break;
 8006866:	e031      	b.n	80068cc <USBH_AUDIO_ParseCSDescriptors+0xec>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 393a 	ldrb.w	r3, [r3, #2362]	; 0x93a
 800686e:	7dba      	ldrb	r2, [r7, #22]
 8006870:	429a      	cmp	r2, r3
 8006872:	d82b      	bhi.n	80068cc <USBH_AUDIO_ParseCSDescriptors+0xec>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	2bff      	cmp	r3, #255	; 0xff
 8006878:	d002      	beq.n	8006880 <USBH_AUDIO_ParseCSDescriptors+0xa0>
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	2b0e      	cmp	r3, #14
 800687e:	d912      	bls.n	80068a6 <USBH_AUDIO_ParseCSDescriptors+0xc6>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
 8006880:	4818      	ldr	r0, [pc, #96]	; (80068e4 <USBH_AUDIO_ParseCSDescriptors+0x104>)
 8006882:	f00c f98b 	bl	8012b9c <iprintf>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4619      	mov	r1, r3
 8006894:	4814      	ldr	r0, [pc, #80]	; (80068e8 <USBH_AUDIO_ParseCSDescriptors+0x108>)
 8006896:	f00c f981 	bl	8012b9c <iprintf>
 800689a:	200a      	movs	r0, #10
 800689c:	f00c f996 	bl	8012bcc <putchar>
            status = USBH_FAIL;
 80068a0:	2302      	movs	r3, #2
 80068a2:	77fb      	strb	r3, [r7, #31]
 80068a4:	e010      	b.n	80068c8 <USBH_AUDIO_ParseCSDescriptors+0xe8>
          }
          else
          {

            ParseCSDescriptors(&AUDIO_Handle->class_desc,
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80068ac:	7dfa      	ldrb	r2, [r7, #23]
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4613      	mov	r3, r2
 80068b2:	019b      	lsls	r3, r3, #6
 80068b4:	4413      	add	r3, r2
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	440b      	add	r3, r1
 80068ba:	f603 1346 	addw	r3, r3, #2374	; 0x946
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	4619      	mov	r1, r3
 80068c4:	f000 f812 	bl	80068ec <ParseCSDescriptors>
                               phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                               (uint8_t *)pdesc);
          }
        }
        break;
 80068c8:	e000      	b.n	80068cc <USBH_AUDIO_ParseCSDescriptors+0xec>

      default:
        break;
 80068ca:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8b3 2938 	ldrh.w	r2, [r3, #2360]	; 0x938
 80068d2:	89bb      	ldrh	r3, [r7, #12]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d8aa      	bhi.n	800682e <USBH_AUDIO_ParseCSDescriptors+0x4e>
    }
  }

  return status;
 80068d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3720      	adds	r7, #32
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	080138bc 	.word	0x080138bc
 80068e8:	08013940 	.word	0x08013940

080068ec <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	460b      	mov	r3, r1
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 80068fa:	7afb      	ldrb	r3, [r7, #11]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d163      	bne.n	80069c8 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3302      	adds	r3, #2
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	3b01      	subs	r3, #1
 8006908:	2b05      	cmp	r3, #5
 800690a:	f200 8081 	bhi.w	8006a10 <ParseCSDescriptors+0x124>
 800690e:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <ParseCSDescriptors+0x28>)
 8006910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006914:	0800692d 	.word	0x0800692d
 8006918:	08006935 	.word	0x08006935
 800691c:	08006951 	.word	0x08006951
 8006920:	080069ab 	.word	0x080069ab
 8006924:	0800698d 	.word	0x0800698d
 8006928:	0800696f 	.word	0x0800696f
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	601a      	str	r2, [r3, #0]
        break;
 8006932:	e070      	b.n	8006a16 <ParseCSDescriptors+0x12a>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	b291      	uxth	r1, r2
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	605a      	str	r2, [r3, #4]
        break;
 800694e:	e062      	b.n	8006a16 <ParseCSDescriptors+0x12a>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	b291      	uxth	r1, r2
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	3304      	adds	r3, #4
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	605a      	str	r2, [r3, #4]
        break;
 800696c:	e053      	b.n	8006a16 <ParseCSDescriptors+0x12a>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8006974:	1c5a      	adds	r2, r3, #1
 8006976:	b291      	uxth	r1, r2
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	3308      	adds	r3, #8
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	605a      	str	r2, [r3, #4]
        break;
 800698a:	e044      	b.n	8006a16 <ParseCSDescriptors+0x12a>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	b291      	uxth	r1, r2
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	3310      	adds	r3, #16
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	605a      	str	r2, [r3, #4]
        break;
 80069a8:	e035      	b.n	8006a16 <ParseCSDescriptors+0x12a>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	b291      	uxth	r1, r2
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	330c      	adds	r3, #12
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	605a      	str	r2, [r3, #4]
        break;
 80069c6:	e026      	b.n	8006a16 <ParseCSDescriptors+0x12a>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 80069c8:	7afb      	ldrb	r3, [r7, #11]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d122      	bne.n	8006a14 <ParseCSDescriptors+0x128>
    {
      switch (pdesc[2])
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3302      	adds	r3, #2
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d002      	beq.n	80069de <ParseCSDescriptors+0xf2>
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d00a      	beq.n	80069f2 <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 80069dc:	e01b      	b.n	8006a16 <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	330a      	adds	r3, #10
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	4413      	add	r3, r2
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	605a      	str	r2, [r3, #4]
          break;
 80069f0:	e011      	b.n	8006a16 <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	b291      	uxth	r1, r2
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	330a      	adds	r3, #10
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	4413      	add	r3, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	609a      	str	r2, [r3, #8]
          break;
 8006a0e:	e002      	b.n	8006a16 <ParseCSDescriptors+0x12a>
        break;
 8006a10:	bf00      	nop
 8006a12:	e000      	b.n	8006a16 <ParseCSDescriptors+0x12a>
      }
    }
 8006a14:	bf00      	nop
  }

  return USBH_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop

08006a24 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a36:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]
 8006a42:	e01b      	b.n	8006a7c <USBH_AUDIO_FindLinkedUnit+0x58>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	3322      	adds	r3, #34	; 0x22
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	791b      	ldrb	r3, [r3, #4]
 8006a52:	78fa      	ldrb	r2, [r7, #3]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d10e      	bne.n	8006a76 <USBH_AUDIO_FindLinkedUnit+0x52>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	3322      	adds	r3, #34	; 0x22
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	78db      	ldrb	r3, [r3, #3]
 8006a66:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	041a      	lsls	r2, r3, #16
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006a74:	e089      	b.n	8006b8a <USBH_AUDIO_FindLinkedUnit+0x166>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d3dc      	bcc.n	8006a44 <USBH_AUDIO_FindLinkedUnit+0x20>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73fb      	strb	r3, [r7, #15]
 8006a8e:	e026      	b.n	8006ade <USBH_AUDIO_FindLinkedUnit+0xba>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	3326      	adds	r3, #38	; 0x26
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	795b      	ldrb	r3, [r3, #5]
 8006a9e:	78fa      	ldrb	r2, [r7, #3]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d009      	beq.n	8006ab8 <USBH_AUDIO_FindLinkedUnit+0x94>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	3326      	adds	r3, #38	; 0x26
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8006ab2:	78fa      	ldrb	r2, [r7, #3]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d10f      	bne.n	8006ad8 <USBH_AUDIO_FindLinkedUnit+0xb4>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	3326      	adds	r3, #38	; 0x26
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	78db      	ldrb	r3, [r3, #3]
 8006ac6:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	041b      	lsls	r3, r3, #16
 8006acc:	461a      	mov	r2, r3
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ad6:	e058      	b.n	8006b8a <USBH_AUDIO_FindLinkedUnit+0x166>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	3301      	adds	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d3d1      	bcc.n	8006a90 <USBH_AUDIO_FindLinkedUnit+0x6c>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8006aec:	2300      	movs	r3, #0
 8006aee:	73fb      	strb	r3, [r7, #15]
 8006af0:	e01c      	b.n	8006b2c <USBH_AUDIO_FindLinkedUnit+0x108>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	332a      	adds	r3, #42	; 0x2a
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	795b      	ldrb	r3, [r3, #5]
 8006b00:	78fa      	ldrb	r2, [r7, #3]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d10f      	bne.n	8006b26 <USBH_AUDIO_FindLinkedUnit+0x102>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	332a      	adds	r3, #42	; 0x2a
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	78db      	ldrb	r3, [r3, #3]
 8006b14:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8006b16:	78fb      	ldrb	r3, [r7, #3]
 8006b18:	041b      	lsls	r3, r3, #16
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8006b24:	e031      	b.n	8006b8a <USBH_AUDIO_FindLinkedUnit+0x166>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d3db      	bcc.n	8006af2 <USBH_AUDIO_FindLinkedUnit+0xce>
    }
  }

  /* Find OT Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]
 8006b3e:	e01c      	b.n	8006b7a <USBH_AUDIO_FindLinkedUnit+0x156>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	331e      	adds	r3, #30
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	79db      	ldrb	r3, [r3, #7]
 8006b4e:	78fa      	ldrb	r2, [r7, #3]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d10f      	bne.n	8006b74 <USBH_AUDIO_FindLinkedUnit+0x150>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	331e      	adds	r3, #30
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	78db      	ldrb	r3, [r3, #3]
 8006b62:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	041b      	lsls	r3, r3, #16
 8006b68:	461a      	mov	r2, r3
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006b72:	e00a      	b.n	8006b8a <USBH_AUDIO_FindLinkedUnit+0x166>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	3301      	adds	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d3db      	bcc.n	8006b40 <USBH_AUDIO_FindLinkedUnit+0x11c>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006baa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	75bb      	strb	r3, [r7, #22]
 8006bb6:	e02c      	b.n	8006c12 <USBH_AUDIO_BuildMicrophonePath+0x7e>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 8006bb8:	7dbb      	ldrb	r3, [r7, #22]
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	331a      	adds	r3, #26
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	791b      	ldrb	r3, [r3, #4]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	7dbb      	ldrb	r3, [r7, #22]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	331a      	adds	r3, #26
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	795b      	ldrb	r3, [r3, #5]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	021b      	lsls	r3, r3, #8
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	f240 2201 	movw	r2, #513	; 0x201
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d112      	bne.n	8006c0c <USBH_AUDIO_BuildMicrophonePath+0x78>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8006be6:	7dbb      	ldrb	r3, [r7, #22]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	331a      	adds	r3, #26
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	78db      	ldrb	r3, [r3, #3]
 8006bf4:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8006bf6:	7dbb      	ldrb	r3, [r7, #22]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	331a      	adds	r3, #26
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	79da      	ldrb	r2, [r3, #7]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 8006c0a:	e009      	b.n	8006c20 <USBH_AUDIO_BuildMicrophonePath+0x8c>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006c0c:	7dbb      	ldrb	r3, [r7, #22]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	75bb      	strb	r3, [r7, #22]
 8006c12:	7dbb      	ldrb	r3, [r7, #22]
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d3cb      	bcc.n	8006bb8 <USBH_AUDIO_BuildMicrophonePath+0x24>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff fefd 	bl	8006a24 <USBH_AUDIO_FindLinkedUnit>
 8006c2a:	60f8      	str	r0, [r7, #12]

    if (!value)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <USBH_AUDIO_BuildMicrophonePath+0xa2>
    {
      return USBH_FAIL;
 8006c32:	2302      	movs	r3, #2
 8006c34:	e034      	b.n	8006ca0 <USBH_AUDIO_BuildMicrophonePath+0x10c>
    }

    Index = (uint8_t)(value & 0xFFU);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	0a1b      	lsrs	r3, r3, #8
 8006c3e:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	0c1b      	lsrs	r3, r3, #16
 8006c44:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8006c46:	7abb      	ldrb	r3, [r7, #10]
 8006c48:	3b03      	subs	r3, #3
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d81e      	bhi.n	8006c8c <USBH_AUDIO_BuildMicrophonePath+0xf8>
 8006c4e:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <USBH_AUDIO_BuildMicrophonePath+0xc0>)
 8006c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c54:	08006c83 	.word	0x08006c83
 8006c58:	08006c6f 	.word	0x08006c6f
 8006c5c:	08006c79 	.word	0x08006c79
 8006c60:	08006c65 	.word	0x08006c65
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	7afa      	ldrb	r2, [r7, #11]
 8006c68:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 8006c6c:	e011      	b.n	8006c92 <USBH_AUDIO_BuildMicrophonePath+0xfe>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	7afa      	ldrb	r2, [r7, #11]
 8006c72:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 8006c76:	e00c      	b.n	8006c92 <USBH_AUDIO_BuildMicrophonePath+0xfe>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	7afa      	ldrb	r2, [r7, #11]
 8006c7c:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 8006c80:	e007      	b.n	8006c92 <USBH_AUDIO_BuildMicrophonePath+0xfe>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	7afa      	ldrb	r2, [r7, #11]
 8006c86:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 8006c8a:	e002      	b.n	8006c92 <USBH_AUDIO_BuildMicrophonePath+0xfe>

      default:
        ret = USBH_FAIL;
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	757b      	strb	r3, [r7, #21]
        break;
 8006c90:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8006c92:	7abb      	ldrb	r3, [r7, #10]
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d002      	beq.n	8006c9e <USBH_AUDIO_BuildMicrophonePath+0x10a>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1c0      	bne.n	8006c20 <USBH_AUDIO_BuildMicrophonePath+0x8c>

  return ret;
 8006c9e:	7d7b      	ldrb	r3, [r7, #21]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cbe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	757b      	strb	r3, [r7, #21]
 8006cca:	e02c      	b.n	8006d26 <USBH_AUDIO_BuildHeadphonePath+0x7e>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 8006ccc:	7d7b      	ldrb	r3, [r7, #21]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	331a      	adds	r3, #26
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	791b      	ldrb	r3, [r3, #4]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	7d7b      	ldrb	r3, [r7, #21]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	331a      	adds	r3, #26
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	795b      	ldrb	r3, [r3, #5]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	f240 1201 	movw	r2, #257	; 0x101
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d112      	bne.n	8006d20 <USBH_AUDIO_BuildHeadphonePath+0x78>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8006cfa:	7d7b      	ldrb	r3, [r7, #21]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	331a      	adds	r3, #26
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	78db      	ldrb	r3, [r3, #3]
 8006d08:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8006d0a:	7d7b      	ldrb	r3, [r7, #21]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	331a      	adds	r3, #26
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	79da      	ldrb	r2, [r3, #7]
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 8006d1e:	e009      	b.n	8006d34 <USBH_AUDIO_BuildHeadphonePath+0x8c>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006d20:	7d7b      	ldrb	r3, [r7, #21]
 8006d22:	3301      	adds	r3, #1
 8006d24:	757b      	strb	r3, [r7, #21]
 8006d26:	7d7b      	ldrb	r3, [r7, #21]
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d3cb      	bcc.n	8006ccc <USBH_AUDIO_BuildHeadphonePath+0x24>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8006d34:	2300      	movs	r3, #0
 8006d36:	75bb      	strb	r3, [r7, #22]
 8006d38:	e011      	b.n	8006d5e <USBH_AUDIO_BuildHeadphonePath+0xb6>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 8006d3a:	7dbb      	ldrb	r3, [r7, #22]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	3317      	adds	r3, #23
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	4413      	add	r3, r2
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	78db      	ldrb	r3, [r3, #3]
 8006d48:	7dfa      	ldrb	r2, [r7, #23]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d104      	bne.n	8006d58 <USBH_AUDIO_BuildHeadphonePath+0xb0>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	7dba      	ldrb	r2, [r7, #22]
 8006d52:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 8006d56:	e009      	b.n	8006d6c <USBH_AUDIO_BuildHeadphonePath+0xc4>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8006d58:	7dbb      	ldrb	r3, [r7, #22]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	75bb      	strb	r3, [r7, #22]
 8006d5e:	7dbb      	ldrb	r3, [r7, #22]
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d3e6      	bcc.n	8006d3a <USBH_AUDIO_BuildHeadphonePath+0x92>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff fe57 	bl	8006a24 <USBH_AUDIO_FindLinkedUnit>
 8006d76:	60f8      	str	r0, [r7, #12]

    if (!value)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <USBH_AUDIO_BuildHeadphonePath+0xda>
    {
      return USBH_FAIL;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	e053      	b.n	8006e2a <USBH_AUDIO_BuildHeadphonePath+0x182>
    }

    Index = (uint8_t)(value & 0xFFU);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	0a1b      	lsrs	r3, r3, #8
 8006d8a:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	0c1b      	lsrs	r3, r3, #16
 8006d90:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8006d92:	7afb      	ldrb	r3, [r7, #11]
 8006d94:	3b03      	subs	r3, #3
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d83c      	bhi.n	8006e14 <USBH_AUDIO_BuildHeadphonePath+0x16c>
 8006d9a:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <USBH_AUDIO_BuildHeadphonePath+0xf8>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006dcf 	.word	0x08006dcf
 8006da4:	08006dbb 	.word	0x08006dbb
 8006da8:	08006dc5 	.word	0x08006dc5
 8006dac:	08006db1 	.word	0x08006db1
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	7dba      	ldrb	r2, [r7, #22]
 8006db4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 8006db8:	e030      	b.n	8006e1c <USBH_AUDIO_BuildHeadphonePath+0x174>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	7dba      	ldrb	r2, [r7, #22]
 8006dbe:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 8006dc2:	e02b      	b.n	8006e1c <USBH_AUDIO_BuildHeadphonePath+0x174>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	7dba      	ldrb	r2, [r7, #22]
 8006dc8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 8006dcc:	e026      	b.n	8006e1c <USBH_AUDIO_BuildHeadphonePath+0x174>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	7dba      	ldrb	r2, [r7, #22]
 8006dd2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 8006dd6:	7dbb      	ldrb	r3, [r7, #22]
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d818      	bhi.n	8006e0e <USBH_AUDIO_BuildHeadphonePath+0x166>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 8006ddc:	7dbb      	ldrb	r3, [r7, #22]
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	331e      	adds	r3, #30
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	791b      	ldrb	r3, [r3, #4]
 8006dea:	4619      	mov	r1, r3
 8006dec:	7dbb      	ldrb	r3, [r7, #22]
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	331e      	adds	r3, #30
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	795b      	ldrb	r3, [r3, #5]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	430b      	orrs	r3, r1
 8006e02:	f240 1203 	movw	r2, #259	; 0x103
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d007      	beq.n	8006e1a <USBH_AUDIO_BuildHeadphonePath+0x172>
          {
            return  USBH_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e00d      	b.n	8006e2a <USBH_AUDIO_BuildHeadphonePath+0x182>
          }
        }
        else
        {
          ret = USBH_FAIL;
 8006e0e:	2302      	movs	r3, #2
 8006e10:	753b      	strb	r3, [r7, #20]
        }
        break;
 8006e12:	e002      	b.n	8006e1a <USBH_AUDIO_BuildHeadphonePath+0x172>

      default:
        ret = USBH_FAIL;
 8006e14:	2302      	movs	r3, #2
 8006e16:	753b      	strb	r3, [r7, #20]
        break;
 8006e18:	e000      	b.n	8006e1c <USBH_AUDIO_BuildHeadphonePath+0x174>
        break;
 8006e1a:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8006e1c:	7afb      	ldrb	r3, [r7, #11]
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d002      	beq.n	8006e28 <USBH_AUDIO_BuildHeadphonePath+0x180>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1a1      	bne.n	8006d6c <USBH_AUDIO_BuildHeadphonePath+0xc4>

  return ret;
 8006e28:	7d3b      	ldrb	r3, [r7, #20]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop

08006e34 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	4608      	mov	r0, r1
 8006e3e:	4611      	mov	r1, r2
 8006e40:	461a      	mov	r2, r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	70fb      	strb	r3, [r7, #3]
 8006e46:	460b      	mov	r3, r1
 8006e48:	70bb      	strb	r3, [r7, #2]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	82fb      	strh	r3, [r7, #22]
 8006e52:	2300      	movs	r3, #0
 8006e54:	82bb      	strh	r3, [r7, #20]
 8006e56:	2300      	movs	r3, #0
 8006e58:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e60:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d002      	beq.n	8006e78 <USBH_AC_SetCur+0x44>
 8006e72:	2b06      	cmp	r3, #6
 8006e74:	d018      	beq.n	8006ea8 <USBH_AC_SetCur+0x74>
 8006e76:	e035      	b.n	8006ee4 <USBH_AC_SetCur+0xb0>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7c:	78db      	ldrb	r3, [r3, #3]
 8006e7e:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006e80:	2300      	movs	r3, #0
 8006e82:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006e84:	7afb      	ldrb	r3, [r7, #11]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	021b      	lsls	r3, r3, #8
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	7abb      	ldrb	r3, [r7, #10]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	4313      	orrs	r3, r2
 8006e92:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e98:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	827b      	strh	r3, [r7, #18]
      break;
 8006ea6:	e020      	b.n	8006eea <USBH_AC_SetCur+0xb6>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006ea8:	78bb      	ldrb	r3, [r7, #2]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	3322      	adds	r3, #34	; 0x22
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	78db      	ldrb	r3, [r3, #3]
 8006eb6:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006eb8:	2300      	movs	r3, #0
 8006eba:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8006ebc:	7afb      	ldrb	r3, [r7, #11]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	021b      	lsls	r3, r3, #8
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	7abb      	ldrb	r3, [r7, #10]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006ecc:	787b      	ldrb	r3, [r7, #1]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	021b      	lsls	r3, r3, #8
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	4313      	orrs	r3, r2
 8006edc:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ee0:	827b      	strh	r3, [r7, #18]
      break;
 8006ee2:	e002      	b.n	8006eea <USBH_AC_SetCur+0xb6>

    default:
      ret = USBH_FAIL;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	747b      	strb	r3, [r7, #17]
      break;
 8006ee8:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006eea:	7c7b      	ldrb	r3, [r7, #17]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <USBH_AC_SetCur+0xc0>
  {
    return ret;
 8006ef0:	7c7b      	ldrb	r3, [r7, #17]
 8006ef2:	e017      	b.n	8006f24 <USBH_AC_SetCur+0xf0>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2221      	movs	r2, #33	; 0x21
 8006ef8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	8afa      	ldrh	r2, [r7, #22]
 8006f04:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	8aba      	ldrh	r2, [r7, #20]
 8006f0a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	8a7a      	ldrh	r2, [r7, #18]
 8006f10:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006f18:	8a7a      	ldrh	r2, [r7, #18]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f006 fbf7 	bl	800d710 <USBH_CtlReq>
 8006f22:	4603      	mov	r3, r0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	4608      	mov	r0, r1
 8006f36:	4611      	mov	r1, r2
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	70fb      	strb	r3, [r7, #3]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	70bb      	strb	r3, [r7, #2]
 8006f42:	4613      	mov	r3, r2
 8006f44:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	82fb      	strh	r3, [r7, #22]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	82bb      	strh	r3, [r7, #20]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	743b      	strb	r3, [r7, #16]
 8006f56:	2300      	movs	r3, #0
 8006f58:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f60:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	2b06      	cmp	r3, #6
 8006f70:	d01e      	beq.n	8006fb0 <USBH_AC_GetCur+0x84>
 8006f72:	2b06      	cmp	r3, #6
 8006f74:	dc4f      	bgt.n	8007016 <USBH_AC_GetCur+0xea>
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d002      	beq.n	8006f80 <USBH_AC_GetCur+0x54>
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d036      	beq.n	8006fec <USBH_AC_GetCur+0xc0>
 8006f7e:	e04a      	b.n	8007016 <USBH_AC_GetCur+0xea>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f84:	78db      	ldrb	r3, [r3, #3]
 8006f86:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006f8c:	7c3b      	ldrb	r3, [r7, #16]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fa0:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006faa:	2301      	movs	r3, #1
 8006fac:	827b      	strh	r3, [r7, #18]
      break;
 8006fae:	e035      	b.n	800701c <USBH_AC_GetCur+0xf0>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006fb0:	78bb      	ldrb	r3, [r7, #2]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	3322      	adds	r3, #34	; 0x22
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	78db      	ldrb	r3, [r3, #3]
 8006fbe:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006fc4:	7c3b      	ldrb	r3, [r7, #16]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006fd4:	787b      	ldrb	r3, [r7, #1]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	021b      	lsls	r3, r3, #8
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fe8:	827b      	strh	r3, [r7, #18]
      break;
 8006fea:	e017      	b.n	800701c <USBH_AC_GetCur+0xf0>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ff2:	78db      	ldrb	r3, [r3, #3]
 8006ff4:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006ffa:	7c3b      	ldrb	r3, [r7, #16]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	021b      	lsls	r3, r3, #8
 8007000:	b29a      	uxth	r2, r3
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	b29b      	uxth	r3, r3
 8007006:	4313      	orrs	r3, r2
 8007008:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800700a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800700e:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007010:	2301      	movs	r3, #1
 8007012:	827b      	strh	r3, [r7, #18]
      break;
 8007014:	e002      	b.n	800701c <USBH_AC_GetCur+0xf0>

    default:
      ret = USBH_FAIL;
 8007016:	2302      	movs	r3, #2
 8007018:	747b      	strb	r3, [r7, #17]
      break;
 800701a:	bf00      	nop
  }

  if (ret != USBH_OK)
 800701c:	7c7b      	ldrb	r3, [r7, #17]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <USBH_AC_GetCur+0xfa>
  {
    return ret;
 8007022:	7c7b      	ldrb	r3, [r7, #17]
 8007024:	e017      	b.n	8007056 <USBH_AC_GetCur+0x12a>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	22a1      	movs	r2, #161	; 0xa1
 800702a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2281      	movs	r2, #129	; 0x81
 8007030:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	8afa      	ldrh	r2, [r7, #22]
 8007036:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	8aba      	ldrh	r2, [r7, #20]
 800703c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	8a7a      	ldrh	r2, [r7, #18]
 8007042:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800704a:	8a7a      	ldrh	r2, [r7, #18]
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f006 fb5e 	bl	800d710 <USBH_CtlReq>
 8007054:	4603      	mov	r3, r0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b086      	sub	sp, #24
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	4608      	mov	r0, r1
 8007068:	4611      	mov	r1, r2
 800706a:	461a      	mov	r2, r3
 800706c:	4603      	mov	r3, r0
 800706e:	70fb      	strb	r3, [r7, #3]
 8007070:	460b      	mov	r3, r1
 8007072:	70bb      	strb	r3, [r7, #2]
 8007074:	4613      	mov	r3, r2
 8007076:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	82fb      	strh	r3, [r7, #22]
 800707c:	2300      	movs	r3, #0
 800707e:	82bb      	strh	r3, [r7, #20]
 8007080:	2300      	movs	r3, #0
 8007082:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	743b      	strb	r3, [r7, #16]
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007092:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800709e:	78fb      	ldrb	r3, [r7, #3]
 80070a0:	2b06      	cmp	r3, #6
 80070a2:	d01e      	beq.n	80070e2 <USBH_AC_GetMax+0x84>
 80070a4:	2b06      	cmp	r3, #6
 80070a6:	dc4f      	bgt.n	8007148 <USBH_AC_GetMax+0xea>
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d002      	beq.n	80070b2 <USBH_AC_GetMax+0x54>
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d036      	beq.n	800711e <USBH_AC_GetMax+0xc0>
 80070b0:	e04a      	b.n	8007148 <USBH_AC_GetMax+0xea>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b6:	78db      	ldrb	r3, [r3, #3]
 80070b8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80070ba:	2300      	movs	r3, #0
 80070bc:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80070be:	7c3b      	ldrb	r3, [r7, #16]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	4313      	orrs	r3, r2
 80070cc:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80070ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070d2:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80070dc:	2301      	movs	r3, #1
 80070de:	827b      	strh	r3, [r7, #18]
      break;
 80070e0:	e035      	b.n	800714e <USBH_AC_GetMax+0xf0>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80070e2:	78bb      	ldrb	r3, [r7, #2]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	3322      	adds	r3, #34	; 0x22
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	78db      	ldrb	r3, [r3, #3]
 80070f0:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 80070f6:	7c3b      	ldrb	r3, [r7, #16]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	021b      	lsls	r3, r3, #8
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
 8007100:	b29b      	uxth	r3, r3
 8007102:	4313      	orrs	r3, r2
 8007104:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8007106:	787b      	ldrb	r3, [r7, #1]
 8007108:	b29b      	uxth	r3, r3
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	b29a      	uxth	r2, r3
 800710e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007112:	b29b      	uxth	r3, r3
 8007114:	4313      	orrs	r3, r2
 8007116:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8007118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800711a:	827b      	strh	r3, [r7, #18]
      break;
 800711c:	e017      	b.n	800714e <USBH_AC_GetMax+0xf0>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007124:	78db      	ldrb	r3, [r3, #3]
 8007126:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007128:	2300      	movs	r3, #0
 800712a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 800712c:	7c3b      	ldrb	r3, [r7, #16]
 800712e:	b29b      	uxth	r3, r3
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	b29a      	uxth	r2, r3
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	b29b      	uxth	r3, r3
 8007138:	4313      	orrs	r3, r2
 800713a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 800713c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007140:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007142:	2301      	movs	r3, #1
 8007144:	827b      	strh	r3, [r7, #18]
      break;
 8007146:	e002      	b.n	800714e <USBH_AC_GetMax+0xf0>

    default:
      ret = USBH_FAIL;
 8007148:	2302      	movs	r3, #2
 800714a:	747b      	strb	r3, [r7, #17]
      break;
 800714c:	bf00      	nop
  }

  if (ret != USBH_OK)
 800714e:	7c7b      	ldrb	r3, [r7, #17]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <USBH_AC_GetMax+0xfa>
  {
    return ret;
 8007154:	7c7b      	ldrb	r3, [r7, #17]
 8007156:	e017      	b.n	8007188 <USBH_AC_GetMax+0x12a>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	22a1      	movs	r2, #161	; 0xa1
 800715c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2283      	movs	r2, #131	; 0x83
 8007162:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8afa      	ldrh	r2, [r7, #22]
 8007168:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	8aba      	ldrh	r2, [r7, #20]
 800716e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	8a7a      	ldrh	r2, [r7, #18]
 8007174:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800717c:	8a7a      	ldrh	r2, [r7, #18]
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f006 fac5 	bl	800d710 <USBH_CtlReq>
 8007186:	4603      	mov	r3, r0

}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	4608      	mov	r0, r1
 800719a:	4611      	mov	r1, r2
 800719c:	461a      	mov	r2, r3
 800719e:	4603      	mov	r3, r0
 80071a0:	70fb      	strb	r3, [r7, #3]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70bb      	strb	r3, [r7, #2]
 80071a6:	4613      	mov	r3, r2
 80071a8:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	82fb      	strh	r3, [r7, #22]
 80071ae:	2300      	movs	r3, #0
 80071b0:	82bb      	strh	r3, [r7, #20]
 80071b2:	2300      	movs	r3, #0
 80071b4:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	743b      	strb	r3, [r7, #16]
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	2b06      	cmp	r3, #6
 80071d4:	d01e      	beq.n	8007214 <USBH_AC_GetRes+0x84>
 80071d6:	2b06      	cmp	r3, #6
 80071d8:	dc4f      	bgt.n	800727a <USBH_AC_GetRes+0xea>
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d002      	beq.n	80071e4 <USBH_AC_GetRes+0x54>
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d036      	beq.n	8007250 <USBH_AC_GetRes+0xc0>
 80071e2:	e04a      	b.n	800727a <USBH_AC_GetRes+0xea>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e8:	78db      	ldrb	r3, [r3, #3]
 80071ea:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80071ec:	2300      	movs	r3, #0
 80071ee:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80071f0:	7c3b      	ldrb	r3, [r7, #16]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8007200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007204:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2200      	movs	r2, #0
 800720a:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 800720e:	2301      	movs	r3, #1
 8007210:	827b      	strh	r3, [r7, #18]
      break;
 8007212:	e035      	b.n	8007280 <USBH_AC_GetRes+0xf0>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8007214:	78bb      	ldrb	r3, [r7, #2]
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	3322      	adds	r3, #34	; 0x22
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	78db      	ldrb	r3, [r3, #3]
 8007222:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007224:	2300      	movs	r3, #0
 8007226:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007228:	7c3b      	ldrb	r3, [r7, #16]
 800722a:	b29b      	uxth	r3, r3
 800722c:	021b      	lsls	r3, r3, #8
 800722e:	b29a      	uxth	r2, r3
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	b29b      	uxth	r3, r3
 8007234:	4313      	orrs	r3, r2
 8007236:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8007238:	787b      	ldrb	r3, [r7, #1]
 800723a:	b29b      	uxth	r3, r3
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	b29a      	uxth	r2, r3
 8007240:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007244:	b29b      	uxth	r3, r3
 8007246:	4313      	orrs	r3, r2
 8007248:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800724a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800724c:	827b      	strh	r3, [r7, #18]
      break;
 800724e:	e017      	b.n	8007280 <USBH_AC_GetRes+0xf0>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007256:	78db      	ldrb	r3, [r3, #3]
 8007258:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800725a:	2300      	movs	r3, #0
 800725c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800725e:	7c3b      	ldrb	r3, [r7, #16]
 8007260:	b29b      	uxth	r3, r3
 8007262:	021b      	lsls	r3, r3, #8
 8007264:	b29a      	uxth	r2, r3
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	b29b      	uxth	r3, r3
 800726a:	4313      	orrs	r3, r2
 800726c:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 800726e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007272:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007274:	2301      	movs	r3, #1
 8007276:	827b      	strh	r3, [r7, #18]
      break;
 8007278:	e002      	b.n	8007280 <USBH_AC_GetRes+0xf0>

    default:
      ret = USBH_FAIL;
 800727a:	2302      	movs	r3, #2
 800727c:	747b      	strb	r3, [r7, #17]
      break;
 800727e:	bf00      	nop
  }

  if (ret != USBH_OK)
 8007280:	7c7b      	ldrb	r3, [r7, #17]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <USBH_AC_GetRes+0xfa>
  {
    return ret;
 8007286:	7c7b      	ldrb	r3, [r7, #17]
 8007288:	e017      	b.n	80072ba <USBH_AC_GetRes+0x12a>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	22a1      	movs	r2, #161	; 0xa1
 800728e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2284      	movs	r2, #132	; 0x84
 8007294:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	8afa      	ldrh	r2, [r7, #22]
 800729a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8aba      	ldrh	r2, [r7, #20]
 80072a0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	8a7a      	ldrh	r2, [r7, #18]
 80072a6:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80072ae:	8a7a      	ldrh	r2, [r7, #18]
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f006 fa2c 	bl	800d710 <USBH_CtlReq>
 80072b8:	4603      	mov	r3, r0

}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b086      	sub	sp, #24
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	4608      	mov	r0, r1
 80072cc:	4611      	mov	r1, r2
 80072ce:	461a      	mov	r2, r3
 80072d0:	4603      	mov	r3, r0
 80072d2:	70fb      	strb	r3, [r7, #3]
 80072d4:	460b      	mov	r3, r1
 80072d6:	70bb      	strb	r3, [r7, #2]
 80072d8:	4613      	mov	r3, r2
 80072da:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	82fb      	strh	r3, [r7, #22]
 80072e0:	2300      	movs	r3, #0
 80072e2:	82bb      	strh	r3, [r7, #20]
 80072e4:	2300      	movs	r3, #0
 80072e6:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	743b      	strb	r3, [r7, #16]
 80072ec:	2300      	movs	r3, #0
 80072ee:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007302:	78fb      	ldrb	r3, [r7, #3]
 8007304:	2b06      	cmp	r3, #6
 8007306:	d01e      	beq.n	8007346 <USBH_AC_GetMin+0x84>
 8007308:	2b06      	cmp	r3, #6
 800730a:	dc4f      	bgt.n	80073ac <USBH_AC_GetMin+0xea>
 800730c:	2b02      	cmp	r3, #2
 800730e:	d002      	beq.n	8007316 <USBH_AC_GetMin+0x54>
 8007310:	2b03      	cmp	r3, #3
 8007312:	d036      	beq.n	8007382 <USBH_AC_GetMin+0xc0>
 8007314:	e04a      	b.n	80073ac <USBH_AC_GetMin+0xea>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731a:	78db      	ldrb	r3, [r3, #3]
 800731c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007322:	7c3b      	ldrb	r3, [r7, #16]
 8007324:	b29b      	uxth	r3, r3
 8007326:	021b      	lsls	r3, r3, #8
 8007328:	b29a      	uxth	r2, r3
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	b29b      	uxth	r3, r3
 800732e:	4313      	orrs	r3, r2
 8007330:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007336:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2200      	movs	r2, #0
 800733c:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8007340:	2301      	movs	r3, #1
 8007342:	827b      	strh	r3, [r7, #18]
      break;
 8007344:	e035      	b.n	80073b2 <USBH_AC_GetMin+0xf0>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8007346:	78bb      	ldrb	r3, [r7, #2]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	3322      	adds	r3, #34	; 0x22
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	78db      	ldrb	r3, [r3, #3]
 8007354:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007356:	2300      	movs	r3, #0
 8007358:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800735a:	7c3b      	ldrb	r3, [r7, #16]
 800735c:	b29b      	uxth	r3, r3
 800735e:	021b      	lsls	r3, r3, #8
 8007360:	b29a      	uxth	r2, r3
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	b29b      	uxth	r3, r3
 8007366:	4313      	orrs	r3, r2
 8007368:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800736a:	787b      	ldrb	r3, [r7, #1]
 800736c:	b29b      	uxth	r3, r3
 800736e:	021b      	lsls	r3, r3, #8
 8007370:	b29a      	uxth	r2, r3
 8007372:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007376:	b29b      	uxth	r3, r3
 8007378:	4313      	orrs	r3, r2
 800737a:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800737c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800737e:	827b      	strh	r3, [r7, #18]
      break;
 8007380:	e017      	b.n	80073b2 <USBH_AC_GetMin+0xf0>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007388:	78db      	ldrb	r3, [r3, #3]
 800738a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800738c:	2300      	movs	r3, #0
 800738e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007390:	7c3b      	ldrb	r3, [r7, #16]
 8007392:	b29b      	uxth	r3, r3
 8007394:	021b      	lsls	r3, r3, #8
 8007396:	b29a      	uxth	r2, r3
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	b29b      	uxth	r3, r3
 800739c:	4313      	orrs	r3, r2
 800739e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80073a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073a4:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 80073a6:	2301      	movs	r3, #1
 80073a8:	827b      	strh	r3, [r7, #18]
      break;
 80073aa:	e002      	b.n	80073b2 <USBH_AC_GetMin+0xf0>

    default:
      ret = USBH_FAIL;
 80073ac:	2302      	movs	r3, #2
 80073ae:	747b      	strb	r3, [r7, #17]
      break;
 80073b0:	bf00      	nop
  }

  if (ret != USBH_OK)
 80073b2:	7c7b      	ldrb	r3, [r7, #17]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <USBH_AC_GetMin+0xfa>
  {
    return ret;
 80073b8:	7c7b      	ldrb	r3, [r7, #17]
 80073ba:	e017      	b.n	80073ec <USBH_AC_GetMin+0x12a>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	22a1      	movs	r2, #161	; 0xa1
 80073c0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2282      	movs	r2, #130	; 0x82
 80073c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	8afa      	ldrh	r2, [r7, #22]
 80073cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	8aba      	ldrh	r2, [r7, #20]
 80073d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8a7a      	ldrh	r2, [r7, #18]
 80073d8:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80073e0:	8a7a      	ldrh	r2, [r7, #18]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f006 f993 	bl	800d710 <USBH_CtlReq>
 80073ea:	4603      	mov	r3, r0

}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	460b      	mov	r3, r1
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8007402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007406:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8007408:	7afb      	ldrb	r3, [r7, #11]
 800740a:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 800740c:	2303      	movs	r3, #3
 800740e:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2222      	movs	r2, #34	; 0x22
 8007414:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8afa      	ldrh	r2, [r7, #22]
 8007420:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8aba      	ldrh	r2, [r7, #20]
 8007426:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8a7a      	ldrh	r2, [r7, #18]
 800742c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 800742e:	8a7b      	ldrh	r3, [r7, #18]
 8007430:	461a      	mov	r2, r3
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f006 f96b 	bl	800d710 <USBH_CtlReq>
 800743a:	4603      	mov	r3, r0

}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 800744c:	2301      	movs	r3, #1
 800744e:	73fb      	strb	r3, [r7, #15]

  return status;
 8007450:	7bfb      	ldrb	r3, [r7, #15]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	bc80      	pop	{r7}
 800745a:	4770      	bx	lr

0800745c <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8007464:	2301      	movs	r3, #1
 8007466:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	78db      	ldrb	r3, [r3, #3]
 800747e:	3b01      	subs	r3, #1
 8007480:	2b04      	cmp	r3, #4
 8007482:	f200 8099 	bhi.w	80075b8 <USBH_AUDIO_Control+0x15c>
 8007486:	a201      	add	r2, pc, #4	; (adr r2, 800748c <USBH_AUDIO_Control+0x30>)
 8007488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748c:	080074a1 	.word	0x080074a1
 8007490:	080074ff 	.word	0x080074ff
 8007494:	080075b9 	.word	0x080075b9
 8007498:	08007585 	.word	0x08007585
 800749c:	0800759f 	.word	0x0800759f
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a6:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f040 8084 	bne.w	80075bc <USBH_AUDIO_Control+0x160>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ba:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f006 fb83 	bl	800dbe4 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2202      	movs	r2, #2
 80074fa:	70da      	strb	r2, [r3, #3]
      }
      break;
 80074fc:	e05e      	b.n	80075bc <USBH_AUDIO_Control+0x160>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f006 fed2 	bl	800e2b0 <USBH_LL_GetURBState>
 800750c:	4603      	mov	r3, r0
 800750e:	2b01      	cmp	r3, #1
 8007510:	d114      	bne.n	800753c <USBH_AUDIO_Control+0xe0>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800751e:	3302      	adds	r3, #2
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	021b      	lsls	r3, r3, #8
 8007524:	b29b      	uxth	r3, r3
 8007526:	4313      	orrs	r3, r2
 8007528:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 800752a:	89fb      	ldrh	r3, [r7, #14]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f989 	bl	8007848 <USBH_AUDIO_SetControlAttribute>
 8007536:	4603      	mov	r3, r0
 8007538:	2b01      	cmp	r3, #1
 800753a:	d041      	beq.n	80075c0 <USBH_AUDIO_Control+0x164>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007542:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 8007554:	4293      	cmp	r3, r2
 8007556:	d335      	bcc.n	80075c4 <USBH_AUDIO_Control+0x168>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800755e:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8007574:	b2da      	uxtb	r2, r3
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f006 fb31 	bl	800dbe4 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

      }
      break;
 8007582:	e01f      	b.n	80075c4 <USBH_AUDIO_Control+0x168>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 8007584:	2101      	movs	r1, #1
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f95e 	bl	8007848 <USBH_AUDIO_SetControlAttribute>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d11a      	bne.n	80075c8 <USBH_AUDIO_Control+0x16c>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2201      	movs	r2, #1
 8007596:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800759c:	e014      	b.n	80075c8 <USBH_AUDIO_Control+0x16c>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 800759e:	2102      	movs	r1, #2
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f951 	bl	8007848 <USBH_AUDIO_SetControlAttribute>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10f      	bne.n	80075cc <USBH_AUDIO_Control+0x170>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	2201      	movs	r2, #1
 80075b0:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80075b6:	e009      	b.n	80075cc <USBH_AUDIO_Control+0x170>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 80075b8:	bf00      	nop
 80075ba:	e008      	b.n	80075ce <USBH_AUDIO_Control+0x172>
      break;
 80075bc:	bf00      	nop
 80075be:	e006      	b.n	80075ce <USBH_AUDIO_Control+0x172>
          break;
 80075c0:	bf00      	nop
 80075c2:	e004      	b.n	80075ce <USBH_AUDIO_Control+0x172>
      break;
 80075c4:	bf00      	nop
 80075c6:	e002      	b.n	80075ce <USBH_AUDIO_Control+0x172>
      break;
 80075c8:	bf00      	nop
 80075ca:	e000      	b.n	80075ce <USBH_AUDIO_Control+0x172>
      break;
 80075cc:	bf00      	nop
  }

  return status;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80075e0:	2301      	movs	r3, #1
 80075e2:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ea:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	789b      	ldrb	r3, [r3, #2]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d85c      	bhi.n	80076b6 <USBH_AUDIO_OutputStream+0xde>
 80075fc:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <USBH_AUDIO_OutputStream+0x2c>)
 80075fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007602:	bf00      	nop
 8007604:	08007619 	.word	0x08007619
 8007608:	08007675 	.word	0x08007675
 800760c:	0800763f 	.word	0x0800763f
 8007610:	080076ab 	.word	0x080076ab
 8007614:	080076a5 	.word	0x080076a5
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	3317      	adds	r3, #23
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	4413      	add	r3, r2
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	79db      	ldrb	r3, [r3, #7]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d103      	bne.n	8007636 <USBH_AUDIO_OutputStream+0x5e>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2203      	movs	r2, #3
 8007632:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007634:	e044      	b.n	80076c0 <USBH_AUDIO_OutputStream+0xe8>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	2202      	movs	r2, #2
 800763a:	709a      	strb	r2, [r3, #2]
      break;
 800763c:	e040      	b.n	80076c0 <USBH_AUDIO_OutputStream+0xe8>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	3317      	adds	r3, #23
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	4413      	add	r3, r2
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	3308      	adds	r3, #8
 8007650:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7ff fec9 	bl	80073f4 <USBH_AUDIO_SetEndpointControls>
 8007662:	4603      	mov	r3, r0
 8007664:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007666:	7dfb      	ldrb	r3, [r7, #23]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d126      	bne.n	80076ba <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	2205      	movs	r2, #5
 8007670:	709a      	strb	r2, [r3, #2]
      }
      break;
 8007672:	e022      	b.n	80076ba <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800767a:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff feb4 	bl	80073f4 <USBH_AUDIO_SetEndpointControls>
 800768c:	4603      	mov	r3, r0
 800768e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d113      	bne.n	80076be <USBH_AUDIO_OutputStream+0xe6>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	2205      	movs	r2, #5
 800769a:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f97c 	bl	800799a <USBH_AUDIO_FrequencySet>
      }
      break;
 80076a2:	e00c      	b.n	80076be <USBH_AUDIO_OutputStream+0xe6>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076a8:	e00a      	b.n	80076c0 <USBH_AUDIO_OutputStream+0xe8>

    case AUDIO_PLAYBACK_PLAY:
      USBH_AUDIO_Transmit(phost);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f80e 	bl	80076cc <USBH_AUDIO_Transmit>
      status = USBH_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	75fb      	strb	r3, [r7, #23]
      break;
 80076b4:	e004      	b.n	80076c0 <USBH_AUDIO_OutputStream+0xe8>

    default:
      break;
 80076b6:	bf00      	nop
 80076b8:	e002      	b.n	80076c0 <USBH_AUDIO_OutputStream+0xe8>
      break;
 80076ba:	bf00      	nop
 80076bc:	e000      	b.n	80076c0 <USBH_AUDIO_OutputStream+0xe8>
      break;
 80076be:	bf00      	nop
  }

  return status;
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop

080076cc <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80076d4:	2301      	movs	r3, #1
 80076d6:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076de:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	791b      	ldrb	r3, [r3, #4]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d002      	beq.n	80076f4 <USBH_AUDIO_Transmit+0x28>
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d037      	beq.n	8007762 <USBH_AUDIO_Transmit+0x96>
 80076f2:	e09e      	b.n	8007832 <USBH_AUDIO_Transmit+0x166>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076fa:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	f040 8098 	bne.w	8007838 <USBH_AUDIO_Transmit+0x16c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800770e:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2202      	movs	r2, #2
 800771c:	711a      	strb	r2, [r3, #4]
        USBH_IsocSendData(phost,
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                          AUDIO_Handle->headphone.buf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 800772a:	461a      	mov	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f006 fa75 	bl	800dc22 <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800773e:	461a      	mov	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800774c:	461a      	mov	r2, r3
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007760:	e06a      	b.n	8007838 <USBH_AUDIO_Transmit+0x16c>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f006 fda0 	bl	800e2b0 <USBH_LL_GetURBState>
 8007770:	4603      	mov	r3, r0
 8007772:	2b01      	cmp	r3, #1
 8007774:	d162      	bne.n	800783c <USBH_AUDIO_Transmit+0x170>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800777c:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 800778e:	4293      	cmp	r3, r2
 8007790:	d354      	bcc.n	800783c <USBH_AUDIO_Transmit+0x170>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007798:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d102      	bne.n	80077b2 <USBH_AUDIO_Transmit+0xe6>
        {
          USBH_AUDIO_Control(phost);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7ff fe55 	bl	800745c <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80077be:	429a      	cmp	r2, r3
 80077c0:	d82b      	bhi.n	800781a <USBH_AUDIO_Transmit+0x14e>
        {
          USBH_IsocSendData(phost,
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                            AUDIO_Handle->headphone.cbuf,
                            (uint32_t)AUDIO_Handle->headphone.frame_length,
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          USBH_IsocSendData(phost,
 80077ce:	461a      	mov	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f006 fa23 	bl	800dc22 <USBH_IsocSendData>
                            AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 80077e8:	441a      	add	r2, r3
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 80077fc:	441a      	add	r2, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007810:	441a      	add	r2, r3
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 8007818:	e010      	b.n	800783c <USBH_AUDIO_Transmit+0x170>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007820:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2205      	movs	r2, #5
 8007828:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f8be 	bl	80079ac <USBH_AUDIO_BufferEmptyCallback>
      break;
 8007830:	e004      	b.n	800783c <USBH_AUDIO_Transmit+0x170>

    default:
      status = USBH_FAIL;
 8007832:	2302      	movs	r3, #2
 8007834:	73fb      	strb	r3, [r7, #15]
      break;
 8007836:	e002      	b.n	800783e <USBH_AUDIO_Transmit+0x172>
      break;
 8007838:	bf00      	nop
 800783a:	e000      	b.n	800783e <USBH_AUDIO_Transmit+0x172>
      break;
 800783c:	bf00      	nop
  }
  return status;
 800783e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007854:	2301      	movs	r3, #1
 8007856:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800785e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d002      	beq.n	8007872 <USBH_AUDIO_SetControlAttribute+0x2a>
 800786c:	2b02      	cmp	r3, #2
 800786e:	d00b      	beq.n	8007888 <USBH_AUDIO_SetControlAttribute+0x40>
 8007870:	e015      	b.n	800789e <USBH_AUDIO_SetControlAttribute+0x56>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800787e:	441a      	add	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 8007886:	e00d      	b.n	80078a4 <USBH_AUDIO_SetControlAttribute+0x5c>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8007894:	1ad2      	subs	r2, r2, r3
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 800789c:	e002      	b.n	80078a4 <USBH_AUDIO_SetControlAttribute+0x5c>

    default :
      status = USBH_FAIL;
 800789e:	2302      	movs	r3, #2
 80078a0:	73fb      	strb	r3, [r7, #15]
      break;
 80078a2:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d905      	bls.n	80078c0 <USBH_AUDIO_SetControlAttribute+0x78>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d205      	bcs.n	80078dc <USBH_AUDIO_SetControlAttribute+0x94>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f827 	bl	8007944 <AUDIO_SetVolume>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d01e      	beq.n	800793a <USBH_AUDIO_SetControlAttribute+0xf2>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007902:	2b01      	cmp	r3, #1
 8007904:	d10e      	bne.n	8007924 <USBH_AUDIO_SetControlAttribute+0xdc>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
 8007922:	e007      	b.n	8007934 <USBH_AUDIO_SetControlAttribute+0xec>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800792a:	3b01      	subs	r3, #1
 800792c:	b2da      	uxtb	r2, r3
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2206      	movs	r2, #6
 8007938:	705a      	strb	r2, [r3, #1]
  }


  return status;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af02      	add	r7, sp, #8
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	4608      	mov	r0, r1
 800794e:	4611      	mov	r1, r2
 8007950:	461a      	mov	r2, r3
 8007952:	4603      	mov	r3, r0
 8007954:	70fb      	strb	r3, [r7, #3]
 8007956:	460b      	mov	r3, r1
 8007958:	70bb      	strb	r3, [r7, #2]
 800795a:	4613      	mov	r3, r2
 800795c:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 800795e:	2301      	movs	r3, #1
 8007960:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007968:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	883a      	ldrh	r2, [r7, #0]
 8007974:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 8007978:	78fa      	ldrb	r2, [r7, #3]
 800797a:	2302      	movs	r3, #2
 800797c:	9301      	str	r3, [sp, #4]
 800797e:	78bb      	ldrb	r3, [r7, #2]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	2302      	movs	r3, #2
 8007984:	2106      	movs	r1, #6
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fa54 	bl	8006e34 <USBH_AC_SetCur>
 800798c:	4603      	mov	r3, r0
 800798e:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bc80      	pop	{r7}
 80079aa:	4770      	bx	lr

080079ac <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bc80      	pop	{r7}
 80079bc:	4770      	bx	lr
	...

080079c0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80079c0:	b590      	push	{r4, r7, lr}
 80079c2:	b089      	sub	sp, #36	; 0x24
 80079c4:	af04      	add	r7, sp, #16
 80079c6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80079c8:	2301      	movs	r3, #1
 80079ca:	2202      	movs	r2, #2
 80079cc:	2102      	movs	r1, #2
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f004 fea6 	bl	800c720 <USBH_FindInterface>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	2bff      	cmp	r3, #255	; 0xff
 80079dc:	d002      	beq.n	80079e4 <USBH_CDC_InterfaceInit+0x24>
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2b0e      	cmp	r3, #14
 80079e2:	d911      	bls.n	8007a08 <USBH_CDC_InterfaceInit+0x48>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
 80079e4:	4888      	ldr	r0, [pc, #544]	; (8007c08 <USBH_CDC_InterfaceInit+0x248>)
 80079e6:	f00b f8d9 	bl	8012b9c <iprintf>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079f0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4619      	mov	r1, r3
 80079f8:	4884      	ldr	r0, [pc, #528]	; (8007c0c <USBH_CDC_InterfaceInit+0x24c>)
 80079fa:	f00b f8cf 	bl	8012b9c <iprintf>
 80079fe:	200a      	movs	r0, #10
 8007a00:	f00b f8e4 	bl	8012bcc <putchar>
    return USBH_FAIL;
 8007a04:	2302      	movs	r3, #2
 8007a06:	e170      	b.n	8007cea <USBH_CDC_InterfaceInit+0x32a>
  }

  status = USBH_SelectInterface(phost, interface);
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f004 fe1d 	bl	800c64c <USBH_SelectInterface>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <USBH_CDC_InterfaceInit+0x60>
  {
    return USBH_FAIL;
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e164      	b.n	8007cea <USBH_CDC_InterfaceInit+0x32a>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a26:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 8007a2a:	2050      	movs	r0, #80	; 0x50
 8007a2c:	f00a fcb2 	bl	8012394 <malloc>
 8007a30:	4603      	mov	r3, r0
 8007a32:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a3a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10a      	bne.n	8007a5e <USBH_CDC_InterfaceInit+0x9e>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
 8007a48:	486f      	ldr	r0, [pc, #444]	; (8007c08 <USBH_CDC_InterfaceInit+0x248>)
 8007a4a:	f00b f8a7 	bl	8012b9c <iprintf>
 8007a4e:	4870      	ldr	r0, [pc, #448]	; (8007c10 <USBH_CDC_InterfaceInit+0x250>)
 8007a50:	f00b f8a4 	bl	8012b9c <iprintf>
 8007a54:	200a      	movs	r0, #10
 8007a56:	f00b f8b9 	bl	8012bcc <putchar>
    return USBH_FAIL;
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e145      	b.n	8007cea <USBH_CDC_InterfaceInit+0x32a>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007a5e:	2250      	movs	r2, #80	; 0x50
 8007a60:	2100      	movs	r1, #0
 8007a62:	68b8      	ldr	r0, [r7, #8]
 8007a64:	f00a fcb4 	bl	80123d0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007a68:	7bfa      	ldrb	r2, [r7, #15]
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	019b      	lsls	r3, r3, #6
 8007a70:	4413      	add	r3, r2
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	440b      	add	r3, r1
 8007a76:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	b25b      	sxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	da17      	bge.n	8007ab2 <USBH_CDC_InterfaceInit+0xf2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007a82:	7bfa      	ldrb	r2, [r7, #15]
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	4613      	mov	r3, r2
 8007a88:	019b      	lsls	r3, r3, #6
 8007a8a:	4413      	add	r3, r2
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	440b      	add	r3, r1
 8007a90:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8007a94:	781a      	ldrb	r2, [r3, #0]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007a9a:	7bfa      	ldrb	r2, [r7, #15]
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	019b      	lsls	r3, r3, #6
 8007aa2:	4413      	add	r3, r2
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	440b      	add	r3, r1
 8007aa8:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 8007aac:	881a      	ldrh	r2, [r3, #0]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	785b      	ldrb	r3, [r3, #1]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f006 f8fc 	bl	800dcb6 <USBH_AllocPipe>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	7819      	ldrb	r1, [r3, #0]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	7858      	ldrb	r0, [r3, #1]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	8952      	ldrh	r2, [r2, #10]
 8007ade:	9202      	str	r2, [sp, #8]
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	9201      	str	r2, [sp, #4]
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	4623      	mov	r3, r4
 8007ae8:	4602      	mov	r2, r0
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f006 f8b4 	bl	800dc58 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2200      	movs	r2, #0
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f006 fbfc 	bl	800e2f6 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007afe:	2300      	movs	r3, #0
 8007b00:	2200      	movs	r2, #0
 8007b02:	210a      	movs	r1, #10
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f004 fe0b 	bl	800c720 <USBH_FindInterface>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	2bff      	cmp	r3, #255	; 0xff
 8007b12:	d002      	beq.n	8007b1a <USBH_CDC_InterfaceInit+0x15a>
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	2b0e      	cmp	r3, #14
 8007b18:	d911      	bls.n	8007b3e <USBH_CDC_InterfaceInit+0x17e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
 8007b1a:	483b      	ldr	r0, [pc, #236]	; (8007c08 <USBH_CDC_InterfaceInit+0x248>)
 8007b1c:	f00b f83e 	bl	8012b9c <iprintf>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b26:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4839      	ldr	r0, [pc, #228]	; (8007c14 <USBH_CDC_InterfaceInit+0x254>)
 8007b30:	f00b f834 	bl	8012b9c <iprintf>
 8007b34:	200a      	movs	r0, #10
 8007b36:	f00b f849 	bl	8012bcc <putchar>
    return USBH_FAIL;
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e0d5      	b.n	8007cea <USBH_CDC_InterfaceInit+0x32a>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007b3e:	7bfa      	ldrb	r2, [r7, #15]
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	4613      	mov	r3, r2
 8007b44:	019b      	lsls	r3, r3, #6
 8007b46:	4413      	add	r3, r2
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	440b      	add	r3, r1
 8007b4c:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	b25b      	sxtb	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	da18      	bge.n	8007b8a <USBH_CDC_InterfaceInit+0x1ca>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b58:	7bfa      	ldrb	r2, [r7, #15]
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	019b      	lsls	r3, r3, #6
 8007b60:	4413      	add	r3, r2
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	440b      	add	r3, r1
 8007b66:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8007b6a:	781a      	ldrb	r2, [r3, #0]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b70:	7bfa      	ldrb	r2, [r7, #15]
 8007b72:	6879      	ldr	r1, [r7, #4]
 8007b74:	4613      	mov	r3, r2
 8007b76:	019b      	lsls	r3, r3, #6
 8007b78:	4413      	add	r3, r2
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	440b      	add	r3, r1
 8007b7e:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 8007b82:	881a      	ldrh	r2, [r3, #0]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	835a      	strh	r2, [r3, #26]
 8007b88:	e017      	b.n	8007bba <USBH_CDC_InterfaceInit+0x1fa>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b8a:	7bfa      	ldrb	r2, [r7, #15]
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	019b      	lsls	r3, r3, #6
 8007b92:	4413      	add	r3, r2
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	440b      	add	r3, r1
 8007b98:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8007b9c:	781a      	ldrb	r2, [r3, #0]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ba2:	7bfa      	ldrb	r2, [r7, #15]
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	019b      	lsls	r3, r3, #6
 8007baa:	4413      	add	r3, r2
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	440b      	add	r3, r1
 8007bb0:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 8007bb4:	881a      	ldrh	r2, [r3, #0]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007bba:	7bfa      	ldrb	r2, [r7, #15]
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	019b      	lsls	r3, r3, #6
 8007bc2:	4413      	add	r3, r2
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	440b      	add	r3, r1
 8007bc8:	f603 1354 	addw	r3, r3, #2388	; 0x954
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	b25b      	sxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	da21      	bge.n	8007c18 <USBH_CDC_InterfaceInit+0x258>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007bd4:	7bfa      	ldrb	r2, [r7, #15]
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	019b      	lsls	r3, r3, #6
 8007bdc:	4413      	add	r3, r2
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	440b      	add	r3, r1
 8007be2:	f603 1354 	addw	r3, r3, #2388	; 0x954
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007bec:	7bfa      	ldrb	r2, [r7, #15]
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	019b      	lsls	r3, r3, #6
 8007bf4:	4413      	add	r3, r2
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	440b      	add	r3, r1
 8007bfa:	f603 1356 	addw	r3, r3, #2390	; 0x956
 8007bfe:	881a      	ldrh	r2, [r3, #0]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	835a      	strh	r2, [r3, #26]
 8007c04:	e020      	b.n	8007c48 <USBH_CDC_InterfaceInit+0x288>
 8007c06:	bf00      	nop
 8007c08:	08013978 	.word	0x08013978
 8007c0c:	08013984 	.word	0x08013984
 8007c10:	080139c4 	.word	0x080139c4
 8007c14:	080139ec 	.word	0x080139ec
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007c18:	7bfa      	ldrb	r2, [r7, #15]
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	019b      	lsls	r3, r3, #6
 8007c20:	4413      	add	r3, r2
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	440b      	add	r3, r1
 8007c26:	f603 1354 	addw	r3, r3, #2388	; 0x954
 8007c2a:	781a      	ldrb	r2, [r3, #0]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c30:	7bfa      	ldrb	r2, [r7, #15]
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	4613      	mov	r3, r2
 8007c36:	019b      	lsls	r3, r3, #6
 8007c38:	4413      	add	r3, r2
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	440b      	add	r3, r1
 8007c3e:	f603 1356 	addw	r3, r3, #2390	; 0x956
 8007c42:	881a      	ldrh	r2, [r3, #0]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	7b9b      	ldrb	r3, [r3, #14]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f006 f831 	bl	800dcb6 <USBH_AllocPipe>
 8007c54:	4603      	mov	r3, r0
 8007c56:	461a      	mov	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	7bdb      	ldrb	r3, [r3, #15]
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f006 f827 	bl	800dcb6 <USBH_AllocPipe>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	7b59      	ldrb	r1, [r3, #13]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	7b98      	ldrb	r0, [r3, #14]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	8b12      	ldrh	r2, [r2, #24]
 8007c88:	9202      	str	r2, [sp, #8]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	9201      	str	r2, [sp, #4]
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	4623      	mov	r3, r4
 8007c92:	4602      	mov	r2, r0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f005 ffdf 	bl	800dc58 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	7b19      	ldrb	r1, [r3, #12]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	7bd8      	ldrb	r0, [r3, #15]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	8b52      	ldrh	r2, [r2, #26]
 8007cb2:	9202      	str	r2, [sp, #8]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	9201      	str	r2, [sp, #4]
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	4623      	mov	r3, r4
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f005 ffca 	bl	800dc58 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	7b5b      	ldrb	r3, [r3, #13]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f006 fb0e 	bl	800e2f6 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	7b1b      	ldrb	r3, [r3, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f006 fb07 	bl	800e2f6 <USBH_LL_SetToggle>

  return USBH_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd90      	pop	{r4, r7, pc}
 8007cf2:	bf00      	nop

08007cf4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d02:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00e      	beq.n	8007d30 <USBH_CDC_InterfaceDeInit+0x3c>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f005 ffbc 	bl	800dc96 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f005 ffe8 	bl	800dcfa <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	7b1b      	ldrb	r3, [r3, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00e      	beq.n	8007d56 <USBH_CDC_InterfaceDeInit+0x62>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	7b1b      	ldrb	r3, [r3, #12]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f005 ffa9 	bl	800dc96 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	7b1b      	ldrb	r3, [r3, #12]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f005 ffd5 	bl	800dcfa <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	7b5b      	ldrb	r3, [r3, #13]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00e      	beq.n	8007d7c <USBH_CDC_InterfaceDeInit+0x88>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	7b5b      	ldrb	r3, [r3, #13]
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f005 ff96 	bl	800dc96 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	7b5b      	ldrb	r3, [r3, #13]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f005 ffc2 	bl	800dcfa <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d82:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00f      	beq.n	8007dac <USBH_CDC_InterfaceDeInit+0xb8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d92:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f00a fb03 	bl	80123a4 <free>
    phost->pActiveClass->pData = 0U;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007da4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007da8:	2200      	movs	r2, #0
 8007daa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	3340      	adds	r3, #64	; 0x40
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f8df 	bl	8007f9a <GetLineCoding>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73fb      	strb	r3, [r7, #15]
  if (status == USBH_OK)
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d107      	bne.n	8007df6 <USBH_CDC_ClassRequest+0x40>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dec:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8007df0:	2102      	movs	r1, #2
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	4798      	blx	r3
  }
  return status;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e16:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d877      	bhi.n	8007f18 <USBH_CDC_Process+0x118>
 8007e28:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <USBH_CDC_Process+0x30>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007e45 	.word	0x08007e45
 8007e34:	08007e4b 	.word	0x08007e4b
 8007e38:	08007e7b 	.word	0x08007e7b
 8007e3c:	08007eef 	.word	0x08007eef
 8007e40:	08007efd 	.word	0x08007efd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	73fb      	strb	r3, [r7, #15]
      break;
 8007e48:	e06d      	b.n	8007f26 <USBH_CDC_Process+0x126>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f8c1 	bl	8007fd8 <SetLineCoding>
 8007e56:	4603      	mov	r3, r0
 8007e58:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d104      	bne.n	8007e6a <USBH_CDC_Process+0x6a>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007e68:	e058      	b.n	8007f1c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d055      	beq.n	8007f1c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2204      	movs	r2, #4
 8007e74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007e78:	e050      	b.n	8007f1c <USBH_CDC_Process+0x11c>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	3340      	adds	r3, #64	; 0x40
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f88a 	bl	8007f9a <GetLineCoding>
 8007e86:	4603      	mov	r3, r0
 8007e88:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d126      	bne.n	8007ede <USBH_CDC_Process+0xde>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ea2:	791b      	ldrb	r3, [r3, #4]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d13b      	bne.n	8007f20 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d133      	bne.n	8007f20 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ec2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d12b      	bne.n	8007f20 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ed0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d124      	bne.n	8007f20 <USBH_CDC_Process+0x120>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f9d9 	bl	800828e <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007edc:	e020      	b.n	8007f20 <USBH_CDC_Process+0x120>
        if (req_status != USBH_BUSY)
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d01d      	beq.n	8007f20 <USBH_CDC_Process+0x120>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2204      	movs	r2, #4
 8007ee8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007eec:	e018      	b.n	8007f20 <USBH_CDC_Process+0x120>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f8ef 	bl	80080d2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f964 	bl	80081c2 <CDC_ProcessReception>
      break;
 8007efa:	e014      	b.n	8007f26 <USBH_CDC_Process+0x126>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007efc:	2100      	movs	r1, #0
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f005 fa29 	bl	800d356 <USBH_ClrFeature>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <USBH_CDC_Process+0x124>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE ;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007f16:	e005      	b.n	8007f24 <USBH_CDC_Process+0x124>

    default:
      break;
 8007f18:	bf00      	nop
 8007f1a:	e004      	b.n	8007f26 <USBH_CDC_Process+0x126>
      break;
 8007f1c:	bf00      	nop
 8007f1e:	e002      	b.n	8007f26 <USBH_CDC_Process+0x126>
      break;
 8007f20:	bf00      	nop
 8007f22:	e000      	b.n	8007f26 <USBH_CDC_Process+0x126>
      break;
 8007f24:	bf00      	nop

  }

  return status;
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr

08007f44 <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f52:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b0b      	cmp	r3, #11
 8007f62:	d115      	bne.n	8007f90 <USBH_CDC_Stop+0x4c>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f005 fe8f 	bl	800dc96 <USBH_ClosePipe>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	7b1b      	ldrb	r3, [r3, #12]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f005 fe89 	bl	800dc96 <USBH_ClosePipe>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	7b5b      	ldrb	r3, [r3, #13]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f005 fe83 	bl	800dc96 <USBH_ClosePipe>
  }
  return USBH_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	22a1      	movs	r2, #161	; 0xa1
 8007fa8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2221      	movs	r2, #33	; 0x21
 8007fae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2207      	movs	r2, #7
 8007fc0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2207      	movs	r2, #7
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f005 fba1 	bl	800d710 <USBH_CtlReq>
 8007fce:	4603      	mov	r3, r0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2221      	movs	r2, #33	; 0x21
 8007fe6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2220      	movs	r2, #32
 8007fec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2207      	movs	r2, #7
 8007ffe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2207      	movs	r2, #7
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f005 fb82 	bl	800d710 <USBH_CtlReq>
 800800c:	4603      	mov	r3, r0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8008016:	b480      	push	{r7}
 8008018:	b087      	sub	sp, #28
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008022:	2301      	movs	r3, #1
 8008024:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800802c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d004      	beq.n	8008048 <USBH_CDC_Transmit+0x32>
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008044:	2b03      	cmp	r3, #3
 8008046:	d10f      	bne.n	8008068 <USBH_CDC_Transmit+0x52>
  {
    CDC_Handle->pTxData = pbuff;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	2203      	movs	r2, #3
 8008058:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 8008068:	7dfb      	ldrb	r3, [r7, #23]
}
 800806a:	4618      	mov	r0, r3
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	bc80      	pop	{r7}
 8008072:	4770      	bx	lr

08008074 <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008080:	2301      	movs	r3, #1
 8008082:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800808a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800808e:	69db      	ldr	r3, [r3, #28]
 8008090:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d004      	beq.n	80080a6 <USBH_CDC_Receive+0x32>
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d10f      	bne.n	80080c6 <USBH_CDC_Receive+0x52>
  {
    CDC_Handle->pRxData = pbuff;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	2203      	movs	r2, #3
 80080b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	2203      	movs	r2, #3
 80080be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 80080c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr

080080d2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b086      	sub	sp, #24
 80080d6:	af02      	add	r7, sp, #8
 80080d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080e8:	2300      	movs	r3, #0
 80080ea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d002      	beq.n	80080fc <CDC_ProcessTransmission+0x2a>
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d023      	beq.n	8008142 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80080fa:	e05e      	b.n	80081ba <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	8b12      	ldrh	r2, [r2, #24]
 8008104:	4293      	cmp	r3, r2
 8008106:	d90b      	bls.n	8008120 <CDC_ProcessTransmission+0x4e>
        USBH_BulkSendData(phost,
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	69d9      	ldr	r1, [r3, #28]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8b1a      	ldrh	r2, [r3, #24]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	7b5b      	ldrb	r3, [r3, #13]
 8008114:	2001      	movs	r0, #1
 8008116:	9000      	str	r0, [sp, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f005 fd20 	bl	800db5e <USBH_BulkSendData>
 800811e:	e00b      	b.n	8008138 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008128:	b29a      	uxth	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	7b5b      	ldrb	r3, [r3, #13]
 800812e:	2001      	movs	r0, #1
 8008130:	9000      	str	r0, [sp, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f005 fd13 	bl	800db5e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008140:	e03b      	b.n	80081ba <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	7b5b      	ldrb	r3, [r3, #13]
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f006 f8b1 	bl	800e2b0 <USBH_LL_GetURBState>
 800814e:	4603      	mov	r3, r0
 8008150:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008152:	7afb      	ldrb	r3, [r7, #11]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d128      	bne.n	80081aa <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	8b12      	ldrh	r2, [r2, #24]
 8008160:	4293      	cmp	r3, r2
 8008162:	d90e      	bls.n	8008182 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	8b12      	ldrh	r2, [r2, #24]
 800816c:	1a9a      	subs	r2, r3, r2
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	8b12      	ldrh	r2, [r2, #24]
 800817a:	441a      	add	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	61da      	str	r2, [r3, #28]
 8008180:	e002      	b.n	8008188 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	d004      	beq.n	800819a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008198:	e00e      	b.n	80081b8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f86a 	bl	800827c <USBH_CDC_TransmitCallback>
      break;
 80081a8:	e006      	b.n	80081b8 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80081aa:	7afb      	ldrb	r3, [r7, #11]
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d103      	bne.n	80081b8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80081b8:	bf00      	nop
  }
}
 80081ba:	bf00      	nop
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b086      	sub	sp, #24
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081d0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081d8:	2300      	movs	r3, #0
 80081da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d002      	beq.n	80081ec <CDC_ProcessReception+0x2a>
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	d00e      	beq.n	8008208 <CDC_ProcessReception+0x46>
#endif
      }
      break;

    default:
      break;
 80081ea:	e043      	b.n	8008274 <CDC_ProcessReception+0xb2>
      USBH_BulkReceiveData(phost,
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	6a19      	ldr	r1, [r3, #32]
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	8b5a      	ldrh	r2, [r3, #26]
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	7b1b      	ldrb	r3, [r3, #12]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f005 fcd5 	bl	800dba8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2204      	movs	r2, #4
 8008202:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008206:	e035      	b.n	8008274 <CDC_ProcessReception+0xb2>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	7b1b      	ldrb	r3, [r3, #12]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f006 f84e 	bl	800e2b0 <USBH_LL_GetURBState>
 8008214:	4603      	mov	r3, r0
 8008216:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008218:	7cfb      	ldrb	r3, [r7, #19]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d129      	bne.n	8008272 <CDC_ProcessReception+0xb0>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	7b1b      	ldrb	r3, [r3, #12]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f005 ffa9 	bl	800e17c <USBH_LL_GetLastXferSize>
 800822a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	429a      	cmp	r2, r3
 8008234:	d016      	beq.n	8008264 <CDC_ProcessReception+0xa2>
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	8b5b      	ldrh	r3, [r3, #26]
 800823a:	461a      	mov	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4293      	cmp	r3, r2
 8008240:	d910      	bls.n	8008264 <CDC_ProcessReception+0xa2>
          CDC_Handle->RxDataLength -= length ;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	1ad2      	subs	r2, r2, r3
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	6a1a      	ldr	r2, [r3, #32]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	441a      	add	r2, r3
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2203      	movs	r2, #3
 800825e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008262:	e006      	b.n	8008272 <CDC_ProcessReception+0xb0>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f005 fd87 	bl	800dd80 <USBH_CDC_ReceiveCallback>
      break;
 8008272:	bf00      	nop
  }
}
 8008274:	bf00      	nop
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	bc80      	pop	{r7}
 800828c:	4770      	bx	lr

0800828e <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr

080082a0 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80082a0:	b590      	push	{r4, r7, lr}
 80082a2:	b08b      	sub	sp, #44	; 0x2c
 80082a4:	af04      	add	r7, sp, #16
 80082a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 80082a8:	2300      	movs	r3, #0
 80082aa:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80082b6:	7919      	ldrb	r1, [r3, #4]
 80082b8:	23ff      	movs	r3, #255	; 0xff
 80082ba:	2201      	movs	r2, #1
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f004 fa2f 	bl	800c720 <USBH_FindInterface>
 80082c2:	4603      	mov	r3, r0
 80082c4:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80082c6:	7dbb      	ldrb	r3, [r7, #22]
 80082c8:	2bff      	cmp	r3, #255	; 0xff
 80082ca:	d002      	beq.n	80082d2 <USBH_HID_InterfaceInit+0x32>
 80082cc:	7dbb      	ldrb	r3, [r7, #22]
 80082ce:	2b0e      	cmp	r3, #14
 80082d0:	d911      	bls.n	80082f6 <USBH_HID_InterfaceInit+0x56>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 80082d2:	48a3      	ldr	r0, [pc, #652]	; (8008560 <USBH_HID_InterfaceInit+0x2c0>)
 80082d4:	f00a fc62 	bl	8012b9c <iprintf>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082de:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4619      	mov	r1, r3
 80082e6:	489f      	ldr	r0, [pc, #636]	; (8008564 <USBH_HID_InterfaceInit+0x2c4>)
 80082e8:	f00a fc58 	bl	8012b9c <iprintf>
 80082ec:	200a      	movs	r0, #10
 80082ee:	f00a fc6d 	bl	8012bcc <putchar>
    return USBH_FAIL;
 80082f2:	2302      	movs	r3, #2
 80082f4:	e130      	b.n	8008558 <USBH_HID_InterfaceInit+0x2b8>
  }

  status = USBH_SelectInterface(phost, interface);
 80082f6:	7dbb      	ldrb	r3, [r7, #22]
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f004 f9a6 	bl	800c64c <USBH_SelectInterface>
 8008300:	4603      	mov	r3, r0
 8008302:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8008304:	7d7b      	ldrb	r3, [r7, #21]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <USBH_HID_InterfaceInit+0x6e>
  {
    return USBH_FAIL;
 800830a:	2302      	movs	r3, #2
 800830c:	e124      	b.n	8008558 <USBH_HID_InterfaceInit+0x2b8>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008314:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 8008318:	2034      	movs	r0, #52	; 0x34
 800831a:	f00a f83b 	bl	8012394 <malloc>
 800831e:	4603      	mov	r3, r0
 8008320:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008328:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10a      	bne.n	800834c <USBH_HID_InterfaceInit+0xac>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 8008336:	488a      	ldr	r0, [pc, #552]	; (8008560 <USBH_HID_InterfaceInit+0x2c0>)
 8008338:	f00a fc30 	bl	8012b9c <iprintf>
 800833c:	488a      	ldr	r0, [pc, #552]	; (8008568 <USBH_HID_InterfaceInit+0x2c8>)
 800833e:	f00a fc2d 	bl	8012b9c <iprintf>
 8008342:	200a      	movs	r0, #10
 8008344:	f00a fc42 	bl	8012bcc <putchar>
    return USBH_FAIL;
 8008348:	2302      	movs	r3, #2
 800834a:	e105      	b.n	8008558 <USBH_HID_InterfaceInit+0x2b8>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800834c:	2234      	movs	r2, #52	; 0x34
 800834e:	2100      	movs	r1, #0
 8008350:	6938      	ldr	r0, [r7, #16]
 8008352:	f00a f83d 	bl	80123d0 <memset>

  HID_Handle->state = HID_ERROR;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2207      	movs	r2, #7
 800835a:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800835c:	7dba      	ldrb	r2, [r7, #22]
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	4613      	mov	r3, r2
 8008362:	019b      	lsls	r3, r3, #6
 8008364:	4413      	add	r3, r2
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	440b      	add	r3, r1
 800836a:	f603 1347 	addw	r3, r3, #2375	; 0x947
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d109      	bne.n	8008388 <USBH_HID_InterfaceInit+0xe8>
  {
    USBH_UsrLog("KeyBoard device found!");
 8008374:	487d      	ldr	r0, [pc, #500]	; (800856c <USBH_HID_InterfaceInit+0x2cc>)
 8008376:	f00a fc11 	bl	8012b9c <iprintf>
 800837a:	200a      	movs	r0, #10
 800837c:	f00a fc26 	bl	8012bcc <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	4a7b      	ldr	r2, [pc, #492]	; (8008570 <USBH_HID_InterfaceInit+0x2d0>)
 8008384:	631a      	str	r2, [r3, #48]	; 0x30
 8008386:	e01d      	b.n	80083c4 <USBH_HID_InterfaceInit+0x124>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8008388:	7dba      	ldrb	r2, [r7, #22]
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	4613      	mov	r3, r2
 800838e:	019b      	lsls	r3, r3, #6
 8008390:	4413      	add	r3, r2
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	440b      	add	r3, r1
 8008396:	f603 1347 	addw	r3, r3, #2375	; 0x947
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b02      	cmp	r3, #2
 800839e:	d109      	bne.n	80083b4 <USBH_HID_InterfaceInit+0x114>
  {
    USBH_UsrLog("Mouse device found!");
 80083a0:	4874      	ldr	r0, [pc, #464]	; (8008574 <USBH_HID_InterfaceInit+0x2d4>)
 80083a2:	f00a fbfb 	bl	8012b9c <iprintf>
 80083a6:	200a      	movs	r0, #10
 80083a8:	f00a fc10 	bl	8012bcc <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	4a72      	ldr	r2, [pc, #456]	; (8008578 <USBH_HID_InterfaceInit+0x2d8>)
 80083b0:	631a      	str	r2, [r3, #48]	; 0x30
 80083b2:	e007      	b.n	80083c4 <USBH_HID_InterfaceInit+0x124>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 80083b4:	4871      	ldr	r0, [pc, #452]	; (800857c <USBH_HID_InterfaceInit+0x2dc>)
 80083b6:	f00a fbf1 	bl	8012b9c <iprintf>
 80083ba:	200a      	movs	r0, #10
 80083bc:	f00a fc06 	bl	8012bcc <putchar>
    return USBH_FAIL;
 80083c0:	2302      	movs	r3, #2
 80083c2:	e0c9      	b.n	8008558 <USBH_HID_InterfaceInit+0x2b8>
  }

  HID_Handle->state     = HID_INIT;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	2200      	movs	r2, #0
 80083c8:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2200      	movs	r2, #0
 80083ce:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80083d0:	7dba      	ldrb	r2, [r7, #22]
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	4613      	mov	r3, r2
 80083d6:	019b      	lsls	r3, r3, #6
 80083d8:	4413      	add	r3, r2
 80083da:	005b      	lsls	r3, r3, #1
 80083dc:	440b      	add	r3, r1
 80083de:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 80083e2:	781a      	ldrb	r2, [r3, #0]
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80083e8:	7dba      	ldrb	r2, [r7, #22]
 80083ea:	6879      	ldr	r1, [r7, #4]
 80083ec:	4613      	mov	r3, r2
 80083ee:	019b      	lsls	r3, r3, #6
 80083f0:	4413      	add	r3, r2
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	440b      	add	r3, r1
 80083f6:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 80083fa:	881a      	ldrh	r2, [r3, #0]
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8008400:	7dba      	ldrb	r2, [r7, #22]
 8008402:	6879      	ldr	r1, [r7, #4]
 8008404:	4613      	mov	r3, r2
 8008406:	019b      	lsls	r3, r3, #6
 8008408:	4413      	add	r3, r2
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	440b      	add	r3, r1
 800840e:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	b29a      	uxth	r2, r3
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	8b9b      	ldrh	r3, [r3, #28]
 800841e:	2b09      	cmp	r3, #9
 8008420:	d802      	bhi.n	8008428 <USBH_HID_InterfaceInit+0x188>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	220a      	movs	r2, #10
 8008426:	839a      	strh	r2, [r3, #28]
  }

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8008428:	7dba      	ldrb	r2, [r7, #22]
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	4613      	mov	r3, r2
 800842e:	019b      	lsls	r3, r3, #6
 8008430:	4413      	add	r3, r2
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	440b      	add	r3, r1
 8008436:	f603 1344 	addw	r3, r3, #2372	; 0x944
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b0f      	cmp	r3, #15
 800843e:	bf28      	it	cs
 8008440:	230f      	movcs	r3, #15
 8008442:	73fb      	strb	r3, [r7, #15]
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8008444:	2300      	movs	r3, #0
 8008446:	75fb      	strb	r3, [r7, #23]
 8008448:	e080      	b.n	800854c <USBH_HID_InterfaceInit+0x2ac>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 800844a:	7dba      	ldrb	r2, [r7, #22]
 800844c:	7dfb      	ldrb	r3, [r7, #23]
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	3301      	adds	r3, #1
 8008452:	00d8      	lsls	r0, r3, #3
 8008454:	4613      	mov	r3, r2
 8008456:	019b      	lsls	r3, r3, #6
 8008458:	4413      	add	r3, r2
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	4403      	add	r3, r0
 800845e:	440b      	add	r3, r1
 8008460:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	b25b      	sxtb	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	da36      	bge.n	80084da <USBH_HID_InterfaceInit+0x23a>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800846c:	7dba      	ldrb	r2, [r7, #22]
 800846e:	7dfb      	ldrb	r3, [r7, #23]
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	3301      	adds	r3, #1
 8008474:	00d8      	lsls	r0, r3, #3
 8008476:	4613      	mov	r3, r2
 8008478:	019b      	lsls	r3, r3, #6
 800847a:	4413      	add	r3, r2
 800847c:	005b      	lsls	r3, r3, #1
 800847e:	4403      	add	r3, r0
 8008480:	440b      	add	r3, r1
 8008482:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8008486:	781a      	ldrb	r2, [r3, #0]
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	791b      	ldrb	r3, [r3, #4]
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f005 fc0f 	bl	800dcb6 <USBH_AllocPipe>
 8008498:	4603      	mov	r3, r0
 800849a:	461a      	mov	r2, r3
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	7859      	ldrb	r1, [r3, #1]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	7918      	ldrb	r0, [r3, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	8b12      	ldrh	r2, [r2, #24]
 80084b8:	9202      	str	r2, [sp, #8]
 80084ba:	2203      	movs	r2, #3
 80084bc:	9201      	str	r2, [sp, #4]
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	4623      	mov	r3, r4
 80084c2:	4602      	mov	r2, r0
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f005 fbc7 	bl	800dc58 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	785b      	ldrb	r3, [r3, #1]
 80084ce:	2200      	movs	r2, #0
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f005 ff0f 	bl	800e2f6 <USBH_LL_SetToggle>
 80084d8:	e035      	b.n	8008546 <USBH_HID_InterfaceInit+0x2a6>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 80084da:	7dba      	ldrb	r2, [r7, #22]
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	3301      	adds	r3, #1
 80084e2:	00d8      	lsls	r0, r3, #3
 80084e4:	4613      	mov	r3, r2
 80084e6:	019b      	lsls	r3, r3, #6
 80084e8:	4413      	add	r3, r2
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	4403      	add	r3, r0
 80084ee:	440b      	add	r3, r1
 80084f0:	f603 1344 	addw	r3, r3, #2372	; 0x944
 80084f4:	781a      	ldrb	r2, [r3, #0]
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	78db      	ldrb	r3, [r3, #3]
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f005 fbd8 	bl	800dcb6 <USBH_AllocPipe>
 8008506:	4603      	mov	r3, r0
 8008508:	461a      	mov	r2, r3
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	7819      	ldrb	r1, [r3, #0]
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	78d8      	ldrb	r0, [r3, #3]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	8b12      	ldrh	r2, [r2, #24]
 8008526:	9202      	str	r2, [sp, #8]
 8008528:	2203      	movs	r2, #3
 800852a:	9201      	str	r2, [sp, #4]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	4623      	mov	r3, r4
 8008530:	4602      	mov	r2, r0
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f005 fb90 	bl	800dc58 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2200      	movs	r2, #0
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f005 fed8 	bl	800e2f6 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8008546:	7dfb      	ldrb	r3, [r7, #23]
 8008548:	3301      	adds	r3, #1
 800854a:	75fb      	strb	r3, [r7, #23]
 800854c:	7dfa      	ldrb	r2, [r7, #23]
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	429a      	cmp	r2, r3
 8008552:	f4ff af7a 	bcc.w	800844a <USBH_HID_InterfaceInit+0x1aa>
    }
  }

  return USBH_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	371c      	adds	r7, #28
 800855c:	46bd      	mov	sp, r7
 800855e:	bd90      	pop	{r4, r7, pc}
 8008560:	08013a24 	.word	0x08013a24
 8008564:	08013a30 	.word	0x08013a30
 8008568:	08013a58 	.word	0x08013a58
 800856c:	08013a80 	.word	0x08013a80
 8008570:	08008bad 	.word	0x08008bad
 8008574:	08013a98 	.word	0x08013a98
 8008578:	08008c61 	.word	0x08008c61
 800857c:	08013aac 	.word	0x08013aac

08008580 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800858e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008592:	69db      	ldr	r3, [r3, #28]
 8008594:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	785b      	ldrb	r3, [r3, #1]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00e      	beq.n	80085bc <USBH_HID_InterfaceDeInit+0x3c>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	785b      	ldrb	r3, [r3, #1]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f005 fb76 	bl	800dc96 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	785b      	ldrb	r3, [r3, #1]
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f005 fba2 	bl	800dcfa <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00e      	beq.n	80085e2 <USBH_HID_InterfaceDeInit+0x62>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f005 fb63 	bl	800dc96 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f005 fb8f 	bl	800dcfa <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085e8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80085ec:	69db      	ldr	r3, [r3, #28]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00f      	beq.n	8008612 <USBH_HID_InterfaceDeInit+0x92>
  {
    USBH_free(phost->pActiveClass->pData);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085f8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	4618      	mov	r0, r3
 8008600:	f009 fed0 	bl	80123a4 <free>
    phost->pActiveClass->pData = 0U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800860a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800860e:	2200      	movs	r2, #0
 8008610:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8008624:	2301      	movs	r3, #1
 8008626:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8008628:	2301      	movs	r3, #1
 800862a:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008632:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	795b      	ldrb	r3, [r3, #5]
 800863e:	2b05      	cmp	r3, #5
 8008640:	d85a      	bhi.n	80086f8 <USBH_HID_ClassRequest+0xdc>
 8008642:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <USBH_HID_ClassRequest+0x2c>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	08008661 	.word	0x08008661
 800864c:	080086f9 	.word	0x080086f9
 8008650:	0800868b 	.word	0x0800868b
 8008654:	08008661 	.word	0x08008661
 8008658:	080086a5 	.word	0x080086a5
 800865c:	080086cf 	.word	0x080086cf
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      /* Get HID Desc */
      if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE) == USBH_OK)
 8008660:	2109      	movs	r1, #9
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f95d 	bl	8008922 <USBH_HID_GetHIDDescriptor>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d146      	bne.n	80086fc <USBH_HID_ClassRequest+0xe0>
      {

        USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800867a:	4619      	mov	r1, r3
 800867c:	4610      	mov	r0, r2
 800867e:	f000 f9e3 	bl	8008a48 <USBH_HID_ParseHIDDesc>
        HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2202      	movs	r2, #2
 8008686:	715a      	strb	r2, [r3, #5]
      }

      break;
 8008688:	e038      	b.n	80086fc <USBH_HID_ClassRequest+0xe0>
    case HID_REQ_GET_REPORT_DESC:


      /* Get Report Desc */
      if (USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength) == USBH_OK)
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f92d 	bl	80088f0 <USBH_HID_GetHIDReportDescriptor>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d131      	bne.n	8008700 <USBH_HID_ClassRequest+0xe4>
      {
        /* The descriptor is available in phost->device.Data */

        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2204      	movs	r2, #4
 80086a0:	715a      	strb	r2, [r3, #5]
      }

      break;
 80086a2:	e02d      	b.n	8008700 <USBH_HID_ClassRequest+0xe4>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 80086a4:	2200      	movs	r2, #0
 80086a6:	2100      	movs	r1, #0
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f953 	bl	8008954 <USBH_HID_SetIdle>
 80086ae:	4603      	mov	r3, r0
 80086b0:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d103      	bne.n	80086c0 <USBH_HID_ClassRequest+0xa4>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2205      	movs	r2, #5
 80086bc:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 80086be:	e021      	b.n	8008704 <USBH_HID_ClassRequest+0xe8>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d11e      	bne.n	8008704 <USBH_HID_ClassRequest+0xe8>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2205      	movs	r2, #5
 80086ca:	715a      	strb	r2, [r3, #5]
      break;
 80086cc:	e01a      	b.n	8008704 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      if (USBH_HID_SetProtocol(phost, 0U) == USBH_OK)
 80086ce:	2100      	movs	r1, #0
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f993 	bl	80089fc <USBH_HID_SetProtocol>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d115      	bne.n	8008708 <USBH_HID_ClassRequest+0xec>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2201      	movs	r2, #1
 80086e0:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086e8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80086ec:	2102      	movs	r1, #2
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	4798      	blx	r3
        status = USBH_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086f6:	e007      	b.n	8008708 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_IDLE:
    default:
      break;
 80086f8:	bf00      	nop
 80086fa:	e006      	b.n	800870a <USBH_HID_ClassRequest+0xee>
      break;
 80086fc:	bf00      	nop
 80086fe:	e004      	b.n	800870a <USBH_HID_ClassRequest+0xee>
      break;
 8008700:	bf00      	nop
 8008702:	e002      	b.n	800870a <USBH_HID_ClassRequest+0xee>
      break;
 8008704:	bf00      	nop
 8008706:	e000      	b.n	800870a <USBH_HID_ClassRequest+0xee>
      break;
 8008708:	bf00      	nop
  }

  return status;
 800870a:	7bfb      	ldrb	r3, [r7, #15]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af02      	add	r7, sp, #8
 800871a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008726:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	789b      	ldrb	r3, [r3, #2]
 8008732:	2b06      	cmp	r3, #6
 8008734:	f200 80ad 	bhi.w	8008892 <USBH_HID_Process+0x17e>
 8008738:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <USBH_HID_Process+0x2c>)
 800873a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873e:	bf00      	nop
 8008740:	0800875d 	.word	0x0800875d
 8008744:	0800876d 	.word	0x0800876d
 8008748:	08008893 	.word	0x08008893
 800874c:	08008893 	.word	0x08008893
 8008750:	080087e1 	.word	0x080087e1
 8008754:	080087c7 	.word	0x080087c7
 8008758:	08008813 	.word	0x08008813
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	2201      	movs	r2, #1
 8008768:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800876a:	e097      	b.n	800889c <USBH_HID_Process+0x188>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	695a      	ldr	r2, [r3, #20]
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	8b1b      	ldrh	r3, [r3, #24]
 8008774:	b2db      	uxtb	r3, r3
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	4613      	mov	r3, r2
 800877a:	2200      	movs	r2, #0
 800877c:	2101      	movs	r1, #1
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f910 	bl	80089a4 <USBH_HID_GetReport>
 8008784:	4603      	mov	r3, r0
 8008786:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d103      	bne.n	8008796 <USBH_HID_Process+0x82>
      {
        HID_Handle->state = HID_SYNC;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	2205      	movs	r2, #5
 8008792:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008794:	e082      	b.n	800889c <USBH_HID_Process+0x188>
      else if (status == USBH_BUSY)
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d105      	bne.n	80087a8 <USBH_HID_Process+0x94>
        HID_Handle->state = HID_IDLE;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	2201      	movs	r2, #1
 80087a0:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	75fb      	strb	r3, [r7, #23]
      break;
 80087a6:	e079      	b.n	800889c <USBH_HID_Process+0x188>
      else if (status == USBH_NOT_SUPPORTED)
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d105      	bne.n	80087ba <USBH_HID_Process+0xa6>
        HID_Handle->state = HID_SYNC;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2205      	movs	r2, #5
 80087b2:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	75fb      	strb	r3, [r7, #23]
      break;
 80087b8:	e070      	b.n	800889c <USBH_HID_Process+0x188>
        HID_Handle->state = HID_ERROR;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	2207      	movs	r2, #7
 80087be:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80087c0:	2302      	movs	r3, #2
 80087c2:	75fb      	strb	r3, [r7, #23]
      break;
 80087c4:	e06a      	b.n	800889c <USBH_HID_Process+0x188>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087cc:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d05e      	beq.n	8008896 <USBH_HID_Process+0x182>
      {
        HID_Handle->state = HID_GET_DATA;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	2204      	movs	r2, #4
 80087dc:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80087de:	e05a      	b.n	8008896 <USBH_HID_Process+0x182>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f005 f9f8 	bl	800dbe4 <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2206      	movs	r2, #6
 80087f8:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008800:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8008810:	e044      	b.n	800889c <USBH_HID_Process+0x188>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	785b      	ldrb	r3, [r3, #1]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f005 fd49 	bl	800e2b0 <USBH_LL_GetURBState>
 800881e:	4603      	mov	r3, r0
 8008820:	2b01      	cmp	r3, #1
 8008822:	d120      	bne.n	8008866 <USBH_HID_Process+0x152>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	785b      	ldrb	r3, [r3, #1]
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f005 fca6 	bl	800e17c <USBH_LL_GetLastXferSize>
 8008830:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008838:	2b00      	cmp	r3, #0
 800883a:	d12e      	bne.n	800889a <USBH_HID_Process+0x186>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d02b      	beq.n	800889a <USBH_HID_Process+0x186>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f103 0008 	add.w	r0, r3, #8
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	6959      	ldr	r1, [r3, #20]
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	8b1b      	ldrh	r3, [r3, #24]
 8008850:	461a      	mov	r2, r3
 8008852:	f000 f94e 	bl	8008af2 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f99a 	bl	8008b98 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8008864:	e019      	b.n	800889a <USBH_HID_Process+0x186>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	785b      	ldrb	r3, [r3, #1]
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f005 fd1f 	bl	800e2b0 <USBH_LL_GetURBState>
 8008872:	4603      	mov	r3, r0
 8008874:	2b05      	cmp	r3, #5
 8008876:	d110      	bne.n	800889a <USBH_HID_Process+0x186>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	7e9b      	ldrb	r3, [r3, #26]
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f004 fd69 	bl	800d356 <USBH_ClrFeature>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d107      	bne.n	800889a <USBH_HID_Process+0x186>
            HID_Handle->state = HID_GET_DATA;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2204      	movs	r2, #4
 800888e:	709a      	strb	r2, [r3, #2]
      break;
 8008890:	e003      	b.n	800889a <USBH_HID_Process+0x186>

    default:
      break;
 8008892:	bf00      	nop
 8008894:	e002      	b.n	800889c <USBH_HID_Process+0x188>
      break;
 8008896:	bf00      	nop
 8008898:	e000      	b.n	800889c <USBH_HID_Process+0x188>
      break;
 800889a:	bf00      	nop
  }

  return status;
 800889c:	7dfb      	ldrb	r3, [r7, #23]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop

080088a8 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	789b      	ldrb	r3, [r3, #2]
 80088c2:	2b06      	cmp	r3, #6
 80088c4:	d10e      	bne.n	80088e4 <USBH_HID_SOFProcess+0x3c>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088cc:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	8b92      	ldrh	r2, [r2, #28]
 80088da:	4293      	cmp	r3, r2
 80088dc:	d302      	bcc.n	80088e4 <USBH_HID_SOFProcess+0x3c>
    {
      HID_Handle->state = HID_GET_DATA;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2204      	movs	r2, #4
 80088e2:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
  }
  return USBH_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3714      	adds	r7, #20
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bc80      	pop	{r7}
 80088ee:	4770      	bx	lr

080088f0 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008902:	887b      	ldrh	r3, [r7, #2]
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	4613      	mov	r3, r2
 8008908:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800890c:	2101      	movs	r1, #1
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f004 fc5a 	bl	800d1c8 <USBH_GetDescriptor>
 8008914:	4603      	mov	r3, r0
 8008916:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8008918:	7bfb      	ldrb	r3, [r7, #15]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <USBH_HID_GetHIDDescriptor>:
  * @param  Length : HID Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor(USBH_HandleTypeDef *phost,
                                             uint16_t length)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b086      	sub	sp, #24
 8008926:	af02      	add	r7, sp, #8
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	460b      	mov	r3, r1
 800892c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID,
                              phost->device.Data,
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008934:	887b      	ldrh	r3, [r7, #2]
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	4613      	mov	r3, r2
 800893a:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 800893e:	2101      	movs	r1, #1
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f004 fc41 	bl	800d1c8 <USBH_GetDescriptor>
 8008946:	4603      	mov	r3, r0
 8008948:	73fb      	strb	r3, [r7, #15]
                              length);

  return status;
 800894a:	7bfb      	ldrb	r3, [r7, #15]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
 8008960:	4613      	mov	r3, r2
 8008962:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2221      	movs	r2, #33	; 0x21
 8008968:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	220a      	movs	r2, #10
 800896e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	b29b      	uxth	r3, r3
 8008974:	021b      	lsls	r3, r3, #8
 8008976:	b29a      	uxth	r2, r3
 8008978:	78bb      	ldrb	r3, [r7, #2]
 800897a:	b29b      	uxth	r3, r3
 800897c:	4313      	orrs	r3, r2
 800897e:	b29a      	uxth	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8008990:	2200      	movs	r2, #0
 8008992:	2100      	movs	r1, #0
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f004 febb 	bl	800d710 <USBH_CtlReq>
 800899a:	4603      	mov	r3, r0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	607b      	str	r3, [r7, #4]
 80089ae:	460b      	mov	r3, r1
 80089b0:	72fb      	strb	r3, [r7, #11]
 80089b2:	4613      	mov	r3, r2
 80089b4:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	22a1      	movs	r2, #161	; 0xa1
 80089ba:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2201      	movs	r2, #1
 80089c0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 80089c2:	7afb      	ldrb	r3, [r7, #11]
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	021b      	lsls	r3, r3, #8
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	7abb      	ldrb	r3, [r7, #10]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	4313      	orrs	r3, r2
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80089dc:	7e3b      	ldrb	r3, [r7, #24]
 80089de:	b29a      	uxth	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 80089e4:	7e3b      	ldrb	r3, [r7, #24]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	461a      	mov	r2, r3
 80089ea:	6879      	ldr	r1, [r7, #4]
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f004 fe8f 	bl	800d710 <USBH_CtlReq>
 80089f2:	4603      	mov	r3, r0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2221      	movs	r2, #33	; 0x21
 8008a0c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	220b      	movs	r2, #11
 8008a12:	745a      	strb	r2, [r3, #17]
  if (protocol)
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	825a      	strh	r2, [r3, #18]
 8008a20:	e002      	b.n	8008a28 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8008a34:	2200      	movs	r2, #0
 8008a36:	2100      	movs	r1, #0
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f004 fe69 	bl	800d710 <USBH_CtlReq>
 8008a3e:	4603      	mov	r3, r0

}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]

  desc->bLength                  = *(uint8_t *)(buf + 0);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781a      	ldrb	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	701a      	strb	r2, [r3, #0]
  desc->bDescriptorType          = *(uint8_t *)(buf + 1);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	785a      	ldrb	r2, [r3, #1]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	705a      	strb	r2, [r3, #1]
  desc->bcdHID                   =  LE16(buf + 2);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	3302      	adds	r3, #2
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	3303      	adds	r3, #3
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	021b      	lsls	r3, r3, #8
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	4313      	orrs	r3, r2
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	805a      	strh	r2, [r3, #2]
  desc->bCountryCode             = *(uint8_t *)(buf + 4);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	791a      	ldrb	r2, [r3, #4]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	711a      	strb	r2, [r3, #4]
  desc->bNumDescriptors          = *(uint8_t *)(buf + 5);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	795a      	ldrb	r2, [r3, #5]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	715a      	strb	r2, [r3, #5]
  desc->bReportDescriptorType    = *(uint8_t *)(buf + 6);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	799a      	ldrb	r2, [r3, #6]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	719a      	strb	r2, [r3, #6]
  desc->wItemLength              =  LE16(buf + 7);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	3307      	adds	r3, #7
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	021b      	lsls	r3, r3, #8
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	811a      	strh	r2, [r3, #8]
}
 8008ab2:	bf00      	nop
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr

08008abc <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	88fa      	ldrh	r2, [r7, #6]
 8008ae0:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	601a      	str	r2, [r3, #0]
}
 8008ae8:	bf00      	nop
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bc80      	pop	{r7}
 8008af0:	4770      	bx	lr

08008af2 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b087      	sub	sp, #28
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	4613      	mov	r3, r2
 8008afe:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	7a9b      	ldrb	r3, [r3, #10]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d13c      	bne.n	8008b86 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8008b12:	2300      	movs	r3, #0
 8008b14:	82fb      	strh	r3, [r7, #22]
 8008b16:	e032      	b.n	8008b7e <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	889b      	ldrh	r3, [r3, #4]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	88d2      	ldrh	r2, [r2, #6]
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00a      	beq.n	8008b3c <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	889b      	ldrh	r3, [r3, #4]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d108      	bne.n	8008b46 <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	88db      	ldrh	r3, [r3, #6]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d104      	bne.n	8008b46 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	729a      	strb	r2, [r3, #10]
        return i;
 8008b42:	8afb      	ldrh	r3, [r7, #22]
 8008b44:	e023      	b.n	8008b8e <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	613a      	str	r2, [r7, #16]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	6812      	ldr	r2, [r2, #0]
 8008b50:	68f9      	ldr	r1, [r7, #12]
 8008b52:	8889      	ldrh	r1, [r1, #4]
 8008b54:	440a      	add	r2, r1
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	7013      	strb	r3, [r2, #0]
        f->head++;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	889b      	ldrh	r3, [r3, #4]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	889a      	ldrh	r2, [r3, #4]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	891b      	ldrh	r3, [r3, #8]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d102      	bne.n	8008b78 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8008b78:	8afb      	ldrh	r3, [r7, #22]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	82fb      	strh	r3, [r7, #22]
 8008b7e:	8afa      	ldrh	r2, [r7, #22]
 8008b80:	88fb      	ldrh	r3, [r7, #6]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d3c8      	bcc.n	8008b18 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8008b8c:	88fb      	ldrh	r3, [r7, #6]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	371c      	adds	r7, #28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bc80      	pop	{r7}
 8008b96:	4770      	bx	lr

08008b98 <USBH_HID_EventCallback>:
* @brief  The function is a callback about HID Data events
*  @param  phost: Selected device
* @retval None
*/
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bc80      	pop	{r7}
 8008ba8:	4770      	bx	lr
	...

08008bac <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bba:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8008bc2:	4b24      	ldr	r3, [pc, #144]	; (8008c54 <USBH_HID_KeybdInit+0xa8>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	709a      	strb	r2, [r3, #2]
 8008bc8:	4b22      	ldr	r3, [pc, #136]	; (8008c54 <USBH_HID_KeybdInit+0xa8>)
 8008bca:	789a      	ldrb	r2, [r3, #2]
 8008bcc:	4b21      	ldr	r3, [pc, #132]	; (8008c54 <USBH_HID_KeybdInit+0xa8>)
 8008bce:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8008bd0:	4b20      	ldr	r3, [pc, #128]	; (8008c54 <USBH_HID_KeybdInit+0xa8>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	711a      	strb	r2, [r3, #4]
 8008bd6:	4b1f      	ldr	r3, [pc, #124]	; (8008c54 <USBH_HID_KeybdInit+0xa8>)
 8008bd8:	791a      	ldrb	r2, [r3, #4]
 8008bda:	4b1e      	ldr	r3, [pc, #120]	; (8008c54 <USBH_HID_KeybdInit+0xa8>)
 8008bdc:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8008bde:	4b1d      	ldr	r3, [pc, #116]	; (8008c54 <USBH_HID_KeybdInit+0xa8>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	719a      	strb	r2, [r3, #6]
 8008be4:	4b1b      	ldr	r3, [pc, #108]	; (8008c54 <USBH_HID_KeybdInit+0xa8>)
 8008be6:	799a      	ldrb	r2, [r3, #6]
 8008be8:	4b1a      	ldr	r3, [pc, #104]	; (8008c54 <USBH_HID_KeybdInit+0xa8>)
 8008bea:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8008bec:	4b19      	ldr	r3, [pc, #100]	; (8008c54 <USBH_HID_KeybdInit+0xa8>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	721a      	strb	r2, [r3, #8]
 8008bf2:	4b18      	ldr	r3, [pc, #96]	; (8008c54 <USBH_HID_KeybdInit+0xa8>)
 8008bf4:	7a1a      	ldrb	r2, [r3, #8]
 8008bf6:	4b17      	ldr	r3, [pc, #92]	; (8008c54 <USBH_HID_KeybdInit+0xa8>)
 8008bf8:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	e00c      	b.n	8008c1a <USBH_HID_KeybdInit+0x6e>
  {
    keybd_report_data[x] = 0U;
 8008c00:	4a15      	ldr	r2, [pc, #84]	; (8008c58 <USBH_HID_KeybdInit+0xac>)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2100      	movs	r1, #0
 8008c06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8008c0a:	4a14      	ldr	r2, [pc, #80]	; (8008c5c <USBH_HID_KeybdInit+0xb0>)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2100      	movs	r1, #0
 8008c10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3301      	adds	r3, #1
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d9ef      	bls.n	8008c00 <USBH_HID_KeybdInit+0x54>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	8b1b      	ldrh	r3, [r3, #24]
 8008c24:	2b08      	cmp	r3, #8
 8008c26:	d902      	bls.n	8008c2e <USBH_HID_KeybdInit+0x82>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2208      	movs	r2, #8
 8008c2c:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	4a0a      	ldr	r2, [pc, #40]	; (8008c5c <USBH_HID_KeybdInit+0xb0>)
 8008c32:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	f103 0008 	add.w	r0, r3, #8
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008c40:	2250      	movs	r2, #80	; 0x50
 8008c42:	4619      	mov	r1, r3
 8008c44:	f7ff ff3a 	bl	8008abc <USBH_HID_FifoInit>

  return USBH_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20000b30 	.word	0x20000b30
 8008c58:	20000b48 	.word	0x20000b48
 8008c5c:	20000b40 	.word	0x20000b40

08008c60 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c6e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8008c76:	4b1d      	ldr	r3, [pc, #116]	; (8008cec <USBH_HID_MouseInit+0x8c>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8008c7c:	4b1b      	ldr	r3, [pc, #108]	; (8008cec <USBH_HID_MouseInit+0x8c>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8008c82:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <USBH_HID_MouseInit+0x8c>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8008c88:	4b18      	ldr	r3, [pc, #96]	; (8008cec <USBH_HID_MouseInit+0x8c>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8008c8e:	4b17      	ldr	r3, [pc, #92]	; (8008cec <USBH_HID_MouseInit+0x8c>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8008c94:	2300      	movs	r3, #0
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	e00c      	b.n	8008cb4 <USBH_HID_MouseInit+0x54>
  {
    mouse_report_data[i] = 0U;
 8008c9a:	4a15      	ldr	r2, [pc, #84]	; (8008cf0 <USBH_HID_MouseInit+0x90>)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8008ca4:	4a13      	ldr	r2, [pc, #76]	; (8008cf4 <USBH_HID_MouseInit+0x94>)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2100      	movs	r1, #0
 8008caa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d9ef      	bls.n	8008c9a <USBH_HID_MouseInit+0x3a>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	8b1b      	ldrh	r3, [r3, #24]
 8008cbe:	2b08      	cmp	r3, #8
 8008cc0:	d902      	bls.n	8008cc8 <USBH_HID_MouseInit+0x68>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	2208      	movs	r2, #8
 8008cc6:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4a0a      	ldr	r2, [pc, #40]	; (8008cf4 <USBH_HID_MouseInit+0x94>)
 8008ccc:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f103 0008 	add.w	r0, r3, #8
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008cda:	2250      	movs	r2, #80	; 0x50
 8008cdc:	4619      	mov	r1, r3
 8008cde:	f7ff feed 	bl	8008abc <USBH_HID_FifoInit>

  return USBH_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	20000b50 	.word	0x20000b50
 8008cf0:	20000b58 	.word	0x20000b58
 8008cf4:	20000b60 	.word	0x20000b60

08008cf8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008cf8:	b590      	push	{r4, r7, lr}
 8008cfa:	b089      	sub	sp, #36	; 0x24
 8008cfc:	af04      	add	r7, sp, #16
 8008cfe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d06:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008d0a:	7919      	ldrb	r1, [r3, #4]
 8008d0c:	2350      	movs	r3, #80	; 0x50
 8008d0e:	2206      	movs	r2, #6
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f003 fd05 	bl	800c720 <USBH_FindInterface>
 8008d16:	4603      	mov	r3, r0
 8008d18:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	2bff      	cmp	r3, #255	; 0xff
 8008d1e:	d002      	beq.n	8008d26 <USBH_MSC_InterfaceInit+0x2e>
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	2b0e      	cmp	r3, #14
 8008d24:	d911      	bls.n	8008d4a <USBH_MSC_InterfaceInit+0x52>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8008d26:	488e      	ldr	r0, [pc, #568]	; (8008f60 <USBH_MSC_InterfaceInit+0x268>)
 8008d28:	f009 ff38 	bl	8012b9c <iprintf>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d32:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	488a      	ldr	r0, [pc, #552]	; (8008f64 <USBH_MSC_InterfaceInit+0x26c>)
 8008d3c:	f009 ff2e 	bl	8012b9c <iprintf>
 8008d40:	200a      	movs	r0, #10
 8008d42:	f009 ff43 	bl	8012bcc <putchar>
    return USBH_FAIL;
 8008d46:	2302      	movs	r3, #2
 8008d48:	e106      	b.n	8008f58 <USBH_MSC_InterfaceInit+0x260>
  }

  status = USBH_SelectInterface(phost, interface);
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f003 fc7c 	bl	800c64c <USBH_SelectInterface>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <USBH_MSC_InterfaceInit+0x6a>
  {
    return USBH_FAIL;
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e0fa      	b.n	8008f58 <USBH_MSC_InterfaceInit+0x260>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d68:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 8008d6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008d70:	f009 fb10 	bl	8012394 <malloc>
 8008d74:	4603      	mov	r3, r0
 8008d76:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d7e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10a      	bne.n	8008da2 <USBH_MSC_InterfaceInit+0xaa>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 8008d8c:	4874      	ldr	r0, [pc, #464]	; (8008f60 <USBH_MSC_InterfaceInit+0x268>)
 8008d8e:	f009 ff05 	bl	8012b9c <iprintf>
 8008d92:	4875      	ldr	r0, [pc, #468]	; (8008f68 <USBH_MSC_InterfaceInit+0x270>)
 8008d94:	f009 ff02 	bl	8012b9c <iprintf>
 8008d98:	200a      	movs	r0, #10
 8008d9a:	f009 ff17 	bl	8012bcc <putchar>
    return USBH_FAIL;
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e0da      	b.n	8008f58 <USBH_MSC_InterfaceInit+0x260>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008da6:	2100      	movs	r1, #0
 8008da8:	68b8      	ldr	r0, [r7, #8]
 8008daa:	f009 fb11 	bl	80123d0 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008dae:	7bfa      	ldrb	r2, [r7, #15]
 8008db0:	6879      	ldr	r1, [r7, #4]
 8008db2:	4613      	mov	r3, r2
 8008db4:	019b      	lsls	r3, r3, #6
 8008db6:	4413      	add	r3, r2
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	440b      	add	r3, r1
 8008dbc:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	b25b      	sxtb	r3, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	da18      	bge.n	8008dfa <USBH_MSC_InterfaceInit+0x102>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008dc8:	7bfa      	ldrb	r2, [r7, #15]
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	019b      	lsls	r3, r3, #6
 8008dd0:	4413      	add	r3, r2
 8008dd2:	005b      	lsls	r3, r3, #1
 8008dd4:	440b      	add	r3, r1
 8008dd6:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8008dda:	781a      	ldrb	r2, [r3, #0]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008de0:	7bfa      	ldrb	r2, [r7, #15]
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	4613      	mov	r3, r2
 8008de6:	019b      	lsls	r3, r3, #6
 8008de8:	4413      	add	r3, r2
 8008dea:	005b      	lsls	r3, r3, #1
 8008dec:	440b      	add	r3, r1
 8008dee:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 8008df2:	881a      	ldrh	r2, [r3, #0]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	815a      	strh	r2, [r3, #10]
 8008df8:	e017      	b.n	8008e2a <USBH_MSC_InterfaceInit+0x132>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008dfa:	7bfa      	ldrb	r2, [r7, #15]
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	019b      	lsls	r3, r3, #6
 8008e02:	4413      	add	r3, r2
 8008e04:	005b      	lsls	r3, r3, #1
 8008e06:	440b      	add	r3, r1
 8008e08:	f603 134c 	addw	r3, r3, #2380	; 0x94c
 8008e0c:	781a      	ldrb	r2, [r3, #0]
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e12:	7bfa      	ldrb	r2, [r7, #15]
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	4613      	mov	r3, r2
 8008e18:	019b      	lsls	r3, r3, #6
 8008e1a:	4413      	add	r3, r2
 8008e1c:	005b      	lsls	r3, r3, #1
 8008e1e:	440b      	add	r3, r1
 8008e20:	f603 134e 	addw	r3, r3, #2382	; 0x94e
 8008e24:	881a      	ldrh	r2, [r3, #0]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008e2a:	7bfa      	ldrb	r2, [r7, #15]
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	019b      	lsls	r3, r3, #6
 8008e32:	4413      	add	r3, r2
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	440b      	add	r3, r1
 8008e38:	f603 1354 	addw	r3, r3, #2388	; 0x954
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	b25b      	sxtb	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	da18      	bge.n	8008e76 <USBH_MSC_InterfaceInit+0x17e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008e44:	7bfa      	ldrb	r2, [r7, #15]
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	019b      	lsls	r3, r3, #6
 8008e4c:	4413      	add	r3, r2
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	440b      	add	r3, r1
 8008e52:	f603 1354 	addw	r3, r3, #2388	; 0x954
 8008e56:	781a      	ldrb	r2, [r3, #0]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e5c:	7bfa      	ldrb	r2, [r7, #15]
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	4613      	mov	r3, r2
 8008e62:	019b      	lsls	r3, r3, #6
 8008e64:	4413      	add	r3, r2
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	440b      	add	r3, r1
 8008e6a:	f603 1356 	addw	r3, r3, #2390	; 0x956
 8008e6e:	881a      	ldrh	r2, [r3, #0]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	815a      	strh	r2, [r3, #10]
 8008e74:	e017      	b.n	8008ea6 <USBH_MSC_InterfaceInit+0x1ae>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008e76:	7bfa      	ldrb	r2, [r7, #15]
 8008e78:	6879      	ldr	r1, [r7, #4]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	019b      	lsls	r3, r3, #6
 8008e7e:	4413      	add	r3, r2
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	440b      	add	r3, r1
 8008e84:	f603 1354 	addw	r3, r3, #2388	; 0x954
 8008e88:	781a      	ldrb	r2, [r3, #0]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e8e:	7bfa      	ldrb	r2, [r7, #15]
 8008e90:	6879      	ldr	r1, [r7, #4]
 8008e92:	4613      	mov	r3, r2
 8008e94:	019b      	lsls	r3, r3, #6
 8008e96:	4413      	add	r3, r2
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	440b      	add	r3, r1
 8008e9c:	f603 1356 	addw	r3, r3, #2390	; 0x956
 8008ea0:	881a      	ldrh	r2, [r3, #0]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	799b      	ldrb	r3, [r3, #6]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f004 fef9 	bl	800dcb6 <USBH_AllocPipe>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	79db      	ldrb	r3, [r3, #7]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f004 feef 	bl	800dcb6 <USBH_AllocPipe>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	461a      	mov	r2, r3
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fcd7 	bl	8009894 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	7959      	ldrb	r1, [r3, #5]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	7998      	ldrb	r0, [r3, #6]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	8912      	ldrh	r2, [r2, #8]
 8008efe:	9202      	str	r2, [sp, #8]
 8008f00:	2202      	movs	r2, #2
 8008f02:	9201      	str	r2, [sp, #4]
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	4623      	mov	r3, r4
 8008f08:	4602      	mov	r2, r0
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f004 fea4 	bl	800dc58 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	7919      	ldrb	r1, [r3, #4]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	79d8      	ldrb	r0, [r3, #7]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	8952      	ldrh	r2, [r2, #10]
 8008f28:	9202      	str	r2, [sp, #8]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	9201      	str	r2, [sp, #4]
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	4623      	mov	r3, r4
 8008f32:	4602      	mov	r2, r0
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f004 fe8f 	bl	800dc58 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	791b      	ldrb	r3, [r3, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f005 f9d7 	bl	800e2f6 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	795b      	ldrb	r3, [r3, #5]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f005 f9d0 	bl	800e2f6 <USBH_LL_SetToggle>

  return USBH_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd90      	pop	{r4, r7, pc}
 8008f60:	08013ac8 	.word	0x08013ac8
 8008f64:	08013ad4 	.word	0x08013ad4
 8008f68:	08013afc 	.word	0x08013afc

08008f6c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f7a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	795b      	ldrb	r3, [r3, #5]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00e      	beq.n	8008fa8 <USBH_MSC_InterfaceDeInit+0x3c>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	795b      	ldrb	r3, [r3, #5]
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f004 fe80 	bl	800dc96 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	795b      	ldrb	r3, [r3, #5]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f004 feac 	bl	800dcfa <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	791b      	ldrb	r3, [r3, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00e      	beq.n	8008fce <USBH_MSC_InterfaceDeInit+0x62>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	791b      	ldrb	r3, [r3, #4]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f004 fe6d 	bl	800dc96 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	791b      	ldrb	r3, [r3, #4]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f004 fe99 	bl	800dcfa <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fd4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00f      	beq.n	8008ffe <USBH_MSC_InterfaceDeInit+0x92>
  {
    USBH_free(phost->pActiveClass->pData);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fe4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f009 f9da 	bl	80123a4 <free>
    phost->pActiveClass->pData = 0U;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009016:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800901e:	2301      	movs	r3, #1
 8009020:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	7b9b      	ldrb	r3, [r3, #14]
 8009026:	2b03      	cmp	r3, #3
 8009028:	d04b      	beq.n	80090c2 <USBH_MSC_ClassRequest+0xba>
 800902a:	2b03      	cmp	r3, #3
 800902c:	dc55      	bgt.n	80090da <USBH_MSC_ClassRequest+0xd2>
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <USBH_MSC_ClassRequest+0x2e>
 8009032:	2b02      	cmp	r3, #2
 8009034:	d151      	bne.n	80090da <USBH_MSC_ClassRequest+0xd2>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fc0b 	bl	8009856 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009040:	4603      	mov	r3, r0
 8009042:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	2b03      	cmp	r3, #3
 8009048:	d104      	bne.n	8009054 <USBH_MSC_ClassRequest+0x4c>
      {
        MSC_Handle->max_lun = 0U;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2200      	movs	r2, #0
 800904e:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d141      	bne.n	80090de <USBH_MSC_ClassRequest+0xd6>
      {
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b02      	cmp	r3, #2
 8009062:	d804      	bhi.n	800906e <USBH_MSC_ClassRequest+0x66>
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	b2db      	uxtb	r3, r3
 800906a:	3301      	adds	r3, #1
 800906c:	e000      	b.n	8009070 <USBH_MSC_ClassRequest+0x68>
 800906e:	2302      	movs	r3, #2
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	6013      	str	r3, [r2, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4619      	mov	r1, r3
 800907a:	481d      	ldr	r0, [pc, #116]	; (80090f0 <USBH_MSC_ClassRequest+0xe8>)
 800907c:	f009 fd8e 	bl	8012b9c <iprintf>
 8009080:	200a      	movs	r0, #10
 8009082:	f009 fda3 	bl	8012bcc <putchar>

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009086:	2300      	movs	r3, #0
 8009088:	73bb      	strb	r3, [r7, #14]
 800908a:	e014      	b.n	80090b6 <USBH_MSC_ClassRequest+0xae>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	2134      	movs	r1, #52	; 0x34
 8009092:	fb01 f303 	mul.w	r3, r1, r3
 8009096:	4413      	add	r3, r2
 8009098:	3392      	adds	r3, #146	; 0x92
 800909a:	2202      	movs	r2, #2
 800909c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800909e:	7bbb      	ldrb	r3, [r7, #14]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	2134      	movs	r1, #52	; 0x34
 80090a4:	fb01 f303 	mul.w	r3, r1, r3
 80090a8:	4413      	add	r3, r2
 80090aa:	33c1      	adds	r3, #193	; 0xc1
 80090ac:	2200      	movs	r2, #0
 80090ae:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
 80090b2:	3301      	adds	r3, #1
 80090b4:	73bb      	strb	r3, [r7, #14]
 80090b6:	7bba      	ldrb	r2, [r7, #14]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d3e5      	bcc.n	800908c <USBH_MSC_ClassRequest+0x84>
        }
      }
      break;
 80090c0:	e00d      	b.n	80090de <USBH_MSC_ClassRequest+0xd6>

    case MSC_REQ_ERROR :
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80090c2:	2100      	movs	r1, #0
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f004 f946 	bl	800d356 <USBH_ClrFeature>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d108      	bne.n	80090e2 <USBH_MSC_ClassRequest+0xda>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	7bda      	ldrb	r2, [r3, #15]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	739a      	strb	r2, [r3, #14]
      }
      break;
 80090d8:	e003      	b.n	80090e2 <USBH_MSC_ClassRequest+0xda>

    default:
      break;
 80090da:	bf00      	nop
 80090dc:	e002      	b.n	80090e4 <USBH_MSC_ClassRequest+0xdc>
      break;
 80090de:	bf00      	nop
 80090e0:	e000      	b.n	80090e4 <USBH_MSC_ClassRequest+0xdc>
      break;
 80090e2:	bf00      	nop
  }

  return status;
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	08013b24 	.word	0x08013b24

080090f4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009102:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800910a:	2301      	movs	r3, #1
 800910c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800910e:	2301      	movs	r3, #1
 8009110:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009112:	2301      	movs	r3, #1
 8009114:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	7b1b      	ldrb	r3, [r3, #12]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d003      	beq.n	8009126 <USBH_MSC_Process+0x32>
 800911e:	2b01      	cmp	r3, #1
 8009120:	f000 835b 	beq.w	80097da <USBH_MSC_Process+0x6e6>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009124:	e35c      	b.n	80097e0 <USBH_MSC_Process+0x6ec>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800912c:	461a      	mov	r2, r3
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	429a      	cmp	r2, r3
 8009134:	f080 8337 	bcs.w	80097a6 <USBH_MSC_Process+0x6b2>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800913e:	4619      	mov	r1, r3
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	2334      	movs	r3, #52	; 0x34
 8009144:	fb01 f303 	mul.w	r3, r1, r3
 8009148:	4413      	add	r3, r2
 800914a:	3391      	adds	r3, #145	; 0x91
 800914c:	2201      	movs	r2, #1
 800914e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009156:	4619      	mov	r1, r3
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	2334      	movs	r3, #52	; 0x34
 800915c:	fb01 f303 	mul.w	r3, r1, r3
 8009160:	4413      	add	r3, r2
 8009162:	3390      	adds	r3, #144	; 0x90
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b08      	cmp	r3, #8
 8009168:	f200 832d 	bhi.w	80097c6 <USBH_MSC_Process+0x6d2>
 800916c:	a201      	add	r2, pc, #4	; (adr r2, 8009174 <USBH_MSC_Process+0x80>)
 800916e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009172:	bf00      	nop
 8009174:	08009199 	.word	0x08009199
 8009178:	080097c7 	.word	0x080097c7
 800917c:	080092e5 	.word	0x080092e5
 8009180:	08009499 	.word	0x08009499
 8009184:	080091d7 	.word	0x080091d7
 8009188:	08009605 	.word	0x08009605
 800918c:	080097c7 	.word	0x080097c7
 8009190:	080097c7 	.word	0x080097c7
 8009194:	08009795 	.word	0x08009795
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800919e:	4619      	mov	r1, r3
 80091a0:	48b7      	ldr	r0, [pc, #732]	; (8009480 <USBH_MSC_Process+0x38c>)
 80091a2:	f009 fcfb 	bl	8012b9c <iprintf>
 80091a6:	200a      	movs	r0, #10
 80091a8:	f009 fd10 	bl	8012bcc <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091b2:	4619      	mov	r1, r3
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	2334      	movs	r3, #52	; 0x34
 80091b8:	fb01 f303 	mul.w	r3, r1, r3
 80091bc:	4413      	add	r3, r2
 80091be:	3390      	adds	r3, #144	; 0x90
 80091c0:	2204      	movs	r2, #4
 80091c2:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ca:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80091d4:	e300      	b.n	80097d8 <USBH_MSC_Process+0x6e4>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091dc:	b2d9      	uxtb	r1, r3
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091e4:	461a      	mov	r2, r3
 80091e6:	2334      	movs	r3, #52	; 0x34
 80091e8:	fb02 f303 	mul.w	r3, r2, r3
 80091ec:	3398      	adds	r3, #152	; 0x98
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	4413      	add	r3, r2
 80091f2:	3307      	adds	r3, #7
 80091f4:	461a      	mov	r2, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fe76 	bl	8009ee8 <USBH_MSC_SCSI_Inquiry>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d141      	bne.n	800928a <USBH_MSC_Process+0x196>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800920c:	461a      	mov	r2, r3
 800920e:	2334      	movs	r3, #52	; 0x34
 8009210:	fb02 f303 	mul.w	r3, r2, r3
 8009214:	3398      	adds	r3, #152	; 0x98
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	4413      	add	r3, r2
 800921a:	330a      	adds	r3, #10
 800921c:	4619      	mov	r1, r3
 800921e:	4899      	ldr	r0, [pc, #612]	; (8009484 <USBH_MSC_Process+0x390>)
 8009220:	f009 fcbc 	bl	8012b9c <iprintf>
 8009224:	200a      	movs	r0, #10
 8009226:	f009 fcd1 	bl	8012bcc <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009230:	461a      	mov	r2, r3
 8009232:	2334      	movs	r3, #52	; 0x34
 8009234:	fb02 f303 	mul.w	r3, r2, r3
 8009238:	33a0      	adds	r3, #160	; 0xa0
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	4413      	add	r3, r2
 800923e:	330b      	adds	r3, #11
 8009240:	4619      	mov	r1, r3
 8009242:	4891      	ldr	r0, [pc, #580]	; (8009488 <USBH_MSC_Process+0x394>)
 8009244:	f009 fcaa 	bl	8012b9c <iprintf>
 8009248:	200a      	movs	r0, #10
 800924a:	f009 fcbf 	bl	8012bcc <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009254:	461a      	mov	r2, r3
 8009256:	2334      	movs	r3, #52	; 0x34
 8009258:	fb02 f303 	mul.w	r3, r2, r3
 800925c:	33b0      	adds	r3, #176	; 0xb0
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	4413      	add	r3, r2
 8009262:	330c      	adds	r3, #12
 8009264:	4619      	mov	r1, r3
 8009266:	4889      	ldr	r0, [pc, #548]	; (800948c <USBH_MSC_Process+0x398>)
 8009268:	f009 fc98 	bl	8012b9c <iprintf>
 800926c:	200a      	movs	r0, #10
 800926e:	f009 fcad 	bl	8012bcc <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009278:	4619      	mov	r1, r3
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	2334      	movs	r3, #52	; 0x34
 800927e:	fb01 f303 	mul.w	r3, r1, r3
 8009282:	4413      	add	r3, r2
 8009284:	3390      	adds	r3, #144	; 0x90
 8009286:	2202      	movs	r2, #2
 8009288:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	2b02      	cmp	r3, #2
 800928e:	d10c      	bne.n	80092aa <USBH_MSC_Process+0x1b6>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009296:	4619      	mov	r1, r3
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	2334      	movs	r3, #52	; 0x34
 800929c:	fb01 f303 	mul.w	r3, r1, r3
 80092a0:	4413      	add	r3, r2
 80092a2:	3390      	adds	r3, #144	; 0x90
 80092a4:	2205      	movs	r2, #5
 80092a6:	701a      	strb	r2, [r3, #0]
            break;
 80092a8:	e28f      	b.n	80097ca <USBH_MSC_Process+0x6d6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	2b04      	cmp	r3, #4
 80092ae:	f040 828c 	bne.w	80097ca <USBH_MSC_Process+0x6d6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092b8:	4619      	mov	r1, r3
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	2334      	movs	r3, #52	; 0x34
 80092be:	fb01 f303 	mul.w	r3, r1, r3
 80092c2:	4413      	add	r3, r2
 80092c4:	3390      	adds	r3, #144	; 0x90
 80092c6:	2201      	movs	r2, #1
 80092c8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092d0:	4619      	mov	r1, r3
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	2334      	movs	r3, #52	; 0x34
 80092d6:	fb01 f303 	mul.w	r3, r1, r3
 80092da:	4413      	add	r3, r2
 80092dc:	3391      	adds	r3, #145	; 0x91
 80092de:	2202      	movs	r2, #2
 80092e0:	701a      	strb	r2, [r3, #0]
            break;
 80092e2:	e272      	b.n	80097ca <USBH_MSC_Process+0x6d6>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fd38 	bl	8009d64 <USBH_MSC_SCSI_TestUnitReady>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d14f      	bne.n	800939e <USBH_MSC_Process+0x2aa>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009304:	4619      	mov	r1, r3
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	2334      	movs	r3, #52	; 0x34
 800930a:	fb01 f303 	mul.w	r3, r1, r3
 800930e:	4413      	add	r3, r2
 8009310:	3392      	adds	r3, #146	; 0x92
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d012      	beq.n	800933e <USBH_MSC_Process+0x24a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800931e:	4619      	mov	r1, r3
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	2334      	movs	r3, #52	; 0x34
 8009324:	fb01 f303 	mul.w	r3, r1, r3
 8009328:	4413      	add	r3, r2
 800932a:	33c1      	adds	r3, #193	; 0xc1
 800932c:	2201      	movs	r2, #1
 800932e:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 8009330:	4857      	ldr	r0, [pc, #348]	; (8009490 <USBH_MSC_Process+0x39c>)
 8009332:	f009 fc33 	bl	8012b9c <iprintf>
 8009336:	200a      	movs	r0, #10
 8009338:	f009 fc48 	bl	8012bcc <putchar>
 800933c:	e00b      	b.n	8009356 <USBH_MSC_Process+0x262>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009344:	4619      	mov	r1, r3
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	2334      	movs	r3, #52	; 0x34
 800934a:	fb01 f303 	mul.w	r3, r1, r3
 800934e:	4413      	add	r3, r2
 8009350:	33c1      	adds	r3, #193	; 0xc1
 8009352:	2200      	movs	r2, #0
 8009354:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800935c:	4619      	mov	r1, r3
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	2334      	movs	r3, #52	; 0x34
 8009362:	fb01 f303 	mul.w	r3, r1, r3
 8009366:	4413      	add	r3, r2
 8009368:	3390      	adds	r3, #144	; 0x90
 800936a:	2203      	movs	r2, #3
 800936c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009374:	4619      	mov	r1, r3
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	2334      	movs	r3, #52	; 0x34
 800937a:	fb01 f303 	mul.w	r3, r1, r3
 800937e:	4413      	add	r3, r2
 8009380:	3391      	adds	r3, #145	; 0x91
 8009382:	2200      	movs	r2, #0
 8009384:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800938c:	4619      	mov	r1, r3
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	2334      	movs	r3, #52	; 0x34
 8009392:	fb01 f303 	mul.w	r3, r1, r3
 8009396:	4413      	add	r3, r2
 8009398:	3392      	adds	r3, #146	; 0x92
 800939a:	2200      	movs	r2, #0
 800939c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d150      	bne.n	8009446 <USBH_MSC_Process+0x352>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093aa:	4619      	mov	r1, r3
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	2334      	movs	r3, #52	; 0x34
 80093b0:	fb01 f303 	mul.w	r3, r1, r3
 80093b4:	4413      	add	r3, r2
 80093b6:	3392      	adds	r3, #146	; 0x92
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d012      	beq.n	80093e4 <USBH_MSC_Process+0x2f0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093c4:	4619      	mov	r1, r3
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	2334      	movs	r3, #52	; 0x34
 80093ca:	fb01 f303 	mul.w	r3, r1, r3
 80093ce:	4413      	add	r3, r2
 80093d0:	33c1      	adds	r3, #193	; 0xc1
 80093d2:	2201      	movs	r2, #1
 80093d4:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 80093d6:	482f      	ldr	r0, [pc, #188]	; (8009494 <USBH_MSC_Process+0x3a0>)
 80093d8:	f009 fbe0 	bl	8012b9c <iprintf>
 80093dc:	200a      	movs	r0, #10
 80093de:	f009 fbf5 	bl	8012bcc <putchar>
 80093e2:	e00b      	b.n	80093fc <USBH_MSC_Process+0x308>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093ea:	4619      	mov	r1, r3
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	2334      	movs	r3, #52	; 0x34
 80093f0:	fb01 f303 	mul.w	r3, r1, r3
 80093f4:	4413      	add	r3, r2
 80093f6:	33c1      	adds	r3, #193	; 0xc1
 80093f8:	2200      	movs	r2, #0
 80093fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009402:	4619      	mov	r1, r3
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	2334      	movs	r3, #52	; 0x34
 8009408:	fb01 f303 	mul.w	r3, r1, r3
 800940c:	4413      	add	r3, r2
 800940e:	3390      	adds	r3, #144	; 0x90
 8009410:	2205      	movs	r2, #5
 8009412:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800941a:	4619      	mov	r1, r3
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	2334      	movs	r3, #52	; 0x34
 8009420:	fb01 f303 	mul.w	r3, r1, r3
 8009424:	4413      	add	r3, r2
 8009426:	3391      	adds	r3, #145	; 0x91
 8009428:	2201      	movs	r2, #1
 800942a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009432:	4619      	mov	r1, r3
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	2334      	movs	r3, #52	; 0x34
 8009438:	fb01 f303 	mul.w	r3, r1, r3
 800943c:	4413      	add	r3, r2
 800943e:	3392      	adds	r3, #146	; 0x92
 8009440:	2202      	movs	r2, #2
 8009442:	701a      	strb	r2, [r3, #0]
            break;
 8009444:	e1c3      	b.n	80097ce <USBH_MSC_Process+0x6da>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009446:	7bbb      	ldrb	r3, [r7, #14]
 8009448:	2b04      	cmp	r3, #4
 800944a:	f040 81c0 	bne.w	80097ce <USBH_MSC_Process+0x6da>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009454:	4619      	mov	r1, r3
 8009456:	693a      	ldr	r2, [r7, #16]
 8009458:	2334      	movs	r3, #52	; 0x34
 800945a:	fb01 f303 	mul.w	r3, r1, r3
 800945e:	4413      	add	r3, r2
 8009460:	3390      	adds	r3, #144	; 0x90
 8009462:	2201      	movs	r2, #1
 8009464:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800946c:	4619      	mov	r1, r3
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	2334      	movs	r3, #52	; 0x34
 8009472:	fb01 f303 	mul.w	r3, r1, r3
 8009476:	4413      	add	r3, r2
 8009478:	3391      	adds	r3, #145	; 0x91
 800947a:	2202      	movs	r2, #2
 800947c:	701a      	strb	r2, [r3, #0]
            break;
 800947e:	e1a6      	b.n	80097ce <USBH_MSC_Process+0x6da>
 8009480:	08013b44 	.word	0x08013b44
 8009484:	08013b50 	.word	0x08013b50
 8009488:	08013b68 	.word	0x08013b68
 800948c:	08013b80 	.word	0x08013b80
 8009490:	08013b98 	.word	0x08013b98
 8009494:	08013bac 	.word	0x08013bac
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800949e:	b2d9      	uxtb	r1, r3
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094a6:	461a      	mov	r2, r3
 80094a8:	2334      	movs	r3, #52	; 0x34
 80094aa:	fb02 f303 	mul.w	r3, r2, r3
 80094ae:	3390      	adds	r3, #144	; 0x90
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	4413      	add	r3, r2
 80094b4:	3304      	adds	r3, #4
 80094b6:	461a      	mov	r2, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fc98 	bl	8009dee <USBH_MSC_SCSI_ReadCapacity>
 80094be:	4603      	mov	r3, r0
 80094c0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d170      	bne.n	80095aa <USBH_MSC_Process+0x4b6>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094ce:	4619      	mov	r1, r3
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	2334      	movs	r3, #52	; 0x34
 80094d4:	fb01 f303 	mul.w	r3, r1, r3
 80094d8:	4413      	add	r3, r2
 80094da:	33c1      	adds	r3, #193	; 0xc1
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d142      	bne.n	8009568 <USBH_MSC_Process+0x474>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094e8:	4619      	mov	r1, r3
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	2334      	movs	r3, #52	; 0x34
 80094ee:	fb01 f303 	mul.w	r3, r1, r3
 80094f2:	4413      	add	r3, r2
 80094f4:	3394      	adds	r3, #148	; 0x94
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 80094fe:	4610      	mov	r0, r2
 8009500:	6939      	ldr	r1, [r7, #16]
 8009502:	2234      	movs	r2, #52	; 0x34
 8009504:	fb00 f202 	mul.w	r2, r0, r2
 8009508:	440a      	add	r2, r1
 800950a:	3298      	adds	r2, #152	; 0x98
 800950c:	8812      	ldrh	r2, [r2, #0]
 800950e:	fb02 f303 	mul.w	r3, r2, r3
 8009512:	4619      	mov	r1, r3
 8009514:	48b5      	ldr	r0, [pc, #724]	; (80097ec <USBH_MSC_Process+0x6f8>)
 8009516:	f009 fb41 	bl	8012b9c <iprintf>
 800951a:	200a      	movs	r0, #10
 800951c:	f009 fb56 	bl	8012bcc <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009526:	4619      	mov	r1, r3
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	2334      	movs	r3, #52	; 0x34
 800952c:	fb01 f303 	mul.w	r3, r1, r3
 8009530:	4413      	add	r3, r2
 8009532:	3394      	adds	r3, #148	; 0x94
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4619      	mov	r1, r3
 8009538:	48ad      	ldr	r0, [pc, #692]	; (80097f0 <USBH_MSC_Process+0x6fc>)
 800953a:	f009 fb2f 	bl	8012b9c <iprintf>
 800953e:	200a      	movs	r0, #10
 8009540:	f009 fb44 	bl	8012bcc <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800954a:	4619      	mov	r1, r3
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	2334      	movs	r3, #52	; 0x34
 8009550:	fb01 f303 	mul.w	r3, r1, r3
 8009554:	4413      	add	r3, r2
 8009556:	3398      	adds	r3, #152	; 0x98
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	4619      	mov	r1, r3
 800955c:	48a5      	ldr	r0, [pc, #660]	; (80097f4 <USBH_MSC_Process+0x700>)
 800955e:	f009 fb1d 	bl	8012b9c <iprintf>
 8009562:	200a      	movs	r0, #10
 8009564:	f009 fb32 	bl	8012bcc <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800956e:	4619      	mov	r1, r3
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	2334      	movs	r3, #52	; 0x34
 8009574:	fb01 f303 	mul.w	r3, r1, r3
 8009578:	4413      	add	r3, r2
 800957a:	3390      	adds	r3, #144	; 0x90
 800957c:	2201      	movs	r2, #1
 800957e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009586:	4619      	mov	r1, r3
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	2334      	movs	r3, #52	; 0x34
 800958c:	fb01 f303 	mul.w	r3, r1, r3
 8009590:	4413      	add	r3, r2
 8009592:	3391      	adds	r3, #145	; 0x91
 8009594:	2200      	movs	r2, #0
 8009596:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800959e:	3301      	adds	r3, #1
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80095a8:	e113      	b.n	80097d2 <USBH_MSC_Process+0x6de>
            else if (scsi_status == USBH_FAIL)
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d10c      	bne.n	80095ca <USBH_MSC_Process+0x4d6>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095b6:	4619      	mov	r1, r3
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	2334      	movs	r3, #52	; 0x34
 80095bc:	fb01 f303 	mul.w	r3, r1, r3
 80095c0:	4413      	add	r3, r2
 80095c2:	3390      	adds	r3, #144	; 0x90
 80095c4:	2205      	movs	r2, #5
 80095c6:	701a      	strb	r2, [r3, #0]
            break;
 80095c8:	e103      	b.n	80097d2 <USBH_MSC_Process+0x6de>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	2b04      	cmp	r3, #4
 80095ce:	f040 8100 	bne.w	80097d2 <USBH_MSC_Process+0x6de>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095d8:	4619      	mov	r1, r3
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	2334      	movs	r3, #52	; 0x34
 80095de:	fb01 f303 	mul.w	r3, r1, r3
 80095e2:	4413      	add	r3, r2
 80095e4:	3390      	adds	r3, #144	; 0x90
 80095e6:	2201      	movs	r2, #1
 80095e8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095f0:	4619      	mov	r1, r3
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	2334      	movs	r3, #52	; 0x34
 80095f6:	fb01 f303 	mul.w	r3, r1, r3
 80095fa:	4413      	add	r3, r2
 80095fc:	3391      	adds	r3, #145	; 0x91
 80095fe:	2202      	movs	r2, #2
 8009600:	701a      	strb	r2, [r3, #0]
            break;
 8009602:	e0e6      	b.n	80097d2 <USBH_MSC_Process+0x6de>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800960a:	b2d9      	uxtb	r1, r3
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009612:	461a      	mov	r2, r3
 8009614:	2334      	movs	r3, #52	; 0x34
 8009616:	fb02 f303 	mul.w	r3, r2, r3
 800961a:	3398      	adds	r3, #152	; 0x98
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	4413      	add	r3, r2
 8009620:	3304      	adds	r3, #4
 8009622:	461a      	mov	r2, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fd06 	bl	800a036 <USBH_MSC_SCSI_RequestSense>
 800962a:	4603      	mov	r3, r0
 800962c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d17d      	bne.n	8009730 <USBH_MSC_Process+0x63c>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800963a:	4619      	mov	r1, r3
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	2334      	movs	r3, #52	; 0x34
 8009640:	fb01 f303 	mul.w	r3, r1, r3
 8009644:	4413      	add	r3, r2
 8009646:	339c      	adds	r3, #156	; 0x9c
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	2b06      	cmp	r3, #6
 800964c:	d00c      	beq.n	8009668 <USBH_MSC_Process+0x574>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009654:	4619      	mov	r1, r3
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	2334      	movs	r3, #52	; 0x34
 800965a:	fb01 f303 	mul.w	r3, r1, r3
 800965e:	4413      	add	r3, r2
 8009660:	339c      	adds	r3, #156	; 0x9c
 8009662:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009664:	2b02      	cmp	r3, #2
 8009666:	d119      	bne.n	800969c <USBH_MSC_Process+0x5a8>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800966e:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	f242 720f 	movw	r2, #9999	; 0x270f
 800967e:	4293      	cmp	r3, r2
 8009680:	d80c      	bhi.n	800969c <USBH_MSC_Process+0x5a8>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009688:	4619      	mov	r1, r3
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	2334      	movs	r3, #52	; 0x34
 800968e:	fb01 f303 	mul.w	r3, r1, r3
 8009692:	4413      	add	r3, r2
 8009694:	3390      	adds	r3, #144	; 0x90
 8009696:	2202      	movs	r2, #2
 8009698:	701a      	strb	r2, [r3, #0]
                  break;
 800969a:	e09d      	b.n	80097d8 <USBH_MSC_Process+0x6e4>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096a2:	4619      	mov	r1, r3
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	2334      	movs	r3, #52	; 0x34
 80096a8:	fb01 f303 	mul.w	r3, r1, r3
 80096ac:	4413      	add	r3, r2
 80096ae:	339c      	adds	r3, #156	; 0x9c
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	4619      	mov	r1, r3
 80096b4:	4850      	ldr	r0, [pc, #320]	; (80097f8 <USBH_MSC_Process+0x704>)
 80096b6:	f009 fa71 	bl	8012b9c <iprintf>
 80096ba:	200a      	movs	r0, #10
 80096bc:	f009 fa86 	bl	8012bcc <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096c6:	4619      	mov	r1, r3
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	2334      	movs	r3, #52	; 0x34
 80096cc:	fb01 f303 	mul.w	r3, r1, r3
 80096d0:	4413      	add	r3, r2
 80096d2:	339d      	adds	r3, #157	; 0x9d
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	4619      	mov	r1, r3
 80096d8:	4848      	ldr	r0, [pc, #288]	; (80097fc <USBH_MSC_Process+0x708>)
 80096da:	f009 fa5f 	bl	8012b9c <iprintf>
 80096de:	200a      	movs	r0, #10
 80096e0:	f009 fa74 	bl	8012bcc <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096ea:	4619      	mov	r1, r3
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	2334      	movs	r3, #52	; 0x34
 80096f0:	fb01 f303 	mul.w	r3, r1, r3
 80096f4:	4413      	add	r3, r2
 80096f6:	339e      	adds	r3, #158	; 0x9e
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	4619      	mov	r1, r3
 80096fc:	4840      	ldr	r0, [pc, #256]	; (8009800 <USBH_MSC_Process+0x70c>)
 80096fe:	f009 fa4d 	bl	8012b9c <iprintf>
 8009702:	200a      	movs	r0, #10
 8009704:	f009 fa62 	bl	8012bcc <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800970e:	4619      	mov	r1, r3
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	2334      	movs	r3, #52	; 0x34
 8009714:	fb01 f303 	mul.w	r3, r1, r3
 8009718:	4413      	add	r3, r2
 800971a:	3390      	adds	r3, #144	; 0x90
 800971c:	2201      	movs	r2, #1
 800971e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009726:	3301      	adds	r3, #1
 8009728:	b29a      	uxth	r2, r3
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	2b02      	cmp	r3, #2
 8009734:	d112      	bne.n	800975c <USBH_MSC_Process+0x668>
              USBH_UsrLog("MSC Device NOT ready");
 8009736:	4833      	ldr	r0, [pc, #204]	; (8009804 <USBH_MSC_Process+0x710>)
 8009738:	f009 fa30 	bl	8012b9c <iprintf>
 800973c:	200a      	movs	r0, #10
 800973e:	f009 fa45 	bl	8012bcc <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009748:	4619      	mov	r1, r3
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	2334      	movs	r3, #52	; 0x34
 800974e:	fb01 f303 	mul.w	r3, r1, r3
 8009752:	4413      	add	r3, r2
 8009754:	3390      	adds	r3, #144	; 0x90
 8009756:	2208      	movs	r2, #8
 8009758:	701a      	strb	r2, [r3, #0]
            break;
 800975a:	e03c      	b.n	80097d6 <USBH_MSC_Process+0x6e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	2b04      	cmp	r3, #4
 8009760:	d139      	bne.n	80097d6 <USBH_MSC_Process+0x6e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009768:	4619      	mov	r1, r3
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	2334      	movs	r3, #52	; 0x34
 800976e:	fb01 f303 	mul.w	r3, r1, r3
 8009772:	4413      	add	r3, r2
 8009774:	3390      	adds	r3, #144	; 0x90
 8009776:	2201      	movs	r2, #1
 8009778:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009780:	4619      	mov	r1, r3
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	2334      	movs	r3, #52	; 0x34
 8009786:	fb01 f303 	mul.w	r3, r1, r3
 800978a:	4413      	add	r3, r2
 800978c:	3391      	adds	r3, #145	; 0x91
 800978e:	2202      	movs	r2, #2
 8009790:	701a      	strb	r2, [r3, #0]
            break;
 8009792:	e020      	b.n	80097d6 <USBH_MSC_Process+0x6e2>
            MSC_Handle->current_lun++;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800979a:	3301      	adds	r3, #1
 800979c:	b29a      	uxth	r2, r3
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80097a4:	e018      	b.n	80097d8 <USBH_MSC_Process+0x6e4>
        MSC_Handle->current_lun = 0U;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	2201      	movs	r2, #1
 80097b2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ba:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80097be:	2102      	movs	r1, #2
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	4798      	blx	r3
      break;
 80097c4:	e00c      	b.n	80097e0 <USBH_MSC_Process+0x6ec>
            break;
 80097c6:	bf00      	nop
 80097c8:	e00a      	b.n	80097e0 <USBH_MSC_Process+0x6ec>
            break;
 80097ca:	bf00      	nop
 80097cc:	e008      	b.n	80097e0 <USBH_MSC_Process+0x6ec>
            break;
 80097ce:	bf00      	nop
 80097d0:	e006      	b.n	80097e0 <USBH_MSC_Process+0x6ec>
            break;
 80097d2:	bf00      	nop
 80097d4:	e004      	b.n	80097e0 <USBH_MSC_Process+0x6ec>
            break;
 80097d6:	bf00      	nop
      break;
 80097d8:	e002      	b.n	80097e0 <USBH_MSC_Process+0x6ec>
      error = USBH_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	75fb      	strb	r3, [r7, #23]
      break;
 80097de:	bf00      	nop
  }
  return error;
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	08013bc4 	.word	0x08013bc4
 80097f0:	08013be4 	.word	0x08013be4
 80097f4:	08013bf8 	.word	0x08013bf8
 80097f8:	08013c0c 	.word	0x08013c0c
 80097fc:	08013c1c 	.word	0x08013c1c
 8009800:	08013c38 	.word	0x08013c38
 8009804:	08013bac 	.word	0x08013bac

08009808 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	bc80      	pop	{r7}
 800981a:	4770      	bx	lr

0800981c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2221      	movs	r2, #33	; 0x21
 8009828:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	22ff      	movs	r2, #255	; 0xff
 800982e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009842:	2200      	movs	r2, #0
 8009844:	2100      	movs	r1, #0
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f003 ff62 	bl	800d710 <USBH_CtlReq>
 800984c:	4603      	mov	r3, r0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b082      	sub	sp, #8
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	22a1      	movs	r2, #161	; 0xa1
 8009864:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	22fe      	movs	r2, #254	; 0xfe
 800986a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800987e:	2201      	movs	r2, #1
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f003 ff44 	bl	800d710 <USBH_CtlReq>
 8009888:	4603      	mov	r3, r0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098a2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4a09      	ldr	r2, [pc, #36]	; (80098d4 <USBH_MSC_BOT_Init+0x40>)
 80098ae:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4a09      	ldr	r2, [pc, #36]	; (80098d8 <USBH_MSC_BOT_Init+0x44>)
 80098b4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	43425355 	.word	0x43425355
 80098d8:	20304050 	.word	0x20304050

080098dc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af02      	add	r7, sp, #8
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80098e8:	2301      	movs	r3, #1
 80098ea:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80098ec:	2301      	movs	r3, #1
 80098ee:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80098f0:	2301      	movs	r3, #1
 80098f2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80098f4:	2300      	movs	r3, #0
 80098f6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098fe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009910:	3b01      	subs	r3, #1
 8009912:	2b0a      	cmp	r3, #10
 8009914:	f200 819e 	bhi.w	8009c54 <USBH_MSC_BOT_Process+0x378>
 8009918:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <USBH_MSC_BOT_Process+0x44>)
 800991a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991e:	bf00      	nop
 8009920:	0800994d 	.word	0x0800994d
 8009924:	08009975 	.word	0x08009975
 8009928:	080099df 	.word	0x080099df
 800992c:	080099fd 	.word	0x080099fd
 8009930:	08009a81 	.word	0x08009a81
 8009934:	08009aa3 	.word	0x08009aa3
 8009938:	08009b3b 	.word	0x08009b3b
 800993c:	08009b57 	.word	0x08009b57
 8009940:	08009ba9 	.word	0x08009ba9
 8009944:	08009bd9 	.word	0x08009bd9
 8009948:	08009c3b 	.word	0x08009c3b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	78fa      	ldrb	r2, [r7, #3]
 8009950:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	2202      	movs	r2, #2
 8009958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	795b      	ldrb	r3, [r3, #5]
 8009966:	2201      	movs	r2, #1
 8009968:	9200      	str	r2, [sp, #0]
 800996a:	221f      	movs	r2, #31
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f004 f8f6 	bl	800db5e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009972:	e17e      	b.n	8009c72 <USBH_MSC_BOT_Process+0x396>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	795b      	ldrb	r3, [r3, #5]
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f004 fc98 	bl	800e2b0 <USBH_LL_GetURBState>
 8009980:	4603      	mov	r3, r0
 8009982:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009984:	7d3b      	ldrb	r3, [r7, #20]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d118      	bne.n	80099bc <USBH_MSC_BOT_Process+0xe0>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00f      	beq.n	80099b2 <USBH_MSC_BOT_Process+0xd6>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009998:	b25b      	sxtb	r3, r3
 800999a:	2b00      	cmp	r3, #0
 800999c:	da04      	bge.n	80099a8 <USBH_MSC_BOT_Process+0xcc>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	2203      	movs	r2, #3
 80099a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80099a6:	e157      	b.n	8009c58 <USBH_MSC_BOT_Process+0x37c>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	2205      	movs	r2, #5
 80099ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099b0:	e152      	b.n	8009c58 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2207      	movs	r2, #7
 80099b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099ba:	e14d      	b.n	8009c58 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_NOTREADY)
 80099bc:	7d3b      	ldrb	r3, [r7, #20]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d104      	bne.n	80099cc <USBH_MSC_BOT_Process+0xf0>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099ca:	e145      	b.n	8009c58 <USBH_MSC_BOT_Process+0x37c>
        if (URB_Status == USBH_URB_STALL)
 80099cc:	7d3b      	ldrb	r3, [r7, #20]
 80099ce:	2b05      	cmp	r3, #5
 80099d0:	f040 8142 	bne.w	8009c58 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	220a      	movs	r2, #10
 80099d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099dc:	e13c      	b.n	8009c58 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	895a      	ldrh	r2, [r3, #10]
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	791b      	ldrb	r3, [r3, #4]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f004 f8db 	bl	800dba8 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2204      	movs	r2, #4
 80099f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80099fa:	e13a      	b.n	8009c72 <USBH_MSC_BOT_Process+0x396>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	791b      	ldrb	r3, [r3, #4]
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f004 fc54 	bl	800e2b0 <USBH_LL_GetURBState>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009a0c:	7d3b      	ldrb	r3, [r7, #20]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d12d      	bne.n	8009a6e <USBH_MSC_BOT_Process+0x192>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	8952      	ldrh	r2, [r2, #10]
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d910      	bls.n	8009a40 <USBH_MSC_BOT_Process+0x164>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	8952      	ldrh	r2, [r2, #10]
 8009a28:	441a      	add	r2, r3
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	8952      	ldrh	r2, [r2, #10]
 8009a38:	1a9a      	subs	r2, r3, r2
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a3e:	e002      	b.n	8009a46 <USBH_MSC_BOT_Process+0x16a>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	2200      	movs	r2, #0
 8009a44:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00a      	beq.n	8009a64 <USBH_MSC_BOT_Process+0x188>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	895a      	ldrh	r2, [r3, #10]
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	791b      	ldrb	r3, [r3, #4]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f004 f8a3 	bl	800dba8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009a62:	e0fb      	b.n	8009c5c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	2207      	movs	r2, #7
 8009a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a6c:	e0f6      	b.n	8009c5c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009a6e:	7d3b      	ldrb	r3, [r7, #20]
 8009a70:	2b05      	cmp	r3, #5
 8009a72:	f040 80f3 	bne.w	8009c5c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	2209      	movs	r2, #9
 8009a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a7e:	e0ed      	b.n	8009c5c <USBH_MSC_BOT_Process+0x380>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	891a      	ldrh	r2, [r3, #8]
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	795b      	ldrb	r3, [r3, #5]
 8009a8e:	2001      	movs	r0, #1
 8009a90:	9000      	str	r0, [sp, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f004 f863 	bl	800db5e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	2206      	movs	r2, #6
 8009a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009aa0:	e0e7      	b.n	8009c72 <USBH_MSC_BOT_Process+0x396>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	795b      	ldrb	r3, [r3, #5]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f004 fc01 	bl	800e2b0 <USBH_LL_GetURBState>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009ab2:	7d3b      	ldrb	r3, [r7, #20]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d12f      	bne.n	8009b18 <USBH_MSC_BOT_Process+0x23c>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	8912      	ldrh	r2, [r2, #8]
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d910      	bls.n	8009ae6 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	8912      	ldrh	r2, [r2, #8]
 8009ace:	441a      	add	r2, r3
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	8912      	ldrh	r2, [r2, #8]
 8009ade:	1a9a      	subs	r2, r3, r2
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	65da      	str	r2, [r3, #92]	; 0x5c
 8009ae4:	e002      	b.n	8009aec <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00c      	beq.n	8009b0e <USBH_MSC_BOT_Process+0x232>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	891a      	ldrh	r2, [r3, #8]
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	795b      	ldrb	r3, [r3, #5]
 8009b02:	2001      	movs	r0, #1
 8009b04:	9000      	str	r0, [sp, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f004 f829 	bl	800db5e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009b0c:	e0a8      	b.n	8009c60 <USBH_MSC_BOT_Process+0x384>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	2207      	movs	r2, #7
 8009b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b16:	e0a3      	b.n	8009c60 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b18:	7d3b      	ldrb	r3, [r7, #20]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d104      	bne.n	8009b28 <USBH_MSC_BOT_Process+0x24c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	2205      	movs	r2, #5
 8009b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b26:	e09b      	b.n	8009c60 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009b28:	7d3b      	ldrb	r3, [r7, #20]
 8009b2a:	2b05      	cmp	r3, #5
 8009b2c:	f040 8098 	bne.w	8009c60 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	220a      	movs	r2, #10
 8009b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b38:	e092      	b.n	8009c60 <USBH_MSC_BOT_Process+0x384>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	791b      	ldrb	r3, [r3, #4]
 8009b44:	220d      	movs	r2, #13
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f004 f82e 	bl	800dba8 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	2208      	movs	r2, #8
 8009b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b54:	e08d      	b.n	8009c72 <USBH_MSC_BOT_Process+0x396>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	791b      	ldrb	r3, [r3, #4]
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f004 fba7 	bl	800e2b0 <USBH_LL_GetURBState>
 8009b62:	4603      	mov	r3, r0
 8009b64:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009b66:	7d3b      	ldrb	r3, [r7, #20]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d115      	bne.n	8009b98 <USBH_MSC_BOT_Process+0x2bc>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f8ab 	bl	8009cd8 <USBH_MSC_DecodeCSW>
 8009b82:	4603      	mov	r3, r0
 8009b84:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009b86:	7d7b      	ldrb	r3, [r7, #21]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d102      	bne.n	8009b92 <USBH_MSC_BOT_Process+0x2b6>
        {
          status = USBH_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009b90:	e068      	b.n	8009c64 <USBH_MSC_BOT_Process+0x388>
          status = USBH_FAIL;
 8009b92:	2302      	movs	r3, #2
 8009b94:	75fb      	strb	r3, [r7, #23]
      break;
 8009b96:	e065      	b.n	8009c64 <USBH_MSC_BOT_Process+0x388>
      else if (URB_Status == USBH_URB_STALL)
 8009b98:	7d3b      	ldrb	r3, [r7, #20]
 8009b9a:	2b05      	cmp	r3, #5
 8009b9c:	d162      	bne.n	8009c64 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2209      	movs	r2, #9
 8009ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ba6:	e05d      	b.n	8009c64 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	2200      	movs	r2, #0
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f864 	bl	8009c7c <USBH_MSC_BOT_Abort>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009bb8:	7dbb      	ldrb	r3, [r7, #22]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d104      	bne.n	8009bc8 <USBH_MSC_BOT_Process+0x2ec>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	2207      	movs	r2, #7
 8009bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009bc6:	e04f      	b.n	8009c68 <USBH_MSC_BOT_Process+0x38c>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009bc8:	7dbb      	ldrb	r3, [r7, #22]
 8009bca:	2b04      	cmp	r3, #4
 8009bcc:	d14c      	bne.n	8009c68 <USBH_MSC_BOT_Process+0x38c>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	220b      	movs	r2, #11
 8009bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009bd6:	e047      	b.n	8009c68 <USBH_MSC_BOT_Process+0x38c>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f84c 	bl	8009c7c <USBH_MSC_BOT_Abort>
 8009be4:	4603      	mov	r3, r0
 8009be6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009be8:	7dbb      	ldrb	r3, [r7, #22]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d11d      	bne.n	8009c2a <USBH_MSC_BOT_Process+0x34e>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	795b      	ldrb	r3, [r3, #5]
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f004 fbaf 	bl	800e358 <USBH_LL_GetToggle>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	7959      	ldrb	r1, [r3, #5]
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
 8009c04:	f1c3 0301 	rsb	r3, r3, #1
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f004 fb72 	bl	800e2f6 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	791b      	ldrb	r3, [r3, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	4619      	mov	r1, r3
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f004 fb6b 	bl	800e2f6 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	2209      	movs	r2, #9
 8009c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009c28:	e020      	b.n	8009c6c <USBH_MSC_BOT_Process+0x390>
        if (error == USBH_UNRECOVERED_ERROR)
 8009c2a:	7dbb      	ldrb	r3, [r7, #22]
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d11d      	bne.n	8009c6c <USBH_MSC_BOT_Process+0x390>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	220b      	movs	r2, #11
 8009c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c38:	e018      	b.n	8009c6c <USBH_MSC_BOT_Process+0x390>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7ff fdee 	bl	800981c <USBH_MSC_BOT_REQ_Reset>
 8009c40:	4603      	mov	r3, r0
 8009c42:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d112      	bne.n	8009c70 <USBH_MSC_BOT_Process+0x394>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009c52:	e00d      	b.n	8009c70 <USBH_MSC_BOT_Process+0x394>

    default:
      break;
 8009c54:	bf00      	nop
 8009c56:	e00c      	b.n	8009c72 <USBH_MSC_BOT_Process+0x396>
      break;
 8009c58:	bf00      	nop
 8009c5a:	e00a      	b.n	8009c72 <USBH_MSC_BOT_Process+0x396>
      break;
 8009c5c:	bf00      	nop
 8009c5e:	e008      	b.n	8009c72 <USBH_MSC_BOT_Process+0x396>
      break;
 8009c60:	bf00      	nop
 8009c62:	e006      	b.n	8009c72 <USBH_MSC_BOT_Process+0x396>
      break;
 8009c64:	bf00      	nop
 8009c66:	e004      	b.n	8009c72 <USBH_MSC_BOT_Process+0x396>
      break;
 8009c68:	bf00      	nop
 8009c6a:	e002      	b.n	8009c72 <USBH_MSC_BOT_Process+0x396>
      break;
 8009c6c:	bf00      	nop
 8009c6e:	e000      	b.n	8009c72 <USBH_MSC_BOT_Process+0x396>
      break;
 8009c70:	bf00      	nop
  }
  return status;
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	460b      	mov	r3, r1
 8009c86:	70fb      	strb	r3, [r7, #3]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009c8c:	2302      	movs	r3, #2
 8009c8e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c96:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009c9a:	69db      	ldr	r3, [r3, #28]
 8009c9c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009c9e:	78bb      	ldrb	r3, [r7, #2]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <USBH_MSC_BOT_Abort+0x2e>
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d009      	beq.n	8009cbc <USBH_MSC_BOT_Abort+0x40>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009ca8:	e011      	b.n	8009cce <USBH_MSC_BOT_Abort+0x52>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	79db      	ldrb	r3, [r3, #7]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f003 fb50 	bl	800d356 <USBH_ClrFeature>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8009cba:	e008      	b.n	8009cce <USBH_MSC_BOT_Abort+0x52>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	799b      	ldrb	r3, [r3, #6]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f003 fb47 	bl	800d356 <USBH_ClrFeature>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73fb      	strb	r3, [r7, #15]
      break;
 8009ccc:	bf00      	nop
  }
  return status;
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009cea:	69db      	ldr	r3, [r3, #28]
 8009cec:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	791b      	ldrb	r3, [r3, #4]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f004 fa3f 	bl	800e17c <USBH_LL_GetLastXferSize>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b0d      	cmp	r3, #13
 8009d02:	d002      	beq.n	8009d0a <USBH_MSC_DecodeCSW+0x32>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009d04:	2302      	movs	r3, #2
 8009d06:	73fb      	strb	r3, [r7, #15]
 8009d08:	e024      	b.n	8009d54 <USBH_MSC_DecodeCSW+0x7c>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d0e:	4a14      	ldr	r2, [pc, #80]	; (8009d60 <USBH_MSC_DecodeCSW+0x88>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d11d      	bne.n	8009d50 <USBH_MSC_DecodeCSW+0x78>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d119      	bne.n	8009d54 <USBH_MSC_DecodeCSW+0x7c>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d102      	bne.n	8009d30 <USBH_MSC_DecodeCSW+0x58>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	73fb      	strb	r3, [r7, #15]
 8009d2e:	e011      	b.n	8009d54 <USBH_MSC_DecodeCSW+0x7c>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d102      	bne.n	8009d40 <USBH_MSC_DecodeCSW+0x68>
        {
          status = BOT_CSW_CMD_FAILED;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	73fb      	strb	r3, [r7, #15]
 8009d3e:	e009      	b.n	8009d54 <USBH_MSC_DecodeCSW+0x7c>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d104      	bne.n	8009d54 <USBH_MSC_DecodeCSW+0x7c>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	73fb      	strb	r3, [r7, #15]
 8009d4e:	e001      	b.n	8009d54 <USBH_MSC_DecodeCSW+0x7c>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009d50:	2302      	movs	r3, #2
 8009d52:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	53425355 	.word	0x53425355

08009d64 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009d70:	2302      	movs	r3, #2
 8009d72:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d7a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d002      	beq.n	8009d92 <USBH_MSC_SCSI_TestUnitReady+0x2e>
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d021      	beq.n	8009dd4 <USBH_MSC_SCSI_TestUnitReady+0x70>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009d90:	e028      	b.n	8009de4 <USBH_MSC_SCSI_TestUnitReady+0x80>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2200      	movs	r2, #0
 8009d96:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	220a      	movs	r2, #10
 8009da4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	3363      	adds	r3, #99	; 0x63
 8009dac:	2210      	movs	r2, #16
 8009dae:	2100      	movs	r1, #0
 8009db0:	4618      	mov	r0, r3
 8009db2:	f008 fb0d 	bl	80123d0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2202      	movs	r2, #2
 8009dca:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8009dd2:	e007      	b.n	8009de4 <USBH_MSC_SCSI_TestUnitReady+0x80>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009dd4:	78fb      	ldrb	r3, [r7, #3]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7ff fd7f 	bl	80098dc <USBH_MSC_BOT_Process>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]
      break;
 8009de2:	bf00      	nop
  }

  return error;
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b086      	sub	sp, #24
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	460b      	mov	r3, r1
 8009df8:	607a      	str	r2, [r7, #4]
 8009dfa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e06:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d002      	beq.n	8009e1e <USBH_MSC_SCSI_ReadCapacity+0x30>
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d027      	beq.n	8009e6c <USBH_MSC_SCSI_ReadCapacity+0x7e>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009e1c:	e05f      	b.n	8009ede <USBH_MSC_SCSI_ReadCapacity+0xf0>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	2208      	movs	r2, #8
 8009e22:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	2280      	movs	r2, #128	; 0x80
 8009e28:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	220a      	movs	r2, #10
 8009e30:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	3363      	adds	r3, #99	; 0x63
 8009e38:	2210      	movs	r2, #16
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f008 fac7 	bl	80123d0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	2225      	movs	r2, #37	; 0x25
 8009e46:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	2202      	movs	r2, #2
 8009e56:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	f103 0210 	add.w	r2, r3, #16
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009e66:	2301      	movs	r3, #1
 8009e68:	75fb      	strb	r3, [r7, #23]
      break;
 8009e6a:	e038      	b.n	8009ede <USBH_MSC_SCSI_ReadCapacity+0xf0>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009e6c:	7afb      	ldrb	r3, [r7, #11]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f7ff fd33 	bl	80098dc <USBH_MSC_BOT_Process>
 8009e76:	4603      	mov	r3, r0
 8009e78:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d12d      	bne.n	8009edc <USBH_MSC_SCSI_ReadCapacity+0xee>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e86:	3303      	adds	r3, #3
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e92:	3302      	adds	r3, #2
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	021b      	lsls	r3, r3, #8
 8009e98:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009ea6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	061b      	lsls	r3, r3, #24
 8009eb2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ebe:	3307      	adds	r3, #7
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eca:	3306      	adds	r3, #6
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	021b      	lsls	r3, r3, #8
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	809a      	strh	r2, [r3, #4]
      break;
 8009edc:	bf00      	nop
  }

  return error;
 8009ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f00:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009f04:	69db      	ldr	r3, [r3, #28]
 8009f06:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d002      	beq.n	8009f18 <USBH_MSC_SCSI_Inquiry+0x30>
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d03d      	beq.n	8009f92 <USBH_MSC_SCSI_Inquiry+0xaa>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009f16:	e089      	b.n	800a02c <USBH_MSC_SCSI_Inquiry+0x144>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	2224      	movs	r2, #36	; 0x24
 8009f1c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	2280      	movs	r2, #128	; 0x80
 8009f22:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	220a      	movs	r2, #10
 8009f2a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	3363      	adds	r3, #99	; 0x63
 8009f32:	220a      	movs	r2, #10
 8009f34:	2100      	movs	r1, #0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f008 fa4a 	bl	80123d0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	2212      	movs	r2, #18
 8009f40:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	015b      	lsls	r3, r3, #5
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	2224      	movs	r2, #36	; 0x24
 8009f64:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f103 0210 	add.w	r2, r3, #16
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f90:	e04c      	b.n	800a02c <USBH_MSC_SCSI_Inquiry+0x144>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f92:	7afb      	ldrb	r3, [r7, #11]
 8009f94:	4619      	mov	r1, r3
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f7ff fca0 	bl	80098dc <USBH_MSC_BOT_Process>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d141      	bne.n	800a02a <USBH_MSC_SCSI_Inquiry+0x142>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009fa6:	2222      	movs	r2, #34	; 0x22
 8009fa8:	2100      	movs	r1, #0
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f008 fa10 	bl	80123d0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	f003 031f 	and.w	r3, r3, #31
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	095b      	lsrs	r3, r3, #5
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fd8:	3301      	adds	r3, #1
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	b25b      	sxtb	r3, r3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	da03      	bge.n	8009fea <USBH_MSC_SCSI_Inquiry+0x102>
          inquiry->RemovableMedia = 1U;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	709a      	strb	r2, [r3, #2]
 8009fe8:	e002      	b.n	8009ff0 <USBH_MSC_SCSI_Inquiry+0x108>
          inquiry->RemovableMedia = 0U;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	1cd8      	adds	r0, r3, #3
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ffa:	3308      	adds	r3, #8
 8009ffc:	2208      	movs	r2, #8
 8009ffe:	4619      	mov	r1, r3
 800a000:	f008 f9d8 	bl	80123b4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f103 000c 	add.w	r0, r3, #12
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a010:	3310      	adds	r3, #16
 800a012:	2210      	movs	r2, #16
 800a014:	4619      	mov	r1, r3
 800a016:	f008 f9cd 	bl	80123b4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	331d      	adds	r3, #29
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a024:	3220      	adds	r2, #32
 800a026:	6812      	ldr	r2, [r2, #0]
 800a028:	601a      	str	r2, [r3, #0]
      break;
 800a02a:	bf00      	nop
  }

  return error;
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b086      	sub	sp, #24
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	460b      	mov	r3, r1
 800a040:	607a      	str	r2, [r7, #4]
 800a042:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a044:	2302      	movs	r3, #2
 800a046:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a04e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d002      	beq.n	800a066 <USBH_MSC_SCSI_RequestSense+0x30>
 800a060:	2b02      	cmp	r3, #2
 800a062:	d03d      	beq.n	800a0e0 <USBH_MSC_SCSI_RequestSense+0xaa>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a064:	e05d      	b.n	800a122 <USBH_MSC_SCSI_RequestSense+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	220e      	movs	r2, #14
 800a06a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2280      	movs	r2, #128	; 0x80
 800a070:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	220a      	movs	r2, #10
 800a078:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	3363      	adds	r3, #99	; 0x63
 800a080:	2210      	movs	r2, #16
 800a082:	2100      	movs	r1, #0
 800a084:	4618      	mov	r0, r3
 800a086:	f008 f9a3 	bl	80123d0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	2203      	movs	r2, #3
 800a08e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a092:	7afb      	ldrb	r3, [r7, #11]
 800a094:	015b      	lsls	r3, r3, #5
 800a096:	b2da      	uxtb	r2, r3
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	220e      	movs	r2, #14
 800a0b2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f103 0210 	add.w	r2, r3, #16
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a0de:	e020      	b.n	800a122 <USBH_MSC_SCSI_RequestSense+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f7ff fbf9 	bl	80098dc <USBH_MSC_BOT_Process>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d115      	bne.n	800a120 <USBH_MSC_SCSI_RequestSense+0xea>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0fa:	3302      	adds	r3, #2
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	f003 030f 	and.w	r3, r3, #15
 800a102:	b2da      	uxtb	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a10e:	7b1a      	ldrb	r2, [r3, #12]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a11a:	7b5a      	ldrb	r2, [r3, #13]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	709a      	strb	r2, [r3, #2]
      break;
 800a120:	bf00      	nop
  }

  return error;
 800a122:	7dfb      	ldrb	r3, [r7, #23]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3718      	adds	r7, #24
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBH_MTP_InterfaceInit>:
  *         The function init the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a12c:	b590      	push	{r4, r7, lr}
 800a12e:	b089      	sub	sp, #36	; 0x24
 800a130:	af04      	add	r7, sp, #16
 800a132:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface, endpoint;
  MTP_HandleTypeDef *MTP_Handle;

  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 800a134:	2301      	movs	r3, #1
 800a136:	2201      	movs	r2, #1
 800a138:	2106      	movs	r1, #6
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f002 faf0 	bl	800c720 <USBH_FindInterface>
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	2bff      	cmp	r3, #255	; 0xff
 800a148:	d002      	beq.n	800a150 <USBH_MTP_InterfaceInit+0x24>
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
 800a14c:	2b0e      	cmp	r3, #14
 800a14e:	d90a      	bls.n	800a166 <USBH_MTP_InterfaceInit+0x3a>
  {
    USBH_DbgLog("Cannot Find the interface for Still Image Class.");
 800a150:	48a9      	ldr	r0, [pc, #676]	; (800a3f8 <USBH_MTP_InterfaceInit+0x2cc>)
 800a152:	f008 fd23 	bl	8012b9c <iprintf>
 800a156:	48a9      	ldr	r0, [pc, #676]	; (800a3fc <USBH_MTP_InterfaceInit+0x2d0>)
 800a158:	f008 fd20 	bl	8012b9c <iprintf>
 800a15c:	200a      	movs	r0, #10
 800a15e:	f008 fd35 	bl	8012bcc <putchar>
    return USBH_FAIL;
 800a162:	2302      	movs	r3, #2
 800a164:	e1c9      	b.n	800a4fa <USBH_MTP_InterfaceInit+0x3ce>
  }

  USBH_SelectInterface(phost, interface);
 800a166:	7bfb      	ldrb	r3, [r7, #15]
 800a168:	4619      	mov	r1, r3
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f002 fa6e 	bl	800c64c <USBH_SelectInterface>

  status = USBH_SelectInterface(phost, interface);
 800a170:	7bfb      	ldrb	r3, [r7, #15]
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f002 fa69 	bl	800c64c <USBH_SelectInterface>
 800a17a:	4603      	mov	r3, r0
 800a17c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a17e:	7bbb      	ldrb	r3, [r7, #14]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <USBH_MTP_InterfaceInit+0x5c>
  {
    return USBH_FAIL;
 800a184:	2302      	movs	r3, #2
 800a186:	e1b8      	b.n	800a4fa <USBH_MTP_InterfaceInit+0x3ce>
  }

  endpoint = MTP_FindCtlEndpoint(phost);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f9bb 	bl	800a504 <MTP_FindCtlEndpoint>
 800a18e:	4603      	mov	r3, r0
 800a190:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 800a192:	7b7b      	ldrb	r3, [r7, #13]
 800a194:	2bff      	cmp	r3, #255	; 0xff
 800a196:	d002      	beq.n	800a19e <USBH_MTP_InterfaceInit+0x72>
 800a198:	7b7b      	ldrb	r3, [r7, #13]
 800a19a:	2b0e      	cmp	r3, #14
 800a19c:	d90a      	bls.n	800a1b4 <USBH_MTP_InterfaceInit+0x88>
  {
    USBH_DbgLog("Invalid Control endpoint number");
 800a19e:	4896      	ldr	r0, [pc, #600]	; (800a3f8 <USBH_MTP_InterfaceInit+0x2cc>)
 800a1a0:	f008 fcfc 	bl	8012b9c <iprintf>
 800a1a4:	4896      	ldr	r0, [pc, #600]	; (800a400 <USBH_MTP_InterfaceInit+0x2d4>)
 800a1a6:	f008 fcf9 	bl	8012b9c <iprintf>
 800a1aa:	200a      	movs	r0, #10
 800a1ac:	f008 fd0e 	bl	8012bcc <putchar>
    return USBH_FAIL;
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	e1a2      	b.n	800a4fa <USBH_MTP_InterfaceInit+0x3ce>
  }

  phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc(sizeof(MTP_HandleTypeDef));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ba:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
 800a1be:	f242 10d0 	movw	r0, #8656	; 0x21d0
 800a1c2:	f008 f8e7 	bl	8012394 <malloc>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	61e3      	str	r3, [r4, #28]
  MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a1d4:	69db      	ldr	r3, [r3, #28]
 800a1d6:	60bb      	str	r3, [r7, #8]

  if (MTP_Handle == NULL)
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10a      	bne.n	800a1f4 <USBH_MTP_InterfaceInit+0xc8>
  {
    USBH_DbgLog("Cannot allocate memory for MTP Handle");
 800a1de:	4886      	ldr	r0, [pc, #536]	; (800a3f8 <USBH_MTP_InterfaceInit+0x2cc>)
 800a1e0:	f008 fcdc 	bl	8012b9c <iprintf>
 800a1e4:	4887      	ldr	r0, [pc, #540]	; (800a404 <USBH_MTP_InterfaceInit+0x2d8>)
 800a1e6:	f008 fcd9 	bl	8012b9c <iprintf>
 800a1ea:	200a      	movs	r0, #10
 800a1ec:	f008 fcee 	bl	8012bcc <putchar>
    return USBH_FAIL;
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	e182      	b.n	800a4fa <USBH_MTP_InterfaceInit+0x3ce>
  }

  /* Initialize mtp handler */
  USBH_memset(MTP_Handle, 0, sizeof(MTP_HandleTypeDef));
 800a1f4:	f242 12d0 	movw	r2, #8656	; 0x21d0
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	68b8      	ldr	r0, [r7, #8]
 800a1fc:	f008 f8e8 	bl	80123d0 <memset>

  /*Collect the control endpoint address and length*/
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800a200:	7bfa      	ldrb	r2, [r7, #15]
 800a202:	7b7b      	ldrb	r3, [r7, #13]
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	3301      	adds	r3, #1
 800a208:	00d8      	lsls	r0, r3, #3
 800a20a:	4613      	mov	r3, r2
 800a20c:	019b      	lsls	r3, r3, #6
 800a20e:	4413      	add	r3, r2
 800a210:	005b      	lsls	r3, r3, #1
 800a212:	4403      	add	r3, r0
 800a214:	440b      	add	r3, r1
 800a216:	f603 1344 	addw	r3, r3, #2372	; 0x944
 800a21a:	781a      	ldrb	r2, [r3, #0]
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a222:	f883 2d31 	strb.w	r2, [r3, #3377]	; 0xd31
  MTP_Handle->NotificationEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800a226:	7bfa      	ldrb	r2, [r7, #15]
 800a228:	7b7b      	ldrb	r3, [r7, #13]
 800a22a:	6879      	ldr	r1, [r7, #4]
 800a22c:	3301      	adds	r3, #1
 800a22e:	00d8      	lsls	r0, r3, #3
 800a230:	4613      	mov	r3, r2
 800a232:	019b      	lsls	r3, r3, #6
 800a234:	4413      	add	r3, r2
 800a236:	005b      	lsls	r3, r3, #1
 800a238:	4403      	add	r3, r0
 800a23a:	440b      	add	r3, r1
 800a23c:	f603 1346 	addw	r3, r3, #2374	; 0x946
 800a240:	881a      	ldrh	r2, [r3, #0]
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a248:	f8a3 2d36 	strh.w	r2, [r3, #3382]	; 0xd36
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a252:	f893 3d31 	ldrb.w	r3, [r3, #3377]	; 0xd31
 800a256:	4619      	mov	r1, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f003 fd2c 	bl	800dcb6 <USBH_AllocPipe>
 800a25e:	4603      	mov	r3, r0
 800a260:	461a      	mov	r2, r3
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a268:	f883 2d2e 	strb.w	r2, [r3, #3374]	; 0xd2e
  MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 800a26c:	7bfa      	ldrb	r2, [r7, #15]
 800a26e:	7b7b      	ldrb	r3, [r7, #13]
 800a270:	6879      	ldr	r1, [r7, #4]
 800a272:	3301      	adds	r3, #1
 800a274:	00d8      	lsls	r0, r3, #3
 800a276:	4613      	mov	r3, r2
 800a278:	019b      	lsls	r3, r3, #6
 800a27a:	4413      	add	r3, r2
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	4403      	add	r3, r0
 800a280:	440b      	add	r3, r1
 800a282:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	b29a      	uxth	r2, r3
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a290:	f8a3 2d44 	strh.w	r2, [r3, #3396]	; 0xd44

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, MTP_Handle->NotificationPipe,MTP_Handle->NotificationEp,
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a29a:	f893 1d2e 	ldrb.w	r1, [r3, #3374]	; 0xd2e
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2a4:	f893 0d31 	ldrb.w	r0, [r3, #3377]	; 0xd31
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a2ba:	f8b2 2d36 	ldrh.w	r2, [r2, #3382]	; 0xd36
 800a2be:	9202      	str	r2, [sp, #8]
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	9201      	str	r2, [sp, #4]
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	4623      	mov	r3, r4
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f003 fcc4 	bl	800dc58 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                MTP_Handle->NotificationEpSize);

  USBH_LL_SetToggle(phost, MTP_Handle->NotificationPipe, 0U);
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2d6:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800a2da:	2200      	movs	r2, #0
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f004 f809 	bl	800e2f6 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataInEndpoint(phost);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f9c7 	bl	800a678 <MTP_FindDataInEndpoint>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 800a2ee:	7b7b      	ldrb	r3, [r7, #13]
 800a2f0:	2bff      	cmp	r3, #255	; 0xff
 800a2f2:	d002      	beq.n	800a2fa <USBH_MTP_InterfaceInit+0x1ce>
 800a2f4:	7b7b      	ldrb	r3, [r7, #13]
 800a2f6:	2b0e      	cmp	r3, #14
 800a2f8:	d90a      	bls.n	800a310 <USBH_MTP_InterfaceInit+0x1e4>
  {
    USBH_DbgLog("Invalid Data IN endpoint number");
 800a2fa:	483f      	ldr	r0, [pc, #252]	; (800a3f8 <USBH_MTP_InterfaceInit+0x2cc>)
 800a2fc:	f008 fc4e 	bl	8012b9c <iprintf>
 800a300:	4841      	ldr	r0, [pc, #260]	; (800a408 <USBH_MTP_InterfaceInit+0x2dc>)
 800a302:	f008 fc4b 	bl	8012b9c <iprintf>
 800a306:	200a      	movs	r0, #10
 800a308:	f008 fc60 	bl	8012bcc <putchar>
    return USBH_FAIL;
 800a30c:	2302      	movs	r3, #2
 800a30e:	e0f4      	b.n	800a4fa <USBH_MTP_InterfaceInit+0x3ce>
  }

  /*Collect the control endpoint address and length*/
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800a310:	7bfa      	ldrb	r2, [r7, #15]
 800a312:	7b7b      	ldrb	r3, [r7, #13]
 800a314:	6879      	ldr	r1, [r7, #4]
 800a316:	3301      	adds	r3, #1
 800a318:	00d8      	lsls	r0, r3, #3
 800a31a:	4613      	mov	r3, r2
 800a31c:	019b      	lsls	r3, r3, #6
 800a31e:	4413      	add	r3, r2
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	4403      	add	r3, r0
 800a324:	440b      	add	r3, r1
 800a326:	f603 1344 	addw	r3, r3, #2372	; 0x944
 800a32a:	781a      	ldrb	r2, [r3, #0]
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a332:	f883 2d30 	strb.w	r2, [r3, #3376]	; 0xd30
  MTP_Handle->DataInEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800a336:	7bfa      	ldrb	r2, [r7, #15]
 800a338:	7b7b      	ldrb	r3, [r7, #13]
 800a33a:	6879      	ldr	r1, [r7, #4]
 800a33c:	3301      	adds	r3, #1
 800a33e:	00d8      	lsls	r0, r3, #3
 800a340:	4613      	mov	r3, r2
 800a342:	019b      	lsls	r3, r3, #6
 800a344:	4413      	add	r3, r2
 800a346:	005b      	lsls	r3, r3, #1
 800a348:	4403      	add	r3, r0
 800a34a:	440b      	add	r3, r1
 800a34c:	f603 1346 	addw	r3, r3, #2374	; 0x946
 800a350:	881a      	ldrh	r2, [r3, #0]
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a358:	f8a3 2d34 	strh.w	r2, [r3, #3380]	; 0xd34
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a362:	f893 3d30 	ldrb.w	r3, [r3, #3376]	; 0xd30
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f003 fca4 	bl	800dcb6 <USBH_AllocPipe>
 800a36e:	4603      	mov	r3, r0
 800a370:	461a      	mov	r2, r3
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a378:	f883 2d2c 	strb.w	r2, [r3, #3372]	; 0xd2c

  /* Open pipe for DATA IN endpoint */
  USBH_OpenPipe(phost, MTP_Handle->DataInPipe, MTP_Handle->DataInEp,
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a382:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	; 0xd2c
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a38c:	f893 0d30 	ldrb.w	r0, [r3, #3376]	; 0xd30
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3a2:	f8b2 2d34 	ldrh.w	r2, [r2, #3380]	; 0xd34
 800a3a6:	9202      	str	r2, [sp, #8]
 800a3a8:	2202      	movs	r2, #2
 800a3aa:	9201      	str	r2, [sp, #4]
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	4623      	mov	r3, r4
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f003 fc50 	bl	800dc58 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MTP_Handle->DataInEpSize);

  USBH_LL_SetToggle(phost, MTP_Handle->DataInPipe, 0U);
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3be:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f003 ff95 	bl	800e2f6 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataOutEndpoint(phost);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f8f6 	bl	800a5be <MTP_FindDataOutEndpoint>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 800a3d6:	7b7b      	ldrb	r3, [r7, #13]
 800a3d8:	2bff      	cmp	r3, #255	; 0xff
 800a3da:	d002      	beq.n	800a3e2 <USBH_MTP_InterfaceInit+0x2b6>
 800a3dc:	7b7b      	ldrb	r3, [r7, #13]
 800a3de:	2b0e      	cmp	r3, #14
 800a3e0:	d916      	bls.n	800a410 <USBH_MTP_InterfaceInit+0x2e4>
  {
    USBH_DbgLog("Invalid Data OUT endpoint number");
 800a3e2:	4805      	ldr	r0, [pc, #20]	; (800a3f8 <USBH_MTP_InterfaceInit+0x2cc>)
 800a3e4:	f008 fbda 	bl	8012b9c <iprintf>
 800a3e8:	4808      	ldr	r0, [pc, #32]	; (800a40c <USBH_MTP_InterfaceInit+0x2e0>)
 800a3ea:	f008 fbd7 	bl	8012b9c <iprintf>
 800a3ee:	200a      	movs	r0, #10
 800a3f0:	f008 fbec 	bl	8012bcc <putchar>
    return USBH_FAIL;
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	e080      	b.n	800a4fa <USBH_MTP_InterfaceInit+0x3ce>
 800a3f8:	08013c60 	.word	0x08013c60
 800a3fc:	08013c6c 	.word	0x08013c6c
 800a400:	08013ca0 	.word	0x08013ca0
 800a404:	08013cc0 	.word	0x08013cc0
 800a408:	08013ce8 	.word	0x08013ce8
 800a40c:	08013d08 	.word	0x08013d08
  }

  /*Collect the DATA OUT endpoint address and length*/
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800a410:	7bfa      	ldrb	r2, [r7, #15]
 800a412:	7b7b      	ldrb	r3, [r7, #13]
 800a414:	6879      	ldr	r1, [r7, #4]
 800a416:	3301      	adds	r3, #1
 800a418:	00d8      	lsls	r0, r3, #3
 800a41a:	4613      	mov	r3, r2
 800a41c:	019b      	lsls	r3, r3, #6
 800a41e:	4413      	add	r3, r2
 800a420:	005b      	lsls	r3, r3, #1
 800a422:	4403      	add	r3, r0
 800a424:	440b      	add	r3, r1
 800a426:	f603 1344 	addw	r3, r3, #2372	; 0x944
 800a42a:	781a      	ldrb	r2, [r3, #0]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a432:	f883 2d2f 	strb.w	r2, [r3, #3375]	; 0xd2f
  MTP_Handle->DataOutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800a436:	7bfa      	ldrb	r2, [r7, #15]
 800a438:	7b7b      	ldrb	r3, [r7, #13]
 800a43a:	6879      	ldr	r1, [r7, #4]
 800a43c:	3301      	adds	r3, #1
 800a43e:	00d8      	lsls	r0, r3, #3
 800a440:	4613      	mov	r3, r2
 800a442:	019b      	lsls	r3, r3, #6
 800a444:	4413      	add	r3, r2
 800a446:	005b      	lsls	r3, r3, #1
 800a448:	4403      	add	r3, r0
 800a44a:	440b      	add	r3, r1
 800a44c:	f603 1346 	addw	r3, r3, #2374	; 0x946
 800a450:	881a      	ldrh	r2, [r3, #0]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a458:	f8a3 2d32 	strh.w	r2, [r3, #3378]	; 0xd32
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a462:	f893 3d2f 	ldrb.w	r3, [r3, #3375]	; 0xd2f
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f003 fc24 	bl	800dcb6 <USBH_AllocPipe>
 800a46e:	4603      	mov	r3, r0
 800a470:	461a      	mov	r2, r3
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a478:	f883 2d2d 	strb.w	r2, [r3, #3373]	; 0xd2d

  /* Open pipe for DATA OUT endpoint */
  USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a482:	f893 1d2d 	ldrb.w	r1, [r3, #3373]	; 0xd2d
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a48c:	f893 0d2f 	ldrb.w	r0, [r3, #3375]	; 0xd2f
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 491c 	ldrb.w	r4, [r3, #2332]	; 0x91c
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4a2:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 800a4a6:	9202      	str	r2, [sp, #8]
 800a4a8:	2202      	movs	r2, #2
 800a4aa:	9201      	str	r2, [sp, #4]
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	4623      	mov	r3, r4
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f003 fbd0 	bl	800dc58 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MTP_Handle->DataOutEpSize);

  USBH_LL_SetToggle(phost, MTP_Handle->DataOutPipe, 0U);
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4be:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f003 ff15 	bl	800e2f6 <USBH_LL_SetToggle>

  MTP_Handle->state = MTP_OPENSESSION;
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
  MTP_Handle->is_ready = 0U;
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a4de:	461a      	mov	r2, r3
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2d3c 	strb.w	r2, [r3, #3388]	; 0xd3c

  return USBH_PTP_Init(phost);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fdb1 	bl	800b05a <USBH_PTP_Init>
 800a4f8:	4603      	mov	r3, r0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd90      	pop	{r4, r7, pc}
 800a502:	bf00      	nop

0800a504 <MTP_FindCtlEndpoint>:
  * @brief  Find MTP Ctl interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindCtlEndpoint(USBH_HandleTypeDef *phost)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
 800a510:	e04c      	b.n	800a5ac <MTP_FindCtlEndpoint+0xa8>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 800a512:	7bfa      	ldrb	r2, [r7, #15]
 800a514:	6879      	ldr	r1, [r7, #4]
 800a516:	4613      	mov	r3, r2
 800a518:	019b      	lsls	r3, r3, #6
 800a51a:	4413      	add	r3, r2
 800a51c:	005b      	lsls	r3, r3, #1
 800a51e:	440b      	add	r3, r1
 800a520:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b06      	cmp	r3, #6
 800a528:	d13d      	bne.n	800a5a6 <MTP_FindCtlEndpoint+0xa2>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 800a52a:	2300      	movs	r3, #0
 800a52c:	73bb      	strb	r3, [r7, #14]
 800a52e:	e037      	b.n	800a5a0 <MTP_FindCtlEndpoint+0x9c>
      {
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 800a530:	7bfa      	ldrb	r2, [r7, #15]
 800a532:	7bbb      	ldrb	r3, [r7, #14]
 800a534:	6879      	ldr	r1, [r7, #4]
 800a536:	3301      	adds	r3, #1
 800a538:	00d8      	lsls	r0, r3, #3
 800a53a:	4613      	mov	r3, r2
 800a53c:	019b      	lsls	r3, r3, #6
 800a53e:	4413      	add	r3, r2
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	4403      	add	r3, r0
 800a544:	440b      	add	r3, r1
 800a546:	f603 1344 	addw	r3, r3, #2372	; 0x944
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	b25b      	sxtb	r3, r3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	da23      	bge.n	800a59a <MTP_FindCtlEndpoint+0x96>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800a552:	7bfa      	ldrb	r2, [r7, #15]
 800a554:	7bbb      	ldrb	r3, [r7, #14]
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	3301      	adds	r3, #1
 800a55a:	00d8      	lsls	r0, r3, #3
 800a55c:	4613      	mov	r3, r2
 800a55e:	019b      	lsls	r3, r3, #6
 800a560:	4413      	add	r3, r2
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	4403      	add	r3, r0
 800a566:	440b      	add	r3, r1
 800a568:	f603 1346 	addw	r3, r3, #2374	; 0x946
 800a56c:	881b      	ldrh	r3, [r3, #0]
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d013      	beq.n	800a59a <MTP_FindCtlEndpoint+0x96>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_INTERRUPT) == USBH_EP_INTERRUPT))
 800a572:	7bfa      	ldrb	r2, [r7, #15]
 800a574:	7bbb      	ldrb	r3, [r7, #14]
 800a576:	6879      	ldr	r1, [r7, #4]
 800a578:	3301      	adds	r3, #1
 800a57a:	00d8      	lsls	r0, r3, #3
 800a57c:	4613      	mov	r3, r2
 800a57e:	019b      	lsls	r3, r3, #6
 800a580:	4413      	add	r3, r2
 800a582:	005b      	lsls	r3, r3, #1
 800a584:	4403      	add	r3, r0
 800a586:	440b      	add	r3, r1
 800a588:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	f003 0303 	and.w	r3, r3, #3
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800a592:	2b03      	cmp	r3, #3
 800a594:	d101      	bne.n	800a59a <MTP_FindCtlEndpoint+0x96>
        {
          return endpoint;
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	e00c      	b.n	800a5b4 <MTP_FindCtlEndpoint+0xb0>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 800a59a:	7bbb      	ldrb	r3, [r7, #14]
 800a59c:	3301      	adds	r3, #1
 800a59e:	73bb      	strb	r3, [r7, #14]
 800a5a0:	7bbb      	ldrb	r3, [r7, #14]
 800a5a2:	2b0e      	cmp	r3, #14
 800a5a4:	d9c4      	bls.n	800a530 <MTP_FindCtlEndpoint+0x2c>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	73fb      	strb	r3, [r7, #15]
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
 800a5ae:	2b0e      	cmp	r3, #14
 800a5b0:	d9af      	bls.n	800a512 <MTP_FindCtlEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 800a5b2:	23ff      	movs	r3, #255	; 0xff
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bc80      	pop	{r7}
 800a5bc:	4770      	bx	lr

0800a5be <MTP_FindDataOutEndpoint>:
  * @brief  Find MTP DATA OUT interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataOutEndpoint(USBH_HandleTypeDef *phost)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b085      	sub	sp, #20
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73fb      	strb	r3, [r7, #15]
 800a5ca:	e04c      	b.n	800a666 <MTP_FindDataOutEndpoint+0xa8>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 800a5cc:	7bfa      	ldrb	r2, [r7, #15]
 800a5ce:	6879      	ldr	r1, [r7, #4]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	019b      	lsls	r3, r3, #6
 800a5d4:	4413      	add	r3, r2
 800a5d6:	005b      	lsls	r3, r3, #1
 800a5d8:	440b      	add	r3, r1
 800a5da:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	2b06      	cmp	r3, #6
 800a5e2:	d13d      	bne.n	800a660 <MTP_FindDataOutEndpoint+0xa2>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73bb      	strb	r3, [r7, #14]
 800a5e8:	e037      	b.n	800a65a <MTP_FindDataOutEndpoint+0x9c>
      {

        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 800a5ea:	7bfa      	ldrb	r2, [r7, #15]
 800a5ec:	7bbb      	ldrb	r3, [r7, #14]
 800a5ee:	6879      	ldr	r1, [r7, #4]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	00d8      	lsls	r0, r3, #3
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	019b      	lsls	r3, r3, #6
 800a5f8:	4413      	add	r3, r2
 800a5fa:	005b      	lsls	r3, r3, #1
 800a5fc:	4403      	add	r3, r0
 800a5fe:	440b      	add	r3, r1
 800a600:	f603 1344 	addw	r3, r3, #2372	; 0x944
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	b25b      	sxtb	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	db23      	blt.n	800a654 <MTP_FindDataOutEndpoint+0x96>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800a60c:	7bfa      	ldrb	r2, [r7, #15]
 800a60e:	7bbb      	ldrb	r3, [r7, #14]
 800a610:	6879      	ldr	r1, [r7, #4]
 800a612:	3301      	adds	r3, #1
 800a614:	00d8      	lsls	r0, r3, #3
 800a616:	4613      	mov	r3, r2
 800a618:	019b      	lsls	r3, r3, #6
 800a61a:	4413      	add	r3, r2
 800a61c:	005b      	lsls	r3, r3, #1
 800a61e:	4403      	add	r3, r0
 800a620:	440b      	add	r3, r1
 800a622:	f603 1346 	addw	r3, r3, #2374	; 0x946
 800a626:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d013      	beq.n	800a654 <MTP_FindDataOutEndpoint+0x96>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 800a62c:	7bfa      	ldrb	r2, [r7, #15]
 800a62e:	7bbb      	ldrb	r3, [r7, #14]
 800a630:	6879      	ldr	r1, [r7, #4]
 800a632:	3301      	adds	r3, #1
 800a634:	00d8      	lsls	r0, r3, #3
 800a636:	4613      	mov	r3, r2
 800a638:	019b      	lsls	r3, r3, #6
 800a63a:	4413      	add	r3, r2
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	4403      	add	r3, r0
 800a640:	440b      	add	r3, r1
 800a642:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <MTP_FindDataOutEndpoint+0x96>
        {
          return endpoint;
 800a650:	7bbb      	ldrb	r3, [r7, #14]
 800a652:	e00c      	b.n	800a66e <MTP_FindDataOutEndpoint+0xb0>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 800a654:	7bbb      	ldrb	r3, [r7, #14]
 800a656:	3301      	adds	r3, #1
 800a658:	73bb      	strb	r3, [r7, #14]
 800a65a:	7bbb      	ldrb	r3, [r7, #14]
 800a65c:	2b0e      	cmp	r3, #14
 800a65e:	d9c4      	bls.n	800a5ea <MTP_FindDataOutEndpoint+0x2c>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	3301      	adds	r3, #1
 800a664:	73fb      	strb	r3, [r7, #15]
 800a666:	7bfb      	ldrb	r3, [r7, #15]
 800a668:	2b0e      	cmp	r3, #14
 800a66a:	d9af      	bls.n	800a5cc <MTP_FindDataOutEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 800a66c:	23ff      	movs	r3, #255	; 0xff
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3714      	adds	r7, #20
 800a672:	46bd      	mov	sp, r7
 800a674:	bc80      	pop	{r7}
 800a676:	4770      	bx	lr

0800a678 <MTP_FindDataInEndpoint>:
  * @brief  Find MTP DATA IN interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataInEndpoint(USBH_HandleTypeDef *phost)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800a680:	2300      	movs	r3, #0
 800a682:	73fb      	strb	r3, [r7, #15]
 800a684:	e04c      	b.n	800a720 <MTP_FindDataInEndpoint+0xa8>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 800a686:	7bfa      	ldrb	r2, [r7, #15]
 800a688:	6879      	ldr	r1, [r7, #4]
 800a68a:	4613      	mov	r3, r2
 800a68c:	019b      	lsls	r3, r3, #6
 800a68e:	4413      	add	r3, r2
 800a690:	005b      	lsls	r3, r3, #1
 800a692:	440b      	add	r3, r1
 800a694:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	2b06      	cmp	r3, #6
 800a69c:	d13d      	bne.n	800a71a <MTP_FindDataInEndpoint+0xa2>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 800a69e:	2300      	movs	r3, #0
 800a6a0:	73bb      	strb	r3, [r7, #14]
 800a6a2:	e037      	b.n	800a714 <MTP_FindDataInEndpoint+0x9c>
      {

        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 800a6a4:	7bfa      	ldrb	r2, [r7, #15]
 800a6a6:	7bbb      	ldrb	r3, [r7, #14]
 800a6a8:	6879      	ldr	r1, [r7, #4]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	00d8      	lsls	r0, r3, #3
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	019b      	lsls	r3, r3, #6
 800a6b2:	4413      	add	r3, r2
 800a6b4:	005b      	lsls	r3, r3, #1
 800a6b6:	4403      	add	r3, r0
 800a6b8:	440b      	add	r3, r1
 800a6ba:	f603 1344 	addw	r3, r3, #2372	; 0x944
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	b25b      	sxtb	r3, r3
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	da23      	bge.n	800a70e <MTP_FindDataInEndpoint+0x96>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800a6c6:	7bfa      	ldrb	r2, [r7, #15]
 800a6c8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ca:	6879      	ldr	r1, [r7, #4]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	00d8      	lsls	r0, r3, #3
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	019b      	lsls	r3, r3, #6
 800a6d4:	4413      	add	r3, r2
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	4403      	add	r3, r0
 800a6da:	440b      	add	r3, r1
 800a6dc:	f603 1346 	addw	r3, r3, #2374	; 0x946
 800a6e0:	881b      	ldrh	r3, [r3, #0]
        if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) &&
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d013      	beq.n	800a70e <MTP_FindDataInEndpoint+0x96>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 800a6e6:	7bfa      	ldrb	r2, [r7, #15]
 800a6e8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	00d8      	lsls	r0, r3, #3
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	019b      	lsls	r3, r3, #6
 800a6f4:	4413      	add	r3, r2
 800a6f6:	005b      	lsls	r3, r3, #1
 800a6f8:	4403      	add	r3, r0
 800a6fa:	440b      	add	r3, r1
 800a6fc:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <MTP_FindDataInEndpoint+0x96>
        {
          return endpoint;
 800a70a:	7bbb      	ldrb	r3, [r7, #14]
 800a70c:	e00c      	b.n	800a728 <MTP_FindDataInEndpoint+0xb0>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
 800a710:	3301      	adds	r3, #1
 800a712:	73bb      	strb	r3, [r7, #14]
 800a714:	7bbb      	ldrb	r3, [r7, #14]
 800a716:	2b0e      	cmp	r3, #14
 800a718:	d9c4      	bls.n	800a6a4 <MTP_FindDataInEndpoint+0x2c>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
 800a71c:	3301      	adds	r3, #1
 800a71e:	73fb      	strb	r3, [r7, #15]
 800a720:	7bfb      	ldrb	r3, [r7, #15]
 800a722:	2b0e      	cmp	r3, #14
 800a724:	d9af      	bls.n	800a686 <MTP_FindDataInEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 800a726:	23ff      	movs	r3, #255	; 0xff
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bc80      	pop	{r7}
 800a730:	4770      	bx	lr

0800a732 <USBH_MTP_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a740:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	60fb      	str	r3, [r7, #12]

  if (MTP_Handle->DataOutPipe != 0U)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a74e:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800a752:	2b00      	cmp	r3, #0
 800a754:	d017      	beq.n	800a786 <USBH_MTP_InterfaceDeInit+0x54>
  {
    USBH_ClosePipe(phost, MTP_Handle->DataOutPipe);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a75c:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800a760:	4619      	mov	r1, r3
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f003 fa97 	bl	800dc96 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataOutPipe);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a76e:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800a772:	4619      	mov	r1, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f003 fac0 	bl	800dcfa <USBH_FreePipe>
    MTP_Handle->DataOutPipe = 0U;     /* Reset the Channel as Free */
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2d2d 	strb.w	r2, [r3, #3373]	; 0xd2d
  }

  if (MTP_Handle->DataInPipe != 0U)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a78c:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800a790:	2b00      	cmp	r3, #0
 800a792:	d017      	beq.n	800a7c4 <USBH_MTP_InterfaceDeInit+0x92>
  {
    USBH_ClosePipe(phost, MTP_Handle->DataInPipe);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a79a:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800a79e:	4619      	mov	r1, r3
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f003 fa78 	bl	800dc96 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->DataInPipe);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ac:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f003 faa1 	bl	800dcfa <USBH_FreePipe>
    MTP_Handle->DataInPipe = 0U;     /* Reset the Channel as Free */
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 2d2c 	strb.w	r2, [r3, #3372]	; 0xd2c
  }

  if (MTP_Handle->NotificationPipe != 0U)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ca:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d017      	beq.n	800a802 <USBH_MTP_InterfaceDeInit+0xd0>
  {
    USBH_ClosePipe(phost, MTP_Handle->NotificationPipe);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7d8:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f003 fa59 	bl	800dc96 <USBH_ClosePipe>
    USBH_FreePipe(phost, MTP_Handle->NotificationPipe);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ea:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f003 fa82 	bl	800dcfa <USBH_FreePipe>
    MTP_Handle->NotificationPipe = 0U;     /* Reset the Channel as Free */
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2d2e 	strb.w	r2, [r3, #3374]	; 0xd2e
  }

  if (phost->pActiveClass->pData != NULL)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a808:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00f      	beq.n	800a832 <USBH_MTP_InterfaceDeInit+0x100>
  {
    USBH_free(phost->pActiveClass->pData);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a818:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a81c:	69db      	ldr	r3, [r3, #28]
 800a81e:	4618      	mov	r0, r3
 800a820:	f007 fdc0 	bl	80123a4 <free>
    phost->pActiveClass->pData = 0U;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a82a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a82e:	2200      	movs	r2, #0
 800a830:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBH_MTP_ClassRequest>:
  *         for MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
#else
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
#endif

  return USBH_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bc80      	pop	{r7}
 800a84e:	4770      	bx	lr

0800a850 <USBH_MTP_Process>:
  *         The function is for managing state machine for MTP data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_Process(USBH_HandleTypeDef *phost)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a858:	2301      	movs	r3, #1
 800a85a:	75fb      	strb	r3, [r7, #23]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a862:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800a866:	69db      	ldr	r3, [r3, #28]
 800a868:	60fb      	str	r3, [r7, #12]
  uint32_t idx = 0U;
 800a86a:	2300      	movs	r3, #0
 800a86c:	613b      	str	r3, [r7, #16]

  switch (MTP_Handle->state)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a874:	f893 3d38 	ldrb.w	r3, [r3, #3384]	; 0xd38
 800a878:	2b05      	cmp	r3, #5
 800a87a:	f200 81d7 	bhi.w	800ac2c <USBH_MTP_Process+0x3dc>
 800a87e:	a201      	add	r2, pc, #4	; (adr r2, 800a884 <USBH_MTP_Process+0x34>)
 800a880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a884:	0800ac21 	.word	0x0800ac21
 800a888:	0800a8cb 	.word	0x0800a8cb
 800a88c:	0800a89d 	.word	0x0800a89d
 800a890:	0800ac2d 	.word	0x0800ac2d
 800a894:	0800aa15 	.word	0x0800aa15
 800a898:	0800aaa1 	.word	0x0800aaa1
  {
    case  MTP_OPENSESSION:
      status = USBH_PTP_OpenSession(phost, 1U);  /* Session '0' is not valid */
 800a89c:	2101      	movs	r1, #1
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f001 fbfa 	bl	800c098 <USBH_PTP_OpenSession>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800a8a8:	7dfb      	ldrb	r3, [r7, #23]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f040 81c0 	bne.w	800ac30 <USBH_MTP_Process+0x3e0>
      {
        USBH_UsrLog("MTP Session #0 Opened");
 800a8b0:	48c5      	ldr	r0, [pc, #788]	; (800abc8 <USBH_MTP_Process+0x378>)
 800a8b2:	f008 f973 	bl	8012b9c <iprintf>
 800a8b6:	200a      	movs	r0, #10
 800a8b8:	f008 f988 	bl	8012bcc <putchar>
        MTP_Handle->state = MTP_GETDEVICEINFO;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a8c8:	e1b2      	b.n	800ac30 <USBH_MTP_Process+0x3e0>

    case MTP_GETDEVICEINFO:
      status = USBH_PTP_GetDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f001 fc49 	bl	800c166 <USBH_PTP_GetDeviceInfo>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f040 81aa 	bne.w	800ac34 <USBH_MTP_Process+0x3e4>
      {
        USBH_DbgLog(">>>>> MTP Device Information");
 800a8e0:	48ba      	ldr	r0, [pc, #744]	; (800abcc <USBH_MTP_Process+0x37c>)
 800a8e2:	f008 f95b 	bl	8012b9c <iprintf>
 800a8e6:	48ba      	ldr	r0, [pc, #744]	; (800abd0 <USBH_MTP_Process+0x380>)
 800a8e8:	f008 f958 	bl	8012b9c <iprintf>
 800a8ec:	200a      	movs	r0, #10
 800a8ee:	f008 f96d 	bl	8012bcc <putchar>
        USBH_DbgLog("Standard version : %x", MTP_Handle->info.devinfo.StandardVersion);
 800a8f2:	48b6      	ldr	r0, [pc, #728]	; (800abcc <USBH_MTP_Process+0x37c>)
 800a8f4:	f008 f952 	bl	8012b9c <iprintf>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	48b5      	ldr	r0, [pc, #724]	; (800abd4 <USBH_MTP_Process+0x384>)
 800a900:	f008 f94c 	bl	8012b9c <iprintf>
 800a904:	200a      	movs	r0, #10
 800a906:	f008 f961 	bl	8012bcc <putchar>
        USBH_DbgLog("Vendor ExtID : %s", (MTP_Handle->info.devinfo.VendorExtensionID == 6) ? "MTP" : "NOT SUPPORTED");
 800a90a:	48b0      	ldr	r0, [pc, #704]	; (800abcc <USBH_MTP_Process+0x37c>)
 800a90c:	f008 f946 	bl	8012b9c <iprintf>
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	2b06      	cmp	r3, #6
 800a916:	d101      	bne.n	800a91c <USBH_MTP_Process+0xcc>
 800a918:	4baf      	ldr	r3, [pc, #700]	; (800abd8 <USBH_MTP_Process+0x388>)
 800a91a:	e000      	b.n	800a91e <USBH_MTP_Process+0xce>
 800a91c:	4baf      	ldr	r3, [pc, #700]	; (800abdc <USBH_MTP_Process+0x38c>)
 800a91e:	4619      	mov	r1, r3
 800a920:	48af      	ldr	r0, [pc, #700]	; (800abe0 <USBH_MTP_Process+0x390>)
 800a922:	f008 f93b 	bl	8012b9c <iprintf>
 800a926:	200a      	movs	r0, #10
 800a928:	f008 f950 	bl	8012bcc <putchar>
        USBH_DbgLog("Functional mode : %s", (MTP_Handle->info.devinfo.FunctionalMode == 0U) ? "Standard" : "Vendor");
 800a92c:	48a7      	ldr	r0, [pc, #668]	; (800abcc <USBH_MTP_Process+0x37c>)
 800a92e:	f008 f935 	bl	8012b9c <iprintf>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d101      	bne.n	800a940 <USBH_MTP_Process+0xf0>
 800a93c:	4ba9      	ldr	r3, [pc, #676]	; (800abe4 <USBH_MTP_Process+0x394>)
 800a93e:	e000      	b.n	800a942 <USBH_MTP_Process+0xf2>
 800a940:	4ba9      	ldr	r3, [pc, #676]	; (800abe8 <USBH_MTP_Process+0x398>)
 800a942:	4619      	mov	r1, r3
 800a944:	48a9      	ldr	r0, [pc, #676]	; (800abec <USBH_MTP_Process+0x39c>)
 800a946:	f008 f929 	bl	8012b9c <iprintf>
 800a94a:	200a      	movs	r0, #10
 800a94c:	f008 f93e 	bl	8012bcc <putchar>
        USBH_DbgLog("Number of Supported Operation(s) : %d", MTP_Handle->info.devinfo.OperationsSupported_len);
 800a950:	489e      	ldr	r0, [pc, #632]	; (800abcc <USBH_MTP_Process+0x37c>)
 800a952:	f008 f923 	bl	8012b9c <iprintf>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a95c:	4619      	mov	r1, r3
 800a95e:	48a4      	ldr	r0, [pc, #656]	; (800abf0 <USBH_MTP_Process+0x3a0>)
 800a960:	f008 f91c 	bl	8012b9c <iprintf>
 800a964:	200a      	movs	r0, #10
 800a966:	f008 f931 	bl	8012bcc <putchar>
        USBH_DbgLog("Number of Supported Events(s) : %d", MTP_Handle->info.devinfo.EventsSupported_len);
 800a96a:	4898      	ldr	r0, [pc, #608]	; (800abcc <USBH_MTP_Process+0x37c>)
 800a96c:	f008 f916 	bl	8012b9c <iprintf>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800a976:	4619      	mov	r1, r3
 800a978:	489e      	ldr	r0, [pc, #632]	; (800abf4 <USBH_MTP_Process+0x3a4>)
 800a97a:	f008 f90f 	bl	8012b9c <iprintf>
 800a97e:	200a      	movs	r0, #10
 800a980:	f008 f924 	bl	8012bcc <putchar>
        USBH_DbgLog("Number of Supported Proprieties : %d", MTP_Handle->info.devinfo.DevicePropertiesSupported_len);
 800a984:	4891      	ldr	r0, [pc, #580]	; (800abcc <USBH_MTP_Process+0x37c>)
 800a986:	f008 f909 	bl	8012b9c <iprintf>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a990:	4619      	mov	r1, r3
 800a992:	4899      	ldr	r0, [pc, #612]	; (800abf8 <USBH_MTP_Process+0x3a8>)
 800a994:	f008 f902 	bl	8012b9c <iprintf>
 800a998:	200a      	movs	r0, #10
 800a99a:	f008 f917 	bl	8012bcc <putchar>
        USBH_DbgLog("Manufacturer : %s", MTP_Handle->info.devinfo.Manufacturer);
 800a99e:	488b      	ldr	r0, [pc, #556]	; (800abcc <USBH_MTP_Process+0x37c>)
 800a9a0:	f008 f8fc 	bl	8012b9c <iprintf>
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	4893      	ldr	r0, [pc, #588]	; (800abfc <USBH_MTP_Process+0x3ac>)
 800a9ae:	f008 f8f5 	bl	8012b9c <iprintf>
 800a9b2:	200a      	movs	r0, #10
 800a9b4:	f008 f90a 	bl	8012bcc <putchar>
        USBH_DbgLog("Model : %s", MTP_Handle->info.devinfo.Model);
 800a9b8:	4884      	ldr	r0, [pc, #528]	; (800abcc <USBH_MTP_Process+0x37c>)
 800a9ba:	f008 f8ef 	bl	8012b9c <iprintf>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f203 6307 	addw	r3, r3, #1543	; 0x607
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	488e      	ldr	r0, [pc, #568]	; (800ac00 <USBH_MTP_Process+0x3b0>)
 800a9c8:	f008 f8e8 	bl	8012b9c <iprintf>
 800a9cc:	200a      	movs	r0, #10
 800a9ce:	f008 f8fd 	bl	8012bcc <putchar>
        USBH_DbgLog("Device version : %s", MTP_Handle->info.devinfo.DeviceVersion);
 800a9d2:	487e      	ldr	r0, [pc, #504]	; (800abcc <USBH_MTP_Process+0x37c>)
 800a9d4:	f008 f8e2 	bl	8012b9c <iprintf>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f203 7306 	addw	r3, r3, #1798	; 0x706
 800a9de:	4619      	mov	r1, r3
 800a9e0:	4888      	ldr	r0, [pc, #544]	; (800ac04 <USBH_MTP_Process+0x3b4>)
 800a9e2:	f008 f8db 	bl	8012b9c <iprintf>
 800a9e6:	200a      	movs	r0, #10
 800a9e8:	f008 f8f0 	bl	8012bcc <putchar>
        USBH_DbgLog("Serial number : %s", MTP_Handle->info.devinfo.SerialNumber);
 800a9ec:	4877      	ldr	r0, [pc, #476]	; (800abcc <USBH_MTP_Process+0x37c>)
 800a9ee:	f008 f8d5 	bl	8012b9c <iprintf>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f603 0305 	addw	r3, r3, #2053	; 0x805
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4883      	ldr	r0, [pc, #524]	; (800ac08 <USBH_MTP_Process+0x3b8>)
 800a9fc:	f008 f8ce 	bl	8012b9c <iprintf>
 800aa00:	200a      	movs	r0, #10
 800aa02:	f008 f8e3 	bl	8012bcc <putchar>

        MTP_Handle->state = MTP_GETSTORAGEIDS;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa0c:	2204      	movs	r2, #4
 800aa0e:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aa12:	e10f      	b.n	800ac34 <USBH_MTP_Process+0x3e4>

    case MTP_GETSTORAGEIDS:
      status = USBH_PTP_GetStorageIds(phost, &(MTP_Handle->info.storids));
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f603 1304 	addw	r3, r3, #2308	; 0x904
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f001 fc23 	bl	800c268 <USBH_PTP_GetStorageIds>
 800aa22:	4603      	mov	r3, r0
 800aa24:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800aa26:	7dfb      	ldrb	r3, [r7, #23]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f040 8105 	bne.w	800ac38 <USBH_MTP_Process+0x3e8>
      {
        USBH_DbgLog("Number of storage ID items : %d", MTP_Handle->info.storids.n);
 800aa2e:	4867      	ldr	r0, [pc, #412]	; (800abcc <USBH_MTP_Process+0x37c>)
 800aa30:	f008 f8b4 	bl	8012b9c <iprintf>
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	4873      	ldr	r0, [pc, #460]	; (800ac0c <USBH_MTP_Process+0x3bc>)
 800aa3e:	f008 f8ad 	bl	8012b9c <iprintf>
 800aa42:	200a      	movs	r0, #10
 800aa44:	f008 f8c2 	bl	8012bcc <putchar>
        for (idx  = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	613b      	str	r3, [r7, #16]
 800aa4c:	e014      	b.n	800aa78 <USBH_MTP_Process+0x228>
        {
          USBH_DbgLog("storage#%d ID : %x", idx, MTP_Handle->info.storids.Storage[idx]);
 800aa4e:	485f      	ldr	r0, [pc, #380]	; (800abcc <USBH_MTP_Process+0x37c>)
 800aa50:	f008 f8a4 	bl	8012b9c <iprintf>
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4413      	add	r3, r2
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	461a      	mov	r2, r3
 800aa64:	6939      	ldr	r1, [r7, #16]
 800aa66:	486a      	ldr	r0, [pc, #424]	; (800ac10 <USBH_MTP_Process+0x3c0>)
 800aa68:	f008 f898 	bl	8012b9c <iprintf>
 800aa6c:	200a      	movs	r0, #10
 800aa6e:	f008 f8ad 	bl	8012bcc <putchar>
        for (idx  = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	3301      	adds	r3, #1
 800aa76:	613b      	str	r3, [r7, #16]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d3e4      	bcc.n	800aa4e <USBH_MTP_Process+0x1fe>
        }

        MTP_Handle->current_storage_unit = 0U;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
        MTP_Handle->state = MTP_GETSTORAGEINFO;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa98:	2205      	movs	r2, #5
 800aa9a:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aa9e:	e0cb      	b.n	800ac38 <USBH_MTP_Process+0x3e8>

    case MTP_GETSTORAGEINFO:
      status = USBH_PTP_GetStorageInfo(phost,
                                       MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit],
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aaa6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	6899      	ldr	r1, [r3, #8]
                                       &((MTP_Handle->info.storinfo)[MTP_Handle->current_storage_unit]));
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aabc:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 800aac0:	4613      	mov	r3, r2
 800aac2:	011b      	lsls	r3, r3, #4
 800aac4:	4413      	add	r3, r2
 800aac6:	015b      	lsls	r3, r3, #5
 800aac8:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4413      	add	r3, r2
 800aad0:	461a      	mov	r2, r3
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f001 fc49 	bl	800c36a <USBH_PTP_GetStorageInfo>
 800aad8:	4603      	mov	r3, r0
 800aada:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800aadc:	7dfb      	ldrb	r3, [r7, #23]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f040 80ac 	bne.w	800ac3c <USBH_MTP_Process+0x3ec>
      {
        USBH_UsrLog("Volume#%lu: %s   [%s]", MTP_Handle->current_storage_unit,
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aaea:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aaf4:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800aaf8:	4613      	mov	r3, r2
 800aafa:	011b      	lsls	r3, r3, #4
 800aafc:	4413      	add	r3, r2
 800aafe:	015b      	lsls	r3, r3, #5
 800ab00:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	4413      	add	r3, r2
 800ab08:	1d18      	adds	r0, r3, #4
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ab10:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800ab14:	4613      	mov	r3, r2
 800ab16:	011b      	lsls	r3, r3, #4
 800ab18:	4413      	add	r3, r2
 800ab1a:	015b      	lsls	r3, r3, #5
 800ab1c:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	4413      	add	r3, r2
 800ab24:	3303      	adds	r3, #3
 800ab26:	4602      	mov	r2, r0
 800ab28:	483a      	ldr	r0, [pc, #232]	; (800ac14 <USBH_MTP_Process+0x3c4>)
 800ab2a:	f008 f837 	bl	8012b9c <iprintf>
 800ab2e:	200a      	movs	r0, #10
 800ab30:	f008 f84c 	bl	8012bcc <putchar>
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].StorageDescription,
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].VolumeLabel);
        if (++MTP_Handle->current_storage_unit >= MTP_Handle->info.storids.n)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ab3a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800ab3e:	3301      	adds	r3, #1
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800ab46:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ab50:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d36e      	bcc.n	800ac3c <USBH_MTP_Process+0x3ec>
        {
          MTP_Handle->state = MTP_IDLE;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
          MTP_Handle->is_ready = 1U;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ab70:	461a      	mov	r2, r3
 800ab72:	2301      	movs	r3, #1
 800ab74:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
          MTP_Handle->current_storage_unit = 0U;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ab7e:	461a      	mov	r2, r3
 800ab80:	2300      	movs	r3, #0
 800ab82:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
          MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab92:	f8c2 3d18 	str.w	r3, [r2, #3352]	; 0xd18

          USBH_UsrLog("MTP Class initialized.");
 800ab96:	4820      	ldr	r0, [pc, #128]	; (800ac18 <USBH_MTP_Process+0x3c8>)
 800ab98:	f008 f800 	bl	8012b9c <iprintf>
 800ab9c:	200a      	movs	r0, #10
 800ab9e:	f008 f815 	bl	8012bcc <putchar>
          USBH_UsrLog("%s is default storage unit", MTP_Handle->info.storinfo[0].StorageDescription);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 800aba8:	4619      	mov	r1, r3
 800abaa:	481c      	ldr	r0, [pc, #112]	; (800ac1c <USBH_MTP_Process+0x3cc>)
 800abac:	f007 fff6 	bl	8012b9c <iprintf>
 800abb0:	200a      	movs	r0, #10
 800abb2:	f008 f80b 	bl	8012bcc <putchar>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abbc:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800abc0:	2102      	movs	r1, #2
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	4798      	blx	r3
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800abc6:	e039      	b.n	800ac3c <USBH_MTP_Process+0x3ec>
 800abc8:	08013d2c 	.word	0x08013d2c
 800abcc:	08013c60 	.word	0x08013c60
 800abd0:	08013d44 	.word	0x08013d44
 800abd4:	08013d64 	.word	0x08013d64
 800abd8:	08013c5c 	.word	0x08013c5c
 800abdc:	08013d7c 	.word	0x08013d7c
 800abe0:	08013d8c 	.word	0x08013d8c
 800abe4:	08013da0 	.word	0x08013da0
 800abe8:	08013dac 	.word	0x08013dac
 800abec:	08013db4 	.word	0x08013db4
 800abf0:	08013dcc 	.word	0x08013dcc
 800abf4:	08013df4 	.word	0x08013df4
 800abf8:	08013e18 	.word	0x08013e18
 800abfc:	08013e40 	.word	0x08013e40
 800ac00:	08013e54 	.word	0x08013e54
 800ac04:	08013e60 	.word	0x08013e60
 800ac08:	08013e74 	.word	0x08013e74
 800ac0c:	08013e88 	.word	0x08013e88
 800ac10:	08013ea8 	.word	0x08013ea8
 800ac14:	08013ebc 	.word	0x08013ebc
 800ac18:	08013ed4 	.word	0x08013ed4
 800ac1c:	08013eec 	.word	0x08013eec

    case  MTP_IDLE:
      USBH_MTP_Events(phost);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f81b 	bl	800ac5c <USBH_MTP_Events>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

      status = USBH_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	75fb      	strb	r3, [r7, #23]
      break;
 800ac2a:	e008      	b.n	800ac3e <USBH_MTP_Process+0x3ee>

    default:
      break;
 800ac2c:	bf00      	nop
 800ac2e:	e006      	b.n	800ac3e <USBH_MTP_Process+0x3ee>
      break;
 800ac30:	bf00      	nop
 800ac32:	e004      	b.n	800ac3e <USBH_MTP_Process+0x3ee>
      break;
 800ac34:	bf00      	nop
 800ac36:	e002      	b.n	800ac3e <USBH_MTP_Process+0x3ee>
      break;
 800ac38:	bf00      	nop
 800ac3a:	e000      	b.n	800ac3e <USBH_MTP_Process+0x3ee>
      break;
 800ac3c:	bf00      	nop
  }

  return status;
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3718      	adds	r7, #24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <USBH_MTP_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	370c      	adds	r7, #12
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bc80      	pop	{r7}
 800ac5a:	4770      	bx	lr

0800ac5c <USBH_MTP_Events>:
 * @brief  Handle HID Control process
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MTP_Events(USBH_HandleTypeDef *phost)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ac64:	2301      	movs	r3, #1
 800ac66:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac6e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ac72:	69db      	ldr	r3, [r3, #28]
 800ac74:	60bb      	str	r3, [r7, #8]

  switch (MTP_Handle->events.state)
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac7c:	f893 3d3c 	ldrb.w	r3, [r3, #3388]	; 0xd3c
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d002      	beq.n	800ac8a <USBH_MTP_Events+0x2e>
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d02c      	beq.n	800ace2 <USBH_MTP_Events+0x86>

      }
      break;

    default:
      break;
 800ac88:	e06c      	b.n	800ad64 <USBH_MTP_Events+0x108>
      if ((phost->Timer & 1U) == 0U)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac90:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d160      	bne.n	800ad5e <USBH_MTP_Events+0x102>
        MTP_Handle->events.timer = phost->Timer;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aca2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800acac:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
                                  (uint8_t *)(void *) & (MTP_Handle->events.container),
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	f503 51ea 	add.w	r1, r3, #7488	; 0x1d40
 800acb6:	3108      	adds	r1, #8
                                  (uint8_t)MTP_Handle->NotificationEpSize,
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acbe:	f8b3 3d36 	ldrh.w	r3, [r3, #3382]	; 0xd36
        USBH_InterruptReceiveData(phost,
 800acc2:	b2da      	uxtb	r2, r3
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acca:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f002 ff88 	bl	800dbe4 <USBH_InterruptReceiveData>
        MTP_Handle->events.state = MTP_EVENTS_GETDATA;
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 2d3c 	strb.w	r2, [r3, #3388]	; 0xd3c
      break;
 800ace0:	e03d      	b.n	800ad5e <USBH_MTP_Events+0x102>
      if (USBH_LL_GetURBState(phost, MTP_Handle->NotificationPipe) == USBH_URB_DONE)
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ace8:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800acec:	4619      	mov	r1, r3
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f003 fade 	bl	800e2b0 <USBH_LL_GetURBState>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d102      	bne.n	800ad00 <USBH_MTP_Events+0xa4>
        MTP_DecodeEvent(phost);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f838 	bl	800ad70 <MTP_DecodeEvent>
      if ((phost->Timer - MTP_Handle->events.timer) >= MTP_Handle->events.poll)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad06:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad10:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad1c:	f8b2 2d44 	ldrh.w	r2, [r2, #3396]	; 0xd44
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d31e      	bcc.n	800ad62 <USBH_MTP_Events+0x106>
        MTP_Handle->events.timer = phost->Timer;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad2a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad34:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
                                  (uint8_t *)(void *) & (MTP_Handle->events.container),
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	f503 51ea 	add.w	r1, r3, #7488	; 0x1d40
 800ad3e:	3108      	adds	r1, #8
                                  (uint8_t)MTP_Handle->NotificationEpSize,
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad46:	f8b3 3d36 	ldrh.w	r3, [r3, #3382]	; 0xd36
        USBH_InterruptReceiveData(phost,
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad52:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f002 ff44 	bl	800dbe4 <USBH_InterruptReceiveData>
      break;
 800ad5c:	e001      	b.n	800ad62 <USBH_MTP_Events+0x106>
      break;
 800ad5e:	bf00      	nop
 800ad60:	e000      	b.n	800ad64 <USBH_MTP_Events+0x108>
      break;
 800ad62:	bf00      	nop
  }

  return status;
 800ad64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
	...

0800ad70 <MTP_DecodeEvent>:
  *         Decode device event sent by responder
  * @param  phost: Host handle
  * @retval None
  */
static void MTP_DecodeEvent(USBH_HandleTypeDef *phost)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad7e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ad82:	69db      	ldr	r3, [r3, #28]
 800ad84:	617b      	str	r3, [r7, #20]

  uint16_t code;
  uint32_t param1;

  /* Process the event */
  code = MTP_Handle->events.container.code;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad8c:	f8b3 3d4e 	ldrh.w	r3, [r3, #3406]	; 0xd4e
 800ad90:	827b      	strh	r3, [r7, #18]
  param1 = MTP_Handle->events.container.param1;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad98:	f8d3 3d54 	ldr.w	r3, [r3, #3412]	; 0xd54
 800ad9c:	60fb      	str	r3, [r7, #12]

  switch (code)
 800ad9e:	8a7b      	ldrh	r3, [r7, #18]
 800ada0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ada4:	2b0e      	cmp	r3, #14
 800ada6:	f200 8111 	bhi.w	800afcc <MTP_DecodeEvent+0x25c>
 800adaa:	a201      	add	r2, pc, #4	; (adr r2, 800adb0 <MTP_DecodeEvent+0x40>)
 800adac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb0:	0800aded 	.word	0x0800aded
 800adb4:	0800ae0d 	.word	0x0800ae0d
 800adb8:	0800ae2d 	.word	0x0800ae2d
 800adbc:	0800ae4d 	.word	0x0800ae4d
 800adc0:	0800ae6d 	.word	0x0800ae6d
 800adc4:	0800ae8d 	.word	0x0800ae8d
 800adc8:	0800aead 	.word	0x0800aead
 800adcc:	0800aecd 	.word	0x0800aecd
 800add0:	0800aeed 	.word	0x0800aeed
 800add4:	0800af0d 	.word	0x0800af0d
 800add8:	0800af2d 	.word	0x0800af2d
 800addc:	0800af4d 	.word	0x0800af4d
 800ade0:	0800af6d 	.word	0x0800af6d
 800ade4:	0800af8d 	.word	0x0800af8d
 800ade8:	0800afad 	.word	0x0800afad
  {
    case PTP_EC_Undefined:
      USBH_DbgLog("EVT: PTP_EC_Undefined in session %u", MTP_Handle->ptp.session_id);
 800adec:	4884      	ldr	r0, [pc, #528]	; (800b000 <MTP_DecodeEvent+0x290>)
 800adee:	f007 fed5 	bl	8012b9c <iprintf>
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800adf8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800adfc:	4619      	mov	r1, r3
 800adfe:	4881      	ldr	r0, [pc, #516]	; (800b004 <MTP_DecodeEvent+0x294>)
 800ae00:	f007 fecc 	bl	8012b9c <iprintf>
 800ae04:	200a      	movs	r0, #10
 800ae06:	f007 fee1 	bl	8012bcc <putchar>
      break;
 800ae0a:	e0ef      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_CancelTransaction:
      USBH_DbgLog("EVT: PTP_EC_CancelTransaction in session %u", MTP_Handle->ptp.session_id);
 800ae0c:	487c      	ldr	r0, [pc, #496]	; (800b000 <MTP_DecodeEvent+0x290>)
 800ae0e:	f007 fec5 	bl	8012b9c <iprintf>
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ae18:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	487a      	ldr	r0, [pc, #488]	; (800b008 <MTP_DecodeEvent+0x298>)
 800ae20:	f007 febc 	bl	8012b9c <iprintf>
 800ae24:	200a      	movs	r0, #10
 800ae26:	f007 fed1 	bl	8012bcc <putchar>
      break;
 800ae2a:	e0df      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_ObjectAdded:
      USBH_DbgLog("EVT: PTP_EC_ObjectAdded in session %u", MTP_Handle->ptp.session_id);
 800ae2c:	4874      	ldr	r0, [pc, #464]	; (800b000 <MTP_DecodeEvent+0x290>)
 800ae2e:	f007 feb5 	bl	8012b9c <iprintf>
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ae38:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	4873      	ldr	r0, [pc, #460]	; (800b00c <MTP_DecodeEvent+0x29c>)
 800ae40:	f007 feac 	bl	8012b9c <iprintf>
 800ae44:	200a      	movs	r0, #10
 800ae46:	f007 fec1 	bl	8012bcc <putchar>
      break;
 800ae4a:	e0cf      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_ObjectRemoved:
      USBH_DbgLog("EVT: PTP_EC_ObjectRemoved in session %u", MTP_Handle->ptp.session_id);
 800ae4c:	486c      	ldr	r0, [pc, #432]	; (800b000 <MTP_DecodeEvent+0x290>)
 800ae4e:	f007 fea5 	bl	8012b9c <iprintf>
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ae58:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	486c      	ldr	r0, [pc, #432]	; (800b010 <MTP_DecodeEvent+0x2a0>)
 800ae60:	f007 fe9c 	bl	8012b9c <iprintf>
 800ae64:	200a      	movs	r0, #10
 800ae66:	f007 feb1 	bl	8012bcc <putchar>
      break;
 800ae6a:	e0bf      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_StoreAdded:
      USBH_DbgLog("EVT: PTP_EC_StoreAdded in session %u", MTP_Handle->ptp.session_id);
 800ae6c:	4864      	ldr	r0, [pc, #400]	; (800b000 <MTP_DecodeEvent+0x290>)
 800ae6e:	f007 fe95 	bl	8012b9c <iprintf>
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ae78:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	4865      	ldr	r0, [pc, #404]	; (800b014 <MTP_DecodeEvent+0x2a4>)
 800ae80:	f007 fe8c 	bl	8012b9c <iprintf>
 800ae84:	200a      	movs	r0, #10
 800ae86:	f007 fea1 	bl	8012bcc <putchar>
      break;
 800ae8a:	e0af      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_StoreRemoved:
      USBH_DbgLog("EVT: PTP_EC_StoreRemoved in session %u", MTP_Handle->ptp.session_id);
 800ae8c:	485c      	ldr	r0, [pc, #368]	; (800b000 <MTP_DecodeEvent+0x290>)
 800ae8e:	f007 fe85 	bl	8012b9c <iprintf>
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ae98:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	485e      	ldr	r0, [pc, #376]	; (800b018 <MTP_DecodeEvent+0x2a8>)
 800aea0:	f007 fe7c 	bl	8012b9c <iprintf>
 800aea4:	200a      	movs	r0, #10
 800aea6:	f007 fe91 	bl	8012bcc <putchar>
      break;
 800aeaa:	e09f      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_DevicePropChanged:
      USBH_DbgLog("EVT: PTP_EC_DevicePropChanged in session %u", MTP_Handle->ptp.session_id);
 800aeac:	4854      	ldr	r0, [pc, #336]	; (800b000 <MTP_DecodeEvent+0x290>)
 800aeae:	f007 fe75 	bl	8012b9c <iprintf>
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aeb8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800aebc:	4619      	mov	r1, r3
 800aebe:	4857      	ldr	r0, [pc, #348]	; (800b01c <MTP_DecodeEvent+0x2ac>)
 800aec0:	f007 fe6c 	bl	8012b9c <iprintf>
 800aec4:	200a      	movs	r0, #10
 800aec6:	f007 fe81 	bl	8012bcc <putchar>
      break;
 800aeca:	e08f      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_ObjectInfoChanged:
      USBH_DbgLog("EVT: PTP_EC_ObjectInfoChanged in session %u", MTP_Handle->ptp.session_id);
 800aecc:	484c      	ldr	r0, [pc, #304]	; (800b000 <MTP_DecodeEvent+0x290>)
 800aece:	f007 fe65 	bl	8012b9c <iprintf>
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aed8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800aedc:	4619      	mov	r1, r3
 800aede:	4850      	ldr	r0, [pc, #320]	; (800b020 <MTP_DecodeEvent+0x2b0>)
 800aee0:	f007 fe5c 	bl	8012b9c <iprintf>
 800aee4:	200a      	movs	r0, #10
 800aee6:	f007 fe71 	bl	8012bcc <putchar>
      break;
 800aeea:	e07f      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_DeviceInfoChanged:
      USBH_DbgLog("EVT: PTP_EC_DeviceInfoChanged in session %u", MTP_Handle->ptp.session_id);
 800aeec:	4844      	ldr	r0, [pc, #272]	; (800b000 <MTP_DecodeEvent+0x290>)
 800aeee:	f007 fe55 	bl	8012b9c <iprintf>
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aef8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800aefc:	4619      	mov	r1, r3
 800aefe:	4849      	ldr	r0, [pc, #292]	; (800b024 <MTP_DecodeEvent+0x2b4>)
 800af00:	f007 fe4c 	bl	8012b9c <iprintf>
 800af04:	200a      	movs	r0, #10
 800af06:	f007 fe61 	bl	8012bcc <putchar>
      break;
 800af0a:	e06f      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_RequestObjectTransfer:
      USBH_DbgLog("EVT: PTP_EC_RequestObjectTransfer in session %u", MTP_Handle->ptp.session_id);
 800af0c:	483c      	ldr	r0, [pc, #240]	; (800b000 <MTP_DecodeEvent+0x290>)
 800af0e:	f007 fe45 	bl	8012b9c <iprintf>
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af18:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800af1c:	4619      	mov	r1, r3
 800af1e:	4842      	ldr	r0, [pc, #264]	; (800b028 <MTP_DecodeEvent+0x2b8>)
 800af20:	f007 fe3c 	bl	8012b9c <iprintf>
 800af24:	200a      	movs	r0, #10
 800af26:	f007 fe51 	bl	8012bcc <putchar>
      break;
 800af2a:	e05f      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_StoreFull:
      USBH_DbgLog("EVT: PTP_EC_StoreFull in session %u", MTP_Handle->ptp.session_id);
 800af2c:	4834      	ldr	r0, [pc, #208]	; (800b000 <MTP_DecodeEvent+0x290>)
 800af2e:	f007 fe35 	bl	8012b9c <iprintf>
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af38:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800af3c:	4619      	mov	r1, r3
 800af3e:	483b      	ldr	r0, [pc, #236]	; (800b02c <MTP_DecodeEvent+0x2bc>)
 800af40:	f007 fe2c 	bl	8012b9c <iprintf>
 800af44:	200a      	movs	r0, #10
 800af46:	f007 fe41 	bl	8012bcc <putchar>
      break;
 800af4a:	e04f      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_DeviceReset:
      USBH_DbgLog("EVT: PTP_EC_DeviceReset in session %u", MTP_Handle->ptp.session_id);
 800af4c:	482c      	ldr	r0, [pc, #176]	; (800b000 <MTP_DecodeEvent+0x290>)
 800af4e:	f007 fe25 	bl	8012b9c <iprintf>
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af58:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800af5c:	4619      	mov	r1, r3
 800af5e:	4834      	ldr	r0, [pc, #208]	; (800b030 <MTP_DecodeEvent+0x2c0>)
 800af60:	f007 fe1c 	bl	8012b9c <iprintf>
 800af64:	200a      	movs	r0, #10
 800af66:	f007 fe31 	bl	8012bcc <putchar>
      break;
 800af6a:	e03f      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_StorageInfoChanged :
      USBH_DbgLog("EVT: PTP_EC_StorageInfoChanged in session %u", MTP_Handle->ptp.session_id);
 800af6c:	4824      	ldr	r0, [pc, #144]	; (800b000 <MTP_DecodeEvent+0x290>)
 800af6e:	f007 fe15 	bl	8012b9c <iprintf>
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af78:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800af7c:	4619      	mov	r1, r3
 800af7e:	482d      	ldr	r0, [pc, #180]	; (800b034 <MTP_DecodeEvent+0x2c4>)
 800af80:	f007 fe0c 	bl	8012b9c <iprintf>
 800af84:	200a      	movs	r0, #10
 800af86:	f007 fe21 	bl	8012bcc <putchar>
      break;
 800af8a:	e02f      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_CaptureComplete :
      USBH_DbgLog("EVT: PTP_EC_CaptureComplete in session %u", MTP_Handle->ptp.session_id);
 800af8c:	481c      	ldr	r0, [pc, #112]	; (800b000 <MTP_DecodeEvent+0x290>)
 800af8e:	f007 fe05 	bl	8012b9c <iprintf>
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af98:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800af9c:	4619      	mov	r1, r3
 800af9e:	4826      	ldr	r0, [pc, #152]	; (800b038 <MTP_DecodeEvent+0x2c8>)
 800afa0:	f007 fdfc 	bl	8012b9c <iprintf>
 800afa4:	200a      	movs	r0, #10
 800afa6:	f007 fe11 	bl	8012bcc <putchar>
      break;
 800afaa:	e01f      	b.n	800afec <MTP_DecodeEvent+0x27c>

    case PTP_EC_UnreportedStatus :
      USBH_DbgLog("EVT: PTP_EC_UnreportedStatus in session %u", MTP_Handle->ptp.session_id);
 800afac:	4814      	ldr	r0, [pc, #80]	; (800b000 <MTP_DecodeEvent+0x290>)
 800afae:	f007 fdf5 	bl	8012b9c <iprintf>
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800afb8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800afbc:	4619      	mov	r1, r3
 800afbe:	481f      	ldr	r0, [pc, #124]	; (800b03c <MTP_DecodeEvent+0x2cc>)
 800afc0:	f007 fdec 	bl	8012b9c <iprintf>
 800afc4:	200a      	movs	r0, #10
 800afc6:	f007 fe01 	bl	8012bcc <putchar>
      break;
 800afca:	e00f      	b.n	800afec <MTP_DecodeEvent+0x27c>

    default :
      USBH_DbgLog("Received unknown event in session %u", MTP_Handle->ptp.session_id);
 800afcc:	480c      	ldr	r0, [pc, #48]	; (800b000 <MTP_DecodeEvent+0x290>)
 800afce:	f007 fde5 	bl	8012b9c <iprintf>
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800afd8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800afdc:	4619      	mov	r1, r3
 800afde:	4818      	ldr	r0, [pc, #96]	; (800b040 <MTP_DecodeEvent+0x2d0>)
 800afe0:	f007 fddc 	bl	8012b9c <iprintf>
 800afe4:	200a      	movs	r0, #10
 800afe6:	f007 fdf1 	bl	8012bcc <putchar>
      break;
 800afea:	bf00      	nop
  }

  USBH_MTP_EventsCallback(phost, (uint32_t)code, param1);
 800afec:	8a7b      	ldrh	r3, [r7, #18]
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f826 	bl	800b044 <USBH_MTP_EventsCallback>
}
 800aff8:	bf00      	nop
 800affa:	3718      	adds	r7, #24
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	08013c60 	.word	0x08013c60
 800b004:	08013f08 	.word	0x08013f08
 800b008:	08013f2c 	.word	0x08013f2c
 800b00c:	08013f58 	.word	0x08013f58
 800b010:	08013f80 	.word	0x08013f80
 800b014:	08013fa8 	.word	0x08013fa8
 800b018:	08013fd0 	.word	0x08013fd0
 800b01c:	08013ff8 	.word	0x08013ff8
 800b020:	08014024 	.word	0x08014024
 800b024:	08014050 	.word	0x08014050
 800b028:	0801407c 	.word	0x0801407c
 800b02c:	080140ac 	.word	0x080140ac
 800b030:	080140d0 	.word	0x080140d0
 800b034:	080140f8 	.word	0x080140f8
 800b038:	08014128 	.word	0x08014128
 800b03c:	08014154 	.word	0x08014154
 800b040:	08014180 	.word	0x08014180

0800b044 <USBH_MTP_EventsCallback>:
  * @brief  The function informs that host has received an event
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_MTP_EventsCallback(USBH_HandleTypeDef *phost, uint32_t event, uint32_t param)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(event);
  UNUSED(param);
}
 800b050:	bf00      	nop
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	bc80      	pop	{r7}
 800b058:	4770      	bx	lr

0800b05a <USBH_PTP_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Init(USBH_HandleTypeDef *phost)
{
 800b05a:	b480      	push	{r7}
 800b05c:	b085      	sub	sp, #20
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b068:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b06c:	69db      	ldr	r3, [r3, #28]
 800b06e:	60fb      	str	r3, [r7, #12]

  /* Set state to idle to be ready for operations */
  MTP_Handle->ptp.state = PTP_IDLE;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b076:	2200      	movs	r2, #0
 800b078:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
  MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61

  return USBH_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	bc80      	pop	{r7}
 800b092:	4770      	bx	lr

0800b094 <USBH_PTP_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Process(USBH_HandleTypeDef *phost)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b090      	sub	sp, #64	; 0x40
 800b098:	af02      	add	r7, sp, #8
 800b09a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b09c:	2301      	movs	r3, #1
 800b09e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ae:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b0b2:	69db      	ldr	r3, [r3, #28]
 800b0b4:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef  ptp_container;
  uint32_t  len;

  switch (MTP_Handle->ptp.state)
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0bc:	f893 3d60 	ldrb.w	r3, [r3, #3424]	; 0xd60
 800b0c0:	2b09      	cmp	r3, #9
 800b0c2:	f200 826f 	bhi.w	800b5a4 <USBH_PTP_Process+0x510>
 800b0c6:	a201      	add	r2, pc, #4	; (adr r2, 800b0cc <USBH_PTP_Process+0x38>)
 800b0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0cc:	0800b5a5 	.word	0x0800b5a5
 800b0d0:	0800b0f5 	.word	0x0800b0f5
 800b0d4:	0800b12b 	.word	0x0800b12b
 800b0d8:	0800b1cf 	.word	0x0800b1cf
 800b0dc:	0800b205 	.word	0x0800b205
 800b0e0:	0800b35d 	.word	0x0800b35d
 800b0e4:	0800b38f 	.word	0x0800b38f
 800b0e8:	0800b507 	.word	0x0800b507
 800b0ec:	0800b52f 	.word	0x0800b52f
 800b0f0:	0800b597 	.word	0x0800b597
      /*Do Nothing */
      break;

    case PTP_OP_REQUEST_STATE:
      USBH_BulkSendData(phost,
                        (uint8_t *)(void *) & (MTP_Handle->ptp.op_container),
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f6:	f503 51eb 	add.w	r1, r3, #7520	; 0x1d60
 800b0fa:	3104      	adds	r1, #4
                        (uint16_t)MTP_Handle->ptp.op_container.length,
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b102:	f8d3 3d64 	ldr.w	r3, [r3, #3428]	; 0xd64
      USBH_BulkSendData(phost,
 800b106:	b29a      	uxth	r2, r3
 800b108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b10e:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800b112:	2001      	movs	r0, #1
 800b114:	9000      	str	r0, [sp, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f002 fd21 	bl	800db5e <USBH_BulkSendData>
                        MTP_Handle->DataOutPipe,
                        1U);
      MTP_Handle->ptp.state = PTP_OP_REQUEST_WAIT_STATE;
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b122:	2202      	movs	r2, #2
 800b124:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b128:	e245      	b.n	800b5b6 <USBH_PTP_Process+0x522>

    case PTP_OP_REQUEST_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b130:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800b134:	4619      	mov	r1, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f003 f8ba 	bl	800e2b0 <USBH_LL_GetURBState>
 800b13c:	4603      	mov	r3, r0
 800b13e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 800b142:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b146:	2b01      	cmp	r3, #1
 800b148:	d12a      	bne.n	800b1a0 <USBH_PTP_Process+0x10c>
      {
        if (MTP_Handle->ptp.flags == PTP_DP_NODATA)
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b150:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b154:	2b00      	cmp	r3, #0
 800b156:	d106      	bne.n	800b166 <USBH_PTP_Process+0xd2>
        {
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 800b158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b15e:	2207      	movs	r2, #7
 800b160:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
#endif
      }
      else
      {
      }
      break;
 800b164:	e220      	b.n	800b5a8 <USBH_PTP_Process+0x514>
        else  if (MTP_Handle->ptp.flags == PTP_DP_SENDDATA)
 800b166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b168:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b16c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b170:	2b01      	cmp	r3, #1
 800b172:	d106      	bne.n	800b182 <USBH_PTP_Process+0xee>
          MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 800b174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b17a:	2203      	movs	r2, #3
 800b17c:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b180:	e212      	b.n	800b5a8 <USBH_PTP_Process+0x514>
        else  if (MTP_Handle->ptp.flags == PTP_DP_GETDATA)
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b188:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	f040 820b 	bne.w	800b5a8 <USBH_PTP_Process+0x514>
          MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 800b192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b198:	2205      	movs	r2, #5
 800b19a:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b19e:	e203      	b.n	800b5a8 <USBH_PTP_Process+0x514>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b1a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d106      	bne.n	800b1b6 <USBH_PTP_Process+0x122>
        MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800b1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b1b4:	e1f8      	b.n	800b5a8 <USBH_PTP_Process+0x514>
      else if (URB_Status == USBH_URB_STALL)
 800b1b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b1ba:	2b05      	cmp	r3, #5
 800b1bc:	f040 81f4 	bne.w	800b5a8 <USBH_PTP_Process+0x514>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1c6:	2209      	movs	r2, #9
 800b1c8:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b1cc:	e1ec      	b.n	800b5a8 <USBH_PTP_Process+0x514>

    case PTP_DATA_OUT_PHASE_STATE:

      USBH_BulkSendData(phost,
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b1d4:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1de:	f8b3 2d32 	ldrh.w	r2, [r3, #3378]	; 0xd32
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1e8:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	9000      	str	r0, [sp, #0]
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f002 fcb4 	bl	800db5e <USBH_BulkSendData>
                        MTP_Handle->DataOutEpSize,
                        MTP_Handle->DataOutPipe,
                        1U);


      MTP_Handle->ptp.state  = PTP_DATA_OUT_PHASE_WAIT_STATE;
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1fc:	2204      	movs	r2, #4
 800b1fe:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b202:	e1d8      	b.n	800b5b6 <USBH_PTP_Process+0x522>

    case PTP_DATA_OUT_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 800b204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b20a:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f003 f84d 	bl	800e2b0 <USBH_LL_GetURBState>
 800b216:	4603      	mov	r3, r0
 800b218:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 800b21c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b220:	2b01      	cmp	r3, #1
 800b222:	f040 8084 	bne.w	800b32e <USBH_PTP_Process+0x29a>
      {
        /* Adjust Data pointer and data length */
        if (MTP_Handle->ptp.data_length > MTP_Handle->DataOutEpSize)
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b22c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800b230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b232:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b236:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d94d      	bls.n	800b2da <USBH_PTP_Process+0x246>
        {
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 800b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b240:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b244:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b24a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b24e:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 800b252:	4413      	add	r3, r2
 800b254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b256:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b25a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
          MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize;
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b264:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800b268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b26a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b26e:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 800b272:	1a9b      	subs	r3, r3, r2
 800b274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b276:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b27a:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 800b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b280:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b284:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800b288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b28a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b28e:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 800b292:	4413      	add	r3, r2
 800b294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b296:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b29a:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800b29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b2a4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800b2a8:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800b2ac:	d31c      	bcc.n	800b2e8 <USBH_PTP_Process+0x254>
          {
            PTP_BufferFullCallback(phost);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 fa32 	bl	800b718 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
            MTP_Handle->ptp.iteration++;
 800b2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b2c8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2d0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b2d4:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
 800b2d8:	e006      	b.n	800b2e8 <USBH_PTP_Process+0x254>
          }
        }
        else
        {
          MTP_Handle->ptp.data_length = 0U;
 800b2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
        }

        /* More Data To be Sent */
        if (MTP_Handle->ptp.data_length > 0U)
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b2ee:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d014      	beq.n	800b320 <USBH_PTP_Process+0x28c>
        {
          USBH_BulkSendData(phost,
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b2fc:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 800b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b306:	f8b3 2d32 	ldrh.w	r2, [r3, #3378]	; 0xd32
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b310:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800b314:	2001      	movs	r0, #1
 800b316:	9000      	str	r0, [sp, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f002 fc20 	bl	800db5e <USBH_BulkSendData>
      }
      else
      {
        /* .. */
      }
      break;
 800b31e:	e145      	b.n	800b5ac <USBH_PTP_Process+0x518>
          MTP_Handle->ptp.state  = PTP_RESPONSE_STATE;
 800b320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b326:	2207      	movs	r2, #7
 800b328:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b32c:	e13e      	b.n	800b5ac <USBH_PTP_Process+0x518>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b32e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b332:	2b02      	cmp	r3, #2
 800b334:	d106      	bne.n	800b344 <USBH_PTP_Process+0x2b0>
        MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 800b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b33c:	2203      	movs	r2, #3
 800b33e:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b342:	e133      	b.n	800b5ac <USBH_PTP_Process+0x518>
      else if (URB_Status == USBH_URB_STALL)
 800b344:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b348:	2b05      	cmp	r3, #5
 800b34a:	f040 812f 	bne.w	800b5ac <USBH_PTP_Process+0x518>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b354:	2209      	movs	r2, #9
 800b356:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b35a:	e127      	b.n	800b5ac <USBH_PTP_Process+0x518>

    case PTP_DATA_IN_PHASE_STATE:
      /* Send first packet */
      USBH_BulkReceiveData(phost,
 800b35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b362:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 800b366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b36c:	f8b3 2d34 	ldrh.w	r2, [r3, #3380]	; 0xd34
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b376:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f002 fc14 	bl	800dba8 <USBH_BulkReceiveData>
                           MTP_Handle->ptp.data_ptr,
                           MTP_Handle->DataInEpSize,
                           MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_DATA_IN_PHASE_WAIT_STATE;
 800b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b386:	2206      	movs	r2, #6
 800b388:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b38c:	e113      	b.n	800b5b6 <USBH_PTP_Process+0x522>

    case PTP_DATA_IN_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b394:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800b398:	4619      	mov	r1, r3
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f002 ff88 	bl	800e2b0 <USBH_LL_GetURBState>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 800b3a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	f040 80a0 	bne.w	800b4f0 <USBH_PTP_Process+0x45c>
      {
        len = USBH_LL_GetLastXferSize(phost, MTP_Handle->DataInPipe);
 800b3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3b6:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f002 fedd 	bl	800e17c <USBH_LL_GetLastXferSize>
 800b3c2:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (MTP_Handle->ptp.data_packet_counter++ == 0U)
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b3ca:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800b3ce:	1c5a      	adds	r2, r3, #1
 800b3d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3d2:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800b3d6:	f8c1 21c0 	str.w	r2, [r1, #448]	; 0x1c0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d111      	bne.n	800b402 <USBH_PTP_Process+0x36e>
        {
          /* This is the first packet; so retrieve exact data length from payload */
          MTP_Handle->ptp.data_length = *(uint32_t *)(void *)(MTP_Handle->ptp.data_ptr);
 800b3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b3e4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ec:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b3f0:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.iteration = 0U;
 800b3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
        }

        if ((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0U))
 800b402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b408:	f8b3 3d34 	ldrh.w	r3, [r3, #3380]	; 0xd34
 800b40c:	461a      	mov	r2, r3
 800b40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b410:	4293      	cmp	r3, r2
 800b412:	d35a      	bcc.n	800b4ca <USBH_PTP_Process+0x436>
 800b414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b416:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b41a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d053      	beq.n	800b4ca <USBH_PTP_Process+0x436>
        {
          MTP_Handle->ptp.data_ptr += len;
 800b422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b424:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b428:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 800b42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42e:	4413      	add	r3, r2
 800b430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b432:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b436:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
          MTP_Handle->ptp.data_length -= len;
 800b43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b440:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
 800b444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b44a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b44e:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.data_packet += len;
 800b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b454:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b458:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 800b45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45e:	4413      	add	r3, r2
 800b460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b462:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b466:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800b46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b470:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800b474:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800b478:	d314      	bcc.n	800b4a4 <USBH_PTP_Process+0x410>
          {
            PTP_BufferFullCallback(phost);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f94c 	bl	800b718 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 800b480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b482:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b486:	461a      	mov	r2, r3
 800b488:	2300      	movs	r3, #0
 800b48a:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
            MTP_Handle->ptp.iteration++;
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b494:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b498:	3301      	adds	r3, #1
 800b49a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b49c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b4a0:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
          }

          /* Continue receiving data*/
          USBH_BulkReceiveData(phost,
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b4aa:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4b4:	f8b3 2d34 	ldrh.w	r2, [r3, #3380]	; 0xd34
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4be:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f002 fb70 	bl	800dba8 <USBH_BulkReceiveData>
      }
      else
      {
        /* .. */
      }
      break;
 800b4c8:	e072      	b.n	800b5b0 <USBH_PTP_Process+0x51c>
          MTP_Handle->ptp.data_length -= len;
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b4d0:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
 800b4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4da:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b4de:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4e8:	2207      	movs	r2, #7
 800b4ea:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b4ee:	e05f      	b.n	800b5b0 <USBH_PTP_Process+0x51c>
      else if (URB_Status == USBH_URB_STALL)
 800b4f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b4f4:	2b05      	cmp	r3, #5
 800b4f6:	d15b      	bne.n	800b5b0 <USBH_PTP_Process+0x51c>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4fe:	2209      	movs	r2, #9
 800b500:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b504:	e054      	b.n	800b5b0 <USBH_PTP_Process+0x51c>

    case PTP_RESPONSE_STATE:
      USBH_BulkReceiveData(phost,
                           (uint8_t *)(void *) & (MTP_Handle->ptp.resp_container),
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	f503 5106 	add.w	r1, r3, #8576	; 0x2180
 800b50c:	3104      	adds	r1, #4
      USBH_BulkReceiveData(phost,
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b514:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800b518:	223f      	movs	r2, #63	; 0x3f
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f002 fb44 	bl	800dba8 <USBH_BulkReceiveData>
                           PTP_USB_BULK_REQ_RESP_MAX_LEN,
                           MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_RESPONSE_WAIT_STATE;
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b526:	2208      	movs	r2, #8
 800b528:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b52c:	e043      	b.n	800b5b6 <USBH_PTP_Process+0x522>

    case PTP_RESPONSE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b534:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 800b538:	4619      	mov	r1, r3
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f002 feb8 	bl	800e2b0 <USBH_LL_GetURBState>
 800b540:	4603      	mov	r3, r0
 800b542:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 800b546:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d118      	bne.n	800b580 <USBH_PTP_Process+0x4ec>
      {
        USBH_PTP_GetResponse(phost, &ptp_container);
 800b54e:	f107 0308 	add.w	r3, r7, #8
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f892 	bl	800b67e <USBH_PTP_GetResponse>

        if (ptp_container.Code == PTP_RC_OK)
 800b55a:	893b      	ldrh	r3, [r7, #8]
 800b55c:	f242 0201 	movw	r2, #8193	; 0x2001
 800b560:	4293      	cmp	r3, r2
 800b562:	d103      	bne.n	800b56c <USBH_PTP_Process+0x4d8>
        {
          status = USBH_OK;
 800b564:	2300      	movs	r3, #0
 800b566:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b56a:	e002      	b.n	800b572 <USBH_PTP_Process+0x4de>
        }
        else
        {
          status = USBH_FAIL;
 800b56c:	2302      	movs	r3, #2
 800b56e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800b572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b578:	2201      	movs	r2, #1
 800b57a:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      }
      else
      {
        /* .. */
      }
      break;
 800b57e:	e019      	b.n	800b5b4 <USBH_PTP_Process+0x520>
      else if (URB_Status == USBH_URB_STALL)
 800b580:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b584:	2b05      	cmp	r3, #5
 800b586:	d115      	bne.n	800b5b4 <USBH_PTP_Process+0x520>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800b588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b58e:	2209      	movs	r2, #9
 800b590:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 800b594:	e00e      	b.n	800b5b4 <USBH_PTP_Process+0x520>

    case PTP_ERROR:
      MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b59c:	2201      	movs	r2, #1
 800b59e:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      break;
 800b5a2:	e008      	b.n	800b5b6 <USBH_PTP_Process+0x522>

    default:
      break;
 800b5a4:	bf00      	nop
 800b5a6:	e006      	b.n	800b5b6 <USBH_PTP_Process+0x522>
      break;
 800b5a8:	bf00      	nop
 800b5aa:	e004      	b.n	800b5b6 <USBH_PTP_Process+0x522>
      break;
 800b5ac:	bf00      	nop
 800b5ae:	e002      	b.n	800b5b6 <USBH_PTP_Process+0x522>
      break;
 800b5b0:	bf00      	nop
 800b5b2:	e000      	b.n	800b5b6 <USBH_PTP_Process+0x522>
      break;
 800b5b4:	bf00      	nop
  }
  return status;
 800b5b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3738      	adds	r7, #56	; 0x38
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop

0800b5c4 <USBH_PTP_SendRequest>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_SendRequest(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *req)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5d8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b5dc:	69db      	ldr	r3, [r3, #28]
 800b5de:	60bb      	str	r3, [r7, #8]

  /* Clear PTP Data container*/
  USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	2220      	movs	r2, #32
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f006 feef 	bl	80123d0 <memset>

  /* build appropriate USB container */
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN - (sizeof(uint32_t) * (5U - req->Nparam));
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b5f8:	3303      	adds	r3, #3
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b602:	f8c2 3d64 	str.w	r3, [r2, #3428]	; 0xd64
  MTP_Handle->ptp.op_container.type = PTP_USB_CONTAINER_COMMAND;
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b60c:	2201      	movs	r2, #1
 800b60e:	f8a3 2d68 	strh.w	r2, [r3, #3432]	; 0xd68
  MTP_Handle->ptp.op_container.code = req->Code;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	881a      	ldrh	r2, [r3, #0]
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b61c:	f8a3 2d6a 	strh.w	r2, [r3, #3434]	; 0xd6a
  MTP_Handle->ptp.op_container.trans_id = req->Transaction_ID;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b62a:	f8c2 3d6c 	str.w	r3, [r2, #3436]	; 0xd6c
  MTP_Handle->ptp.op_container.param1 = req->Param1;
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b638:	f8c2 3d70 	str.w	r3, [r2, #3440]	; 0xd70
  MTP_Handle->ptp.op_container.param2 = req->Param2;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b646:	f8c2 3d74 	str.w	r3, [r2, #3444]	; 0xd74
  MTP_Handle->ptp.op_container.param3 = req->Param3;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b654:	f8c2 3d78 	str.w	r3, [r2, #3448]	; 0xd78
  MTP_Handle->ptp.op_container.param4 = req->Param4;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b662:	f8c2 3d7c 	str.w	r3, [r2, #3452]	; 0xd7c
  MTP_Handle->ptp.op_container.param5 = req->Param5;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	69db      	ldr	r3, [r3, #28]
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b670:	f8c2 3d80 	str.w	r3, [r2, #3456]	; 0xd80

  return status;
 800b674:	7bfb      	ldrb	r3, [r7, #15]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <USBH_PTP_GetResponse>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetResponse(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *resp)
{
 800b67e:	b480      	push	{r7}
 800b680:	b085      	sub	sp, #20
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef  *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b692:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b696:	69db      	ldr	r3, [r3, #28]
 800b698:	60bb      	str	r3, [r7, #8]

  /* build an appropriate PTPContainer */
  resp->Code = MTP_Handle->ptp.resp_container.code;
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b6a0:	f8b3 218a 	ldrh.w	r2, [r3, #394]	; 0x18a
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	801a      	strh	r2, [r3, #0]
  resp->SessionID = MTP_Handle->ptp.session_id;
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b6ae:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	605a      	str	r2, [r3, #4]
  resp->Transaction_ID = MTP_Handle->ptp.resp_container.trans_id;
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b6bc:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	609a      	str	r2, [r3, #8]
  resp->Param1 = MTP_Handle->ptp.resp_container.param1;
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b6ca:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	60da      	str	r2, [r3, #12]
  resp->Param2 = MTP_Handle->ptp.resp_container.param2;
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b6d8:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	611a      	str	r2, [r3, #16]
  resp->Param3 = MTP_Handle->ptp.resp_container.param3;
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b6e6:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	615a      	str	r2, [r3, #20]
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b6f4:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	619a      	str	r2, [r3, #24]
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b702:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	61da      	str	r2, [r3, #28]

  return status;
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3714      	adds	r7, #20
 800b710:	46bd      	mov	sp, r7
 800b712:	bc80      	pop	{r7}
 800b714:	4770      	bx	lr
	...

0800b718 <PTP_BufferFullCallback>:
  * @brief  The function informs user that data buffer is full
  *  @param  phost: host handle
  * @retval None
  */
static void PTP_BufferFullCallback(USBH_HandleTypeDef *phost)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b726:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b72a:	69db      	ldr	r3, [r3, #28]
 800b72c:	60fb      	str	r3, [r7, #12]

  switch (MTP_Handle->ptp.data_container.code)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b734:	f8b3 3d8a 	ldrh.w	r3, [r3, #3466]	; 0xd8a
 800b738:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800b73c:	3b01      	subs	r3, #1
 800b73e:	2b1a      	cmp	r3, #26
 800b740:	d874      	bhi.n	800b82c <PTP_BufferFullCallback+0x114>
 800b742:	a201      	add	r2, pc, #4	; (adr r2, 800b748 <PTP_BufferFullCallback+0x30>)
 800b744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b748:	0800b7b5 	.word	0x0800b7b5
 800b74c:	0800b82d 	.word	0x0800b82d
 800b750:	0800b82d 	.word	0x0800b82d
 800b754:	0800b82d 	.word	0x0800b82d
 800b758:	0800b82d 	.word	0x0800b82d
 800b75c:	0800b82d 	.word	0x0800b82d
 800b760:	0800b82d 	.word	0x0800b82d
 800b764:	0800b82d 	.word	0x0800b82d
 800b768:	0800b7c1 	.word	0x0800b7c1
 800b76c:	0800b82d 	.word	0x0800b82d
 800b770:	0800b82d 	.word	0x0800b82d
 800b774:	0800b82d 	.word	0x0800b82d
 800b778:	0800b805 	.word	0x0800b805
 800b77c:	0800b82d 	.word	0x0800b82d
 800b780:	0800b82d 	.word	0x0800b82d
 800b784:	0800b82d 	.word	0x0800b82d
 800b788:	0800b82d 	.word	0x0800b82d
 800b78c:	0800b82d 	.word	0x0800b82d
 800b790:	0800b82d 	.word	0x0800b82d
 800b794:	0800b82d 	.word	0x0800b82d
 800b798:	0800b82d 	.word	0x0800b82d
 800b79c:	0800b82d 	.word	0x0800b82d
 800b7a0:	0800b82d 	.word	0x0800b82d
 800b7a4:	0800b82d 	.word	0x0800b82d
 800b7a8:	0800b82d 	.word	0x0800b82d
 800b7ac:	0800b82d 	.word	0x0800b82d
 800b7b0:	0800b7c1 	.word	0x0800b7c1
  {
    case PTP_OC_GetDeviceInfo:
      PTP_DecodeDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 f841 	bl	800b840 <PTP_DecodeDeviceInfo>
      break;
 800b7be:	e03a      	b.n	800b836 <PTP_BufferFullCallback+0x11e>

    case PTP_OC_GetPartialObject:
    case PTP_OC_GetObject:

      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b7c6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d130      	bne.n	800b830 <PTP_BufferFullCallback+0x118>
      {
        /* copy it to object */
        USBH_memcpy(MTP_Handle->ptp.object_ptr, MTP_Handle->ptp.data_container.payload.data, PTP_USB_BULK_PAYLOAD_LEN_READ);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b7d4:	f8d3 01c4 	ldr.w	r0, [r3, #452]	; 0x1c4
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800b7de:	3310      	adds	r3, #16
 800b7e0:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	f006 fde5 	bl	80123b4 <memcpy>

        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b7f0:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800b7f4:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b7fe:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      }
      break;
 800b802:	e015      	b.n	800b830 <PTP_BufferFullCallback+0x118>

    case PTP_OC_SendObject:
      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b80a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d110      	bne.n	800b834 <PTP_BufferFullCallback+0x11c>
      {
        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b818:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800b81c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b826:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      }
      break;
 800b82a:	e003      	b.n	800b834 <PTP_BufferFullCallback+0x11c>

    default:
      break;
 800b82c:	bf00      	nop
 800b82e:	e002      	b.n	800b836 <PTP_BufferFullCallback+0x11e>
      break;
 800b830:	bf00      	nop
 800b832:	e000      	b.n	800b836 <PTP_BufferFullCallback+0x11e>
      break;
 800b834:	bf00      	nop


  }
}
 800b836:	bf00      	nop
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop

0800b840 <PTP_DecodeDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval None
  */
static void PTP_DecodeDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b850:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b854:	69db      	ldr	r3, [r3, #28]
 800b856:	617b      	str	r3, [r7, #20]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800b85e:	3310      	adds	r3, #16
 800b860:	613b      	str	r3, [r7, #16]
  uint32_t totallen;
  uint16_t len;

  /* Max device info is PTP_USB_BULK_HS_MAX_PACKET_LEN_READ */
  USBH_DbgLog(" MTP device info size exceeds internal buffer size.\
 800b862:	4888      	ldr	r0, [pc, #544]	; (800ba84 <PTP_DecodeDeviceInfo+0x244>)
 800b864:	f007 f99a 	bl	8012b9c <iprintf>
 800b868:	4887      	ldr	r0, [pc, #540]	; (800ba88 <PTP_DecodeDeviceInfo+0x248>)
 800b86a:	f007 f997 	bl	8012b9c <iprintf>
 800b86e:	200a      	movs	r0, #10
 800b870:	f007 f9ac 	bl	8012bcc <putchar>
               only available data are decoded.");

  if (MTP_Handle->ptp.iteration == 0U)
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b87a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f040 80fc 	bne.w	800ba7c <PTP_DecodeDeviceInfo+0x23c>
  {
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	b29a      	uxth	r2, r3
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	3301      	adds	r3, #1
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	b29b      	uxth	r3, r3
 800b892:	021b      	lsls	r3, r3, #8
 800b894:	b29b      	uxth	r3, r3
 800b896:	4313      	orrs	r3, r2
 800b898:	b29a      	uxth	r2, r3
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	801a      	strh	r2, [r3, #0]
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	3302      	adds	r3, #2
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	3303      	adds	r3, #3
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	021b      	lsls	r3, r3, #8
 800b8ae:	431a      	orrs	r2, r3
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	041b      	lsls	r3, r3, #16
 800b8b8:	431a      	orrs	r2, r3
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	3305      	adds	r3, #5
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	061b      	lsls	r3, r3, #24
 800b8c2:	431a      	orrs	r2, r3
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	605a      	str	r2, [r3, #4]
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	3306      	adds	r3, #6
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	3307      	adds	r3, #7
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	021b      	lsls	r3, r3, #8
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	811a      	strh	r2, [r3, #8]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	f103 000a 	add.w	r0, r3, #10
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	3308      	adds	r3, #8
 800b8ee:	f107 020a 	add.w	r2, r7, #10
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	f000 faff 	bl	800bef6 <PTP_GetString>

    totallen = len * 2U + 1U;
 800b8f8:	897b      	ldrh	r3, [r7, #10]
 800b8fa:	005b      	lsls	r3, r3, #1
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	60fb      	str	r3, [r7, #12]
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode + totallen]);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	3308      	adds	r3, #8
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	4413      	add	r3, r2
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	b29a      	uxth	r2, r3
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	3309      	adds	r3, #9
 800b910:	6939      	ldr	r1, [r7, #16]
 800b912:	440b      	add	r3, r1
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	b29b      	uxth	r3, r3
 800b918:	021b      	lsls	r3, r3, #8
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	4313      	orrs	r3, r2
 800b91e:	b29a      	uxth	r2, r3
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	f503 7088 	add.w	r0, r3, #272	; 0x110
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	330a      	adds	r3, #10
 800b930:	461a      	mov	r2, r3
 800b932:	6939      	ldr	r1, [r7, #16]
 800b934:	f000 fb0d 	bl	800bf52 <PTP_GetArray16>
 800b938:	4602      	mov	r2, r0
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                       data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->OperationsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b946:	005a      	lsls	r2, r3, #1
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4413      	add	r3, r2
 800b94c:	3304      	adds	r3, #4
 800b94e:	60fb      	str	r3, [r7, #12]
    dev_info->EventsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->EventsSupported,
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	330a      	adds	r3, #10
 800b95a:	461a      	mov	r2, r3
 800b95c:	6939      	ldr	r1, [r7, #16]
 800b95e:	f000 faf8 	bl	800bf52 <PTP_GetArray16>
 800b962:	4602      	mov	r2, r0
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
                                                   data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->EventsSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800b970:	005a      	lsls	r2, r3, #1
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	4413      	add	r3, r2
 800b976:	3304      	adds	r3, #4
 800b978:	60fb      	str	r3, [r7, #12]
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->DevicePropertiesSupported,
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	330a      	adds	r3, #10
 800b984:	461a      	mov	r2, r3
 800b986:	6939      	ldr	r1, [r7, #16]
 800b988:	f000 fae3 	bl	800bf52 <PTP_GetArray16>
 800b98c:	4602      	mov	r2, r0
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
                                                             data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->DevicePropertiesSupported_len * sizeof(uint16_t) + sizeof(uint32_t);
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b99a:	005a      	lsls	r2, r3, #1
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	4413      	add	r3, r2
 800b9a0:	3304      	adds	r3, #4
 800b9a2:	60fb      	str	r3, [r7, #12]

    dev_info->CaptureFormats_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->CaptureFormats,
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	330a      	adds	r3, #10
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	6939      	ldr	r1, [r7, #16]
 800b9b2:	f000 face 	bl	800bf52 <PTP_GetArray16>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
                                                  data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->CaptureFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 800b9c4:	005a      	lsls	r2, r3, #1
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	60fb      	str	r3, [r7, #12]
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	f503 6088 	add.w	r0, r3, #1088	; 0x440
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	330a      	adds	r3, #10
 800b9d8:	461a      	mov	r2, r3
 800b9da:	6939      	ldr	r1, [r7, #16]
 800b9dc:	f000 fab9 	bl	800bf52 <PTP_GetArray16>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                                                 data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + dev_info->ImageFormats_len * sizeof(uint16_t) + sizeof(uint32_t);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 800b9ee:	005a      	lsls	r2, r3, #1
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	f503 60a1 	add.w	r0, r3, #1288	; 0x508
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	330a      	adds	r3, #10
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	4413      	add	r3, r2
 800ba06:	f107 020a 	add.w	r2, r7, #10
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	f000 fa73 	bl	800bef6 <PTP_GetString>

    totallen += len * 2U + 1U;
 800ba10:	897b      	ldrh	r3, [r7, #10]
 800ba12:	005a      	lsls	r2, r3, #1
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	4413      	add	r3, r2
 800ba18:	3301      	adds	r3, #1
 800ba1a:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported + totallen], &len);
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	f203 6007 	addw	r0, r3, #1543	; 0x607
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	330a      	adds	r3, #10
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	4413      	add	r3, r2
 800ba2a:	f107 020a 	add.w	r2, r7, #10
 800ba2e:	4619      	mov	r1, r3
 800ba30:	f000 fa61 	bl	800bef6 <PTP_GetString>

    totallen += len * 2U + 1U;
 800ba34:	897b      	ldrh	r3, [r7, #10]
 800ba36:	005a      	lsls	r2, r3, #1
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported + totallen], &len);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	f203 7006 	addw	r0, r3, #1798	; 0x706
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	330a      	adds	r3, #10
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f107 020a 	add.w	r2, r7, #10
 800ba52:	4619      	mov	r1, r3
 800ba54:	f000 fa4f 	bl	800bef6 <PTP_GetString>

    totallen += len * 2U + 1U;
 800ba58:	897b      	ldrh	r3, [r7, #10]
 800ba5a:	005a      	lsls	r2, r3, #1
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	4413      	add	r3, r2
 800ba60:	3301      	adds	r3, #1
 800ba62:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->SerialNumber, &data[PTP_di_OperationsSupported + totallen], &len);
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	f603 0005 	addw	r0, r3, #2053	; 0x805
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	330a      	adds	r3, #10
 800ba6e:	693a      	ldr	r2, [r7, #16]
 800ba70:	4413      	add	r3, r2
 800ba72:	f107 020a 	add.w	r2, r7, #10
 800ba76:	4619      	mov	r1, r3
 800ba78:	f000 fa3d 	bl	800bef6 <PTP_GetString>
  }
}
 800ba7c:	bf00      	nop
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	080141a8 	.word	0x080141a8
 800ba88:	080141b4 	.word	0x080141b4

0800ba8c <PTP_GetStorageIDs>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageIDs(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *stor_ids)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba9c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800baa0:	69db      	ldr	r3, [r3, #28]
 800baa2:	60fb      	str	r3, [r7, #12]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800baaa:	3310      	adds	r3, #16
 800baac:	60bb      	str	r3, [r7, #8]

  stor_ids->n = PTP_GetArray32(stor_ids->Storage, data, 0U);
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	3304      	adds	r3, #4
 800bab2:	2200      	movs	r2, #0
 800bab4:	68b9      	ldr	r1, [r7, #8]
 800bab6:	4618      	mov	r0, r3
 800bab8:	f000 fa8b 	bl	800bfd2 <PTP_GetArray32>
 800babc:	4602      	mov	r2, r0
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	601a      	str	r2, [r3, #0]
}
 800bac2:	bf00      	nop
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <PTP_GetStorageInfo>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageInfo(USBH_HandleTypeDef *phost, uint32_t storage_id, PTP_StorageInfoTypedef *stor_info)
{
 800baca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bace:	b0c2      	sub	sp, #264	; 0x108
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800bad6:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800bada:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
  /* Prevent unused argument(s) compilation warning */
  UNUSED(storage_id);

  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800bade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bae6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800baea:	69db      	ldr	r3, [r3, #28]
 800baec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800baf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf4:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800baf8:	3310      	adds	r3, #16
 800bafa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint16_t len;

  stor_info->StorageType = LE16(&data[PTP_si_StorageType]);
 800bafe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	021b      	lsls	r3, r3, #8
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	4313      	orrs	r3, r2
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800bb1c:	8013      	strh	r3, [r2, #0]
  stor_info->FilesystemType = LE16(&data[PTP_si_FilesystemType]);
 800bb1e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bb22:	3302      	adds	r3, #2
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bb2c:	3303      	adds	r3, #3
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	021b      	lsls	r3, r3, #8
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	4313      	orrs	r3, r2
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800bb3e:	8053      	strh	r3, [r2, #2]
  stor_info->AccessCapability = LE16(&data[PTP_si_AccessCapability]);
 800bb40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bb44:	3304      	adds	r3, #4
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bb4e:	3305      	adds	r3, #5
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	021b      	lsls	r3, r3, #8
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800bb60:	8093      	strh	r3, [r2, #4]
  stor_info->MaxCapability = LE64(&data[PTP_si_MaxCapability]);
 800bb62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bb66:	3306      	adds	r3, #6
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bb72:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800bb76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bb7a:	3307      	adds	r3, #7
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	2200      	movs	r2, #0
 800bb82:	461c      	mov	r4, r3
 800bb84:	4615      	mov	r5, r2
 800bb86:	f04f 0200 	mov.w	r2, #0
 800bb8a:	f04f 0300 	mov.w	r3, #0
 800bb8e:	022b      	lsls	r3, r5, #8
 800bb90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800bb94:	0222      	lsls	r2, r4, #8
 800bb96:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	ea44 0a02 	orr.w	sl, r4, r2
 800bba0:	ea41 0b03 	orr.w	fp, r1, r3
 800bba4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bba8:	3308      	adds	r3, #8
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bbb4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bbb8:	f04f 0200 	mov.w	r2, #0
 800bbbc:	f04f 0300 	mov.w	r3, #0
 800bbc0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	040b      	lsls	r3, r1, #16
 800bbc8:	4620      	mov	r0, r4
 800bbca:	4629      	mov	r1, r5
 800bbcc:	4604      	mov	r4, r0
 800bbce:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	040a      	lsls	r2, r1, #16
 800bbd6:	ea4a 0102 	orr.w	r1, sl, r2
 800bbda:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800bbde:	ea4b 0303 	orr.w	r3, fp, r3
 800bbe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bbe6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bbea:	3309      	adds	r3, #9
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbf6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800bbfa:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800bbfe:	461a      	mov	r2, r3
 800bc00:	ea4f 2912 	mov.w	r9, r2, lsr #8
 800bc04:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800bc08:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	ea42 0208 	orr.w	r2, r2, r8
 800bc12:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800bc16:	4623      	mov	r3, r4
 800bc18:	ea43 0309 	orr.w	r3, r3, r9
 800bc1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bc24:	330a      	adds	r3, #10
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bc34:	f04f 0200 	mov.w	r2, #0
 800bc38:	f04f 0300 	mov.w	r3, #0
 800bc3c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800bc40:	000b      	movs	r3, r1
 800bc42:	2200      	movs	r2, #0
 800bc44:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800bc48:	4604      	mov	r4, r0
 800bc4a:	4314      	orrs	r4, r2
 800bc4c:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800bc50:	4319      	orrs	r1, r3
 800bc52:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800bc56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bc5a:	330b      	adds	r3, #11
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	2200      	movs	r2, #0
 800bc62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bc66:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bc6a:	f04f 0200 	mov.w	r2, #0
 800bc6e:	f04f 0300 	mov.w	r3, #0
 800bc72:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800bc76:	020b      	lsls	r3, r1, #8
 800bc78:	2200      	movs	r2, #0
 800bc7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bc7e:	4604      	mov	r4, r0
 800bc80:	4314      	orrs	r4, r2
 800bc82:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800bc86:	4319      	orrs	r1, r3
 800bc88:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 800bc8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bc90:	330c      	adds	r3, #12
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	2200      	movs	r2, #0
 800bc98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc9c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800bca0:	f04f 0200 	mov.w	r2, #0
 800bca4:	f04f 0300 	mov.w	r3, #0
 800bca8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800bcac:	040b      	lsls	r3, r1, #16
 800bcae:	2200      	movs	r2, #0
 800bcb0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	4314      	orrs	r4, r2
 800bcb8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800bcbc:	4319      	orrs	r1, r3
 800bcbe:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800bcc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bcc6:	330d      	adds	r3, #13
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	2200      	movs	r2, #0
 800bcce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bcd2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bcd6:	f04f 0200 	mov.w	r2, #0
 800bcda:	f04f 0300 	mov.w	r3, #0
 800bcde:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800bce2:	060b      	lsls	r3, r1, #24
 800bce4:	2200      	movs	r2, #0
 800bce6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800bcea:	4604      	mov	r4, r0
 800bcec:	4314      	orrs	r4, r2
 800bcee:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800bcf2:	4319      	orrs	r1, r3
 800bcf4:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800bcf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bcfc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bd00:	e9c3 1202 	strd	r1, r2, [r3, #8]
  stor_info->FreeSpaceInBytes = LE64(&data[PTP_si_FreeSpaceInBytes]);
 800bd04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bd08:	330e      	adds	r3, #14
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	2200      	movs	r2, #0
 800bd10:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd12:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bd14:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bd18:	330f      	adds	r3, #15
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	2200      	movs	r2, #0
 800bd20:	673b      	str	r3, [r7, #112]	; 0x70
 800bd22:	677a      	str	r2, [r7, #116]	; 0x74
 800bd24:	f04f 0200 	mov.w	r2, #0
 800bd28:	f04f 0300 	mov.w	r3, #0
 800bd2c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800bd30:	4629      	mov	r1, r5
 800bd32:	020b      	lsls	r3, r1, #8
 800bd34:	4620      	mov	r0, r4
 800bd36:	4629      	mov	r1, r5
 800bd38:	4604      	mov	r4, r0
 800bd3a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800bd3e:	4601      	mov	r1, r0
 800bd40:	020a      	lsls	r2, r1, #8
 800bd42:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800bd46:	4604      	mov	r4, r0
 800bd48:	4314      	orrs	r4, r2
 800bd4a:	66bc      	str	r4, [r7, #104]	; 0x68
 800bd4c:	4319      	orrs	r1, r3
 800bd4e:	66f9      	str	r1, [r7, #108]	; 0x6c
 800bd50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bd54:	3310      	adds	r3, #16
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	663b      	str	r3, [r7, #96]	; 0x60
 800bd5e:	667a      	str	r2, [r7, #100]	; 0x64
 800bd60:	f04f 0200 	mov.w	r2, #0
 800bd64:	f04f 0300 	mov.w	r3, #0
 800bd68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	040b      	lsls	r3, r1, #16
 800bd70:	4620      	mov	r0, r4
 800bd72:	4629      	mov	r1, r5
 800bd74:	4604      	mov	r4, r0
 800bd76:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800bd7a:	4601      	mov	r1, r0
 800bd7c:	040a      	lsls	r2, r1, #16
 800bd7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bd82:	4604      	mov	r4, r0
 800bd84:	4314      	orrs	r4, r2
 800bd86:	65bc      	str	r4, [r7, #88]	; 0x58
 800bd88:	4319      	orrs	r1, r3
 800bd8a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800bd8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bd90:	3311      	adds	r3, #17
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2200      	movs	r2, #0
 800bd98:	653b      	str	r3, [r7, #80]	; 0x50
 800bd9a:	657a      	str	r2, [r7, #84]	; 0x54
 800bd9c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bda0:	460b      	mov	r3, r1
 800bda2:	0a1b      	lsrs	r3, r3, #8
 800bda4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bda6:	460b      	mov	r3, r1
 800bda8:	061b      	lsls	r3, r3, #24
 800bdaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdac:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	4328      	orrs	r0, r5
 800bdba:	6438      	str	r0, [r7, #64]	; 0x40
 800bdbc:	4623      	mov	r3, r4
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	647b      	str	r3, [r7, #68]	; 0x44
 800bdc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bdc6:	3312      	adds	r3, #18
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	2200      	movs	r2, #0
 800bdce:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bdd2:	f04f 0200 	mov.w	r2, #0
 800bdd6:	f04f 0300 	mov.w	r3, #0
 800bdda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bddc:	000b      	movs	r3, r1
 800bdde:	2200      	movs	r2, #0
 800bde0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800bde4:	4604      	mov	r4, r0
 800bde6:	4314      	orrs	r4, r2
 800bde8:	633c      	str	r4, [r7, #48]	; 0x30
 800bdea:	4319      	orrs	r1, r3
 800bdec:	6379      	str	r1, [r7, #52]	; 0x34
 800bdee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bdf2:	3313      	adds	r3, #19
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdfe:	f04f 0200 	mov.w	r2, #0
 800be02:	f04f 0300 	mov.w	r3, #0
 800be06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be08:	020b      	lsls	r3, r1, #8
 800be0a:	2200      	movs	r2, #0
 800be0c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800be10:	4604      	mov	r4, r0
 800be12:	4314      	orrs	r4, r2
 800be14:	623c      	str	r4, [r7, #32]
 800be16:	4319      	orrs	r1, r3
 800be18:	6279      	str	r1, [r7, #36]	; 0x24
 800be1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be1e:	3314      	adds	r3, #20
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2200      	movs	r2, #0
 800be26:	61bb      	str	r3, [r7, #24]
 800be28:	61fa      	str	r2, [r7, #28]
 800be2a:	f04f 0200 	mov.w	r2, #0
 800be2e:	f04f 0300 	mov.w	r3, #0
 800be32:	69b9      	ldr	r1, [r7, #24]
 800be34:	040b      	lsls	r3, r1, #16
 800be36:	2200      	movs	r2, #0
 800be38:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800be3c:	4604      	mov	r4, r0
 800be3e:	4314      	orrs	r4, r2
 800be40:	613c      	str	r4, [r7, #16]
 800be42:	4319      	orrs	r1, r3
 800be44:	6179      	str	r1, [r7, #20]
 800be46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be4a:	3315      	adds	r3, #21
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	2200      	movs	r2, #0
 800be52:	60bb      	str	r3, [r7, #8]
 800be54:	60fa      	str	r2, [r7, #12]
 800be56:	f04f 0200 	mov.w	r2, #0
 800be5a:	f04f 0300 	mov.w	r3, #0
 800be5e:	68b9      	ldr	r1, [r7, #8]
 800be60:	060b      	lsls	r3, r1, #24
 800be62:	2200      	movs	r2, #0
 800be64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800be68:	4604      	mov	r4, r0
 800be6a:	4314      	orrs	r4, r2
 800be6c:	603c      	str	r4, [r7, #0]
 800be6e:	4319      	orrs	r1, r3
 800be70:	6079      	str	r1, [r7, #4]
 800be72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800be76:	e9d7 1200 	ldrd	r1, r2, [r7]
 800be7a:	e9c3 1204 	strd	r1, r2, [r3, #16]
  stor_info->FreeSpaceInImages = LE32(&data[PTP_si_FreeSpaceInImages]);
 800be7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be82:	3316      	adds	r3, #22
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	461a      	mov	r2, r3
 800be88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be8c:	3317      	adds	r3, #23
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	021b      	lsls	r3, r3, #8
 800be92:	431a      	orrs	r2, r3
 800be94:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be98:	3318      	adds	r3, #24
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	041b      	lsls	r3, r3, #16
 800be9e:	431a      	orrs	r2, r3
 800bea0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bea4:	3319      	adds	r3, #25
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	061b      	lsls	r3, r3, #24
 800beaa:	431a      	orrs	r2, r3
 800beac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800beb0:	619a      	str	r2, [r3, #24]

  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 800beb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800beb6:	f103 001c 	add.w	r0, r3, #28
 800beba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bebe:	331a      	adds	r3, #26
 800bec0:	f107 02fe 	add.w	r2, r7, #254	; 0xfe
 800bec4:	4619      	mov	r1, r3
 800bec6:	f000 f816 	bl	800bef6 <PTP_GetString>
  PTP_GetString(stor_info->VolumeLabel, &data[PTP_si_StorageDescription + len * 2U + 1U], &len);
 800beca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bece:	f203 101b 	addw	r0, r3, #283	; 0x11b
 800bed2:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	331b      	adds	r3, #27
 800beda:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800bede:	4413      	add	r3, r2
 800bee0:	f107 02fe 	add.w	r2, r7, #254	; 0xfe
 800bee4:	4619      	mov	r1, r3
 800bee6:	f000 f806 	bl	800bef6 <PTP_GetString>
}
 800beea:	bf00      	nop
 800beec:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bef0:	46bd      	mov	sp, r7
 800bef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bef6 <PTP_GetString>:
  * @param  str: ascii string
  * @param  data: Device info structure
  * @retval None
  */
static void PTP_GetString(uint8_t *str, uint8_t *data, uint16_t *len)
{
 800bef6:	b480      	push	{r7}
 800bef8:	b087      	sub	sp, #28
 800befa:	af00      	add	r7, sp, #0
 800befc:	60f8      	str	r0, [r7, #12]
 800befe:	60b9      	str	r1, [r7, #8]
 800bf00:	607a      	str	r2, [r7, #4]
  uint16_t strlength;
  uint16_t idx;

  *len = data[0];
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	801a      	strh	r2, [r3, #0]
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	82bb      	strh	r3, [r7, #20]
  data ++; /* Adjust the offset ignoring the String Len */
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	60bb      	str	r3, [r7, #8]

  for (idx = 0U; idx < strlength; idx += 2U)
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	82fb      	strh	r3, [r7, #22]
 800bf20:	e00b      	b.n	800bf3a <PTP_GetString+0x44>
  {
    /* Copy Only the string and ignore the UNICODE ID, hence add the src */
    *str = data[idx];
 800bf22:	8afb      	ldrh	r3, [r7, #22]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	4413      	add	r3, r2
 800bf28:	781a      	ldrb	r2, [r3, #0]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	701a      	strb	r2, [r3, #0]
    str++;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	3301      	adds	r3, #1
 800bf32:	60fb      	str	r3, [r7, #12]
  for (idx = 0U; idx < strlength; idx += 2U)
 800bf34:	8afb      	ldrh	r3, [r7, #22]
 800bf36:	3302      	adds	r3, #2
 800bf38:	82fb      	strh	r3, [r7, #22]
 800bf3a:	8afa      	ldrh	r2, [r7, #22]
 800bf3c:	8abb      	ldrh	r3, [r7, #20]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d3ef      	bcc.n	800bf22 <PTP_GetString+0x2c>
  }
  *str = 0U; /* mark end of string */
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	701a      	strb	r2, [r3, #0]
}
 800bf48:	bf00      	nop
 800bf4a:	371c      	adds	r7, #28
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bc80      	pop	{r7}
 800bf50:	4770      	bx	lr

0800bf52 <PTP_GetArray16>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray16(uint16_t *array, uint8_t *data, uint32_t offset)
{
 800bf52:	b480      	push	{r7}
 800bf54:	b087      	sub	sp, #28
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	60f8      	str	r0, [r7, #12]
 800bf5a:	60b9      	str	r1, [r7, #8]
 800bf5c:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 800bf62:	68ba      	ldr	r2, [r7, #8]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4413      	add	r3, r2
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	4413      	add	r3, r2
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	021b      	lsls	r3, r3, #8
 800bf78:	ea41 0203 	orr.w	r2, r1, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3302      	adds	r3, #2
 800bf80:	68b9      	ldr	r1, [r7, #8]
 800bf82:	440b      	add	r3, r1
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	041b      	lsls	r3, r3, #16
 800bf88:	431a      	orrs	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	3303      	adds	r3, #3
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	440b      	add	r3, r1
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	061b      	lsls	r3, r3, #24
 800bf96:	4313      	orrs	r3, r2
 800bf98:	613b      	str	r3, [r7, #16]
  while (size > idx)
 800bf9a:	e010      	b.n	800bfbe <PTP_GetArray16+0x6c>
  {
    array[idx] = (uint16_t)data[offset + (sizeof(uint16_t) * (idx + 2U))];
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	3302      	adds	r3, #2
 800bfa0:	005a      	lsls	r2, r3, #1
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	7819      	ldrb	r1, [r3, #0]
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	005b      	lsls	r3, r3, #1
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	b28a      	uxth	r2, r1
 800bfb6:	801a      	strh	r2, [r3, #0]
    idx++;
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	617b      	str	r3, [r7, #20]
  while (size > idx)
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d8ea      	bhi.n	800bf9c <PTP_GetArray16+0x4a>
  }
  return size;
 800bfc6:	693b      	ldr	r3, [r7, #16]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	371c      	adds	r7, #28
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bc80      	pop	{r7}
 800bfd0:	4770      	bx	lr

0800bfd2 <PTP_GetArray32>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray32(uint32_t *array, uint8_t *data, uint32_t offset)
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b087      	sub	sp, #28
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	60f8      	str	r0, [r7, #12]
 800bfda:	60b9      	str	r1, [r7, #8]
 800bfdc:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	4619      	mov	r1, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3301      	adds	r3, #1
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	4413      	add	r3, r2
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	021b      	lsls	r3, r3, #8
 800bff8:	ea41 0203 	orr.w	r2, r1, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	3302      	adds	r3, #2
 800c000:	68b9      	ldr	r1, [r7, #8]
 800c002:	440b      	add	r3, r1
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	041b      	lsls	r3, r3, #16
 800c008:	431a      	orrs	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	3303      	adds	r3, #3
 800c00e:	68b9      	ldr	r1, [r7, #8]
 800c010:	440b      	add	r3, r1
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	061b      	lsls	r3, r3, #24
 800c016:	4313      	orrs	r3, r2
 800c018:	613b      	str	r3, [r7, #16]
  while (size > idx)
 800c01a:	e033      	b.n	800c084 <PTP_GetArray32+0xb2>
  {
    array[idx] = LE32(&data[offset + (sizeof(uint32_t) * (idx + 1U))]);
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	3301      	adds	r3, #1
 800c020:	009a      	lsls	r2, r3, #2
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4413      	add	r3, r2
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	4413      	add	r3, r2
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	4619      	mov	r1, r3
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	3301      	adds	r3, #1
 800c032:	009a      	lsls	r2, r3, #2
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4413      	add	r3, r2
 800c038:	3301      	adds	r3, #1
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	4413      	add	r3, r2
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	021b      	lsls	r3, r3, #8
 800c042:	ea41 0203 	orr.w	r2, r1, r3
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	3301      	adds	r3, #1
 800c04a:	0099      	lsls	r1, r3, #2
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	440b      	add	r3, r1
 800c050:	3302      	adds	r3, #2
 800c052:	68b9      	ldr	r1, [r7, #8]
 800c054:	440b      	add	r3, r1
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	041b      	lsls	r3, r3, #16
 800c05a:	ea42 0103 	orr.w	r1, r2, r3
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	3301      	adds	r3, #1
 800c062:	009a      	lsls	r2, r3, #2
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4413      	add	r3, r2
 800c068:	3303      	adds	r3, #3
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	4413      	add	r3, r2
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	061a      	lsls	r2, r3, #24
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	4403      	add	r3, r0
 800c07a:	430a      	orrs	r2, r1
 800c07c:	601a      	str	r2, [r3, #0]
    idx++;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	3301      	adds	r3, #1
 800c082:	617b      	str	r3, [r7, #20]
  while (size > idx)
 800c084:	693a      	ldr	r2, [r7, #16]
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d8c7      	bhi.n	800c01c <PTP_GetArray32+0x4a>
  }
  return size;
 800c08c:	693b      	ldr	r3, [r7, #16]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	371c      	adds	r7, #28
 800c092:	46bd      	mov	sp, r7
 800c094:	bc80      	pop	{r7}
 800c096:	4770      	bx	lr

0800c098 <USBH_PTP_OpenSession>:
  * @param  phost: Host handle
  * @param  session: Session ID (MUST BE > 0U)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_OpenSession(USBH_HandleTypeDef *phost, uint32_t session)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b08e      	sub	sp, #56	; 0x38
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0ae:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c0b2:	69db      	ldr	r3, [r3, #28]
 800c0b4:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800c0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0bc:	f893 3d61 	ldrb.w	r3, [r3, #3425]	; 0xd61
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d002      	beq.n	800c0ca <USBH_PTP_OpenSession+0x32>
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d041      	beq.n	800c14c <USBH_PTP_OpenSession+0xb4>
    case PTP_REQ_WAIT:
      status = USBH_PTP_Process(phost);
      break;

    default:
      break;
 800c0c8:	e047      	b.n	800c15a <USBH_PTP_OpenSession+0xc2>
      MTP_Handle->ptp.transaction_id = 0x00000000U;
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
      MTP_Handle->ptp.session_id = session;
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c0de:	461a      	mov	r2, r3
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
      MTP_Handle->ptp.flags = PTP_DP_NODATA;
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
      ptp_container.Code = PTP_OC_OpenSession;
 800c0f4:	f241 0302 	movw	r3, #4098	; 0x1002
 800c0f8:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = session;
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 800c0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c100:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c104:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800c108:	1c5a      	adds	r2, r3, #1
 800c10a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c10c:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800c110:	f8c1 21a4 	str.w	r2, [r1, #420]	; 0x1a4
 800c114:	617b      	str	r3, [r7, #20]
      ptp_container.Param1 = session;
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	61bb      	str	r3, [r7, #24]
      ptp_container.Nparam = 1U;
 800c11a:	2301      	movs	r3, #1
 800c11c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      USBH_PTP_SendRequest(phost, &ptp_container);
 800c120:	f107 030c 	add.w	r3, r7, #12
 800c124:	4619      	mov	r1, r3
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f7ff fa4c 	bl	800b5c4 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800c12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c132:	2201      	movs	r2, #1
 800c134:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800c138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c13e:	2202      	movs	r2, #2
 800c140:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      status = USBH_BUSY;
 800c144:	2301      	movs	r3, #1
 800c146:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 800c14a:	e006      	b.n	800c15a <USBH_PTP_OpenSession+0xc2>
      status = USBH_PTP_Process(phost);
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7fe ffa1 	bl	800b094 <USBH_PTP_Process>
 800c152:	4603      	mov	r3, r0
 800c154:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 800c158:	bf00      	nop
  }
  return status;
 800c15a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3738      	adds	r7, #56	; 0x38
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <USBH_PTP_GetDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b08e      	sub	sp, #56	; 0x38
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c170:	2301      	movs	r3, #1
 800c172:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c17c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c180:	69db      	ldr	r3, [r3, #28]
 800c182:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800c184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c18a:	f893 3d61 	ldrb.w	r3, [r3, #3425]	; 0xd61
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d002      	beq.n	800c198 <USBH_PTP_GetDeviceInfo+0x32>
 800c192:	2b02      	cmp	r3, #2
 800c194:	d053      	beq.n	800c23e <USBH_PTP_GetDeviceInfo+0xd8>
        PTP_DecodeDeviceInfo(phost, dev_info);
      }
      break;

    default:
      break;
 800c196:	e061      	b.n	800c25c <USBH_PTP_GetDeviceInfo+0xf6>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c19e:	461a      	mov	r2, r3
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 800c1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a8:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1b0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800c1b4:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c1be:	461a      	mov	r2, r3
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c1da:	461a      	mov	r2, r3
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
      ptp_container.Code = PTP_OC_GetDeviceInfo;
 800c1e2:	f241 0301 	movw	r3, #4097	; 0x1001
 800c1e6:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800c1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c1ee:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800c1f2:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c1fa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800c1fe:	1c5a      	adds	r2, r3, #1
 800c200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c202:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800c206:	f8c1 21a4 	str.w	r2, [r1, #420]	; 0x1a4
 800c20a:	617b      	str	r3, [r7, #20]
      ptp_container.Nparam = 0U;
 800c20c:	2300      	movs	r3, #0
 800c20e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      USBH_PTP_SendRequest(phost, &ptp_container);
 800c212:	f107 030c 	add.w	r3, r7, #12
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff f9d3 	bl	800b5c4 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800c21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c224:	2201      	movs	r2, #1
 800c226:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c230:	2202      	movs	r2, #2
 800c232:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      status = USBH_BUSY;
 800c236:	2301      	movs	r3, #1
 800c238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 800c23c:	e00e      	b.n	800c25c <USBH_PTP_GetDeviceInfo+0xf6>
      status = USBH_PTP_Process(phost);
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f7fe ff28 	bl	800b094 <USBH_PTP_Process>
 800c244:	4603      	mov	r3, r0
 800c246:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status == USBH_OK)
 800c24a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d103      	bne.n	800c25a <USBH_PTP_GetDeviceInfo+0xf4>
        PTP_DecodeDeviceInfo(phost, dev_info);
 800c252:	6839      	ldr	r1, [r7, #0]
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7ff faf3 	bl	800b840 <PTP_DecodeDeviceInfo>
      break;
 800c25a:	bf00      	nop
  }
  return status;
 800c25c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800c260:	4618      	mov	r0, r3
 800c262:	3738      	adds	r7, #56	; 0x38
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <USBH_PTP_GetStorageIds>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageIds(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *storage_ids)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08e      	sub	sp, #56	; 0x38
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c272:	2301      	movs	r3, #1
 800c274:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c27e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c282:	69db      	ldr	r3, [r3, #28]
 800c284:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800c286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c28c:	f893 3d61 	ldrb.w	r3, [r3, #3425]	; 0xd61
 800c290:	2b01      	cmp	r3, #1
 800c292:	d002      	beq.n	800c29a <USBH_PTP_GetStorageIds+0x32>
 800c294:	2b02      	cmp	r3, #2
 800c296:	d053      	beq.n	800c340 <USBH_PTP_GetStorageIds+0xd8>
        PTP_GetStorageIDs(phost, storage_ids);
      }
      break;

    default:
      break;
 800c298:	e061      	b.n	800c35e <USBH_PTP_GetStorageIds+0xf6>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800c29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2b2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800c2b6:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 800c2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c2dc:	461a      	mov	r2, r3
 800c2de:	2300      	movs	r3, #0
 800c2e0:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
      ptp_container.Code = PTP_OC_GetStorageIDs;
 800c2e4:	f241 0304 	movw	r3, #4100	; 0x1004
 800c2e8:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c2f0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800c2f4:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c2fc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800c300:	1c5a      	adds	r2, r3, #1
 800c302:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c304:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800c308:	f8c1 21a4 	str.w	r2, [r1, #420]	; 0x1a4
 800c30c:	617b      	str	r3, [r7, #20]
      ptp_container.Nparam = 0U;
 800c30e:	2300      	movs	r3, #0
 800c310:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      USBH_PTP_SendRequest(phost, &ptp_container);
 800c314:	f107 030c 	add.w	r3, r7, #12
 800c318:	4619      	mov	r1, r3
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7ff f952 	bl	800b5c4 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c326:	2201      	movs	r2, #1
 800c328:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c332:	2202      	movs	r2, #2
 800c334:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      status = USBH_BUSY;
 800c338:	2301      	movs	r3, #1
 800c33a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 800c33e:	e00e      	b.n	800c35e <USBH_PTP_GetStorageIds+0xf6>
      status = USBH_PTP_Process(phost);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7fe fea7 	bl	800b094 <USBH_PTP_Process>
 800c346:	4603      	mov	r3, r0
 800c348:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status == USBH_OK)
 800c34c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c350:	2b00      	cmp	r3, #0
 800c352:	d103      	bne.n	800c35c <USBH_PTP_GetStorageIds+0xf4>
        PTP_GetStorageIDs(phost, storage_ids);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff fb98 	bl	800ba8c <PTP_GetStorageIDs>
      break;
 800c35c:	bf00      	nop
  }
  return status;
 800c35e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800c362:	4618      	mov	r0, r3
 800c364:	3738      	adds	r7, #56	; 0x38
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <USBH_PTP_GetStorageInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageInfo(USBH_HandleTypeDef *phost,
                                           uint32_t storage_id,
                                           PTP_StorageInfoTypedef *storage_info)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b090      	sub	sp, #64	; 0x40
 800c36e:	af00      	add	r7, sp, #0
 800c370:	60f8      	str	r0, [r7, #12]
 800c372:	60b9      	str	r1, [r7, #8]
 800c374:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800c376:	2301      	movs	r3, #1
 800c378:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c382:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c386:	69db      	ldr	r3, [r3, #28]
 800c388:	63bb      	str	r3, [r7, #56]	; 0x38
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800c38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c390:	f893 3d61 	ldrb.w	r3, [r3, #3425]	; 0xd61
 800c394:	2b01      	cmp	r3, #1
 800c396:	d002      	beq.n	800c39e <USBH_PTP_GetStorageInfo+0x34>
 800c398:	2b02      	cmp	r3, #2
 800c39a:	d055      	beq.n	800c448 <USBH_PTP_GetStorageInfo+0xde>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
      }
      break;

    default:
      break;
 800c39c:	e064      	b.n	800c468 <USBH_PTP_GetStorageInfo+0xfe>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800c39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) &(MTP_Handle->ptp.data_container);
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ae:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3b6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800c3ba:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 800c3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 800c3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
      ptp_container.Code = PTP_OC_GetStorageInfo;
 800c3e8:	f241 0305 	movw	r3, #4101	; 0x1005
 800c3ec:	82bb      	strh	r3, [r7, #20]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800c3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c3f4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800c3f8:	61bb      	str	r3, [r7, #24]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800c3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c400:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800c404:	1c5a      	adds	r2, r3, #1
 800c406:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c408:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800c40c:	f8c1 21a4 	str.w	r2, [r1, #420]	; 0x1a4
 800c410:	61fb      	str	r3, [r7, #28]
      ptp_container.Param1 = storage_id;
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	623b      	str	r3, [r7, #32]
      ptp_container.Nparam = 1U;
 800c416:	2301      	movs	r3, #1
 800c418:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
      USBH_PTP_SendRequest(phost, &ptp_container);
 800c41c:	f107 0314 	add.w	r3, r7, #20
 800c420:	4619      	mov	r1, r3
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f7ff f8ce 	bl	800b5c4 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800c428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800c434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c43a:	2202      	movs	r2, #2
 800c43c:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      status = USBH_BUSY;
 800c440:	2301      	movs	r3, #1
 800c442:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 800c446:	e00f      	b.n	800c468 <USBH_PTP_GetStorageInfo+0xfe>
      status = USBH_PTP_Process(phost);
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f7fe fe23 	bl	800b094 <USBH_PTP_Process>
 800c44e:	4603      	mov	r3, r0
 800c450:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      if (status == USBH_OK)
 800c454:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d104      	bne.n	800c466 <USBH_PTP_GetStorageInfo+0xfc>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	68b9      	ldr	r1, [r7, #8]
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f7ff fb32 	bl	800baca <PTP_GetStorageInfo>
      break;
 800c466:	bf00      	nop
  }
  return status;
 800c468:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3740      	adds	r7, #64	; 0x40
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	4613      	mov	r3, r2
 800c480:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d10a      	bne.n	800c49e <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800c488:	4822      	ldr	r0, [pc, #136]	; (800c514 <USBH_Init+0xa0>)
 800c48a:	f006 fb87 	bl	8012b9c <iprintf>
 800c48e:	4822      	ldr	r0, [pc, #136]	; (800c518 <USBH_Init+0xa4>)
 800c490:	f006 fb84 	bl	8012b9c <iprintf>
 800c494:	200a      	movs	r0, #10
 800c496:	f006 fb99 	bl	8012bcc <putchar>
    return USBH_FAIL;
 800c49a:	2302      	movs	r3, #2
 800c49c:	e035      	b.n	800c50a <USBH_Init+0x96>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	79fb      	ldrb	r3, [r7, #7]
 800c4a8:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
  phost->ClassNumber = 0U;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f000 f827 	bl	800c51c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
  phost->device.is_connected = 0U;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
  phost->device.is_disconnected = 0U;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
  phost->device.is_ReEnumerated = 0U;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d006      	beq.n	800c502 <USBH_Init+0x8e>
  {
    phost->pUser = pUsrFunc;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	f001 fd7c 	bl	800e000 <USBH_LL_Init>

  return USBH_OK;
 800c508:	2300      	movs	r3, #0
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3710      	adds	r7, #16
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	08014218 	.word	0x08014218
 800c518:	08014220 	.word	0x08014220

0800c51c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c524:	2300      	movs	r3, #0
 800c526:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c528:	2300      	movs	r3, #0
 800c52a:	60fb      	str	r3, [r7, #12]
 800c52c:	e00a      	b.n	800c544 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	4413      	add	r3, r2
 800c53a:	2200      	movs	r2, #0
 800c53c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	3301      	adds	r3, #1
 800c542:	60fb      	str	r3, [r7, #12]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2b0e      	cmp	r3, #14
 800c548:	d9f1      	bls.n	800c52e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c54a:	2300      	movs	r3, #0
 800c54c:	60fb      	str	r3, [r7, #12]
 800c54e:	e009      	b.n	800c564 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	4413      	add	r3, r2
 800c556:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c55a:	2200      	movs	r2, #0
 800c55c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	3301      	adds	r3, #1
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c56a:	d3f1      	bcc.n	800c550 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2201      	movs	r2, #1
 800c57c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c584:	461a      	mov	r2, r3
 800c586:	2300      	movs	r3, #0
 800c588:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164

  phost->Control.state = CTRL_SETUP;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2240      	movs	r2, #64	; 0x40
 800c596:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c
  phost->device.speed = USBH_SPEED_FULL;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d

  return USBH_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3714      	adds	r7, #20
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bc80      	pop	{r7}
 800c5b8:	4770      	bx	lr
	...

0800c5bc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d026      	beq.n	800c61e <USBH_RegisterClass+0x62>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5d6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c5da:	2b0e      	cmp	r3, #14
 800c5dc:	d813      	bhi.n	800c606 <USBH_RegisterClass+0x4a>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5e4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c5e8:	1c5a      	adds	r2, r3, #1
 800c5ea:	6879      	ldr	r1, [r7, #4]
 800c5ec:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800c5f0:	f8c1 2120 	str.w	r2, [r1, #288]	; 0x120
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800c5fa:	6839      	ldr	r1, [r7, #0]
 800c5fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c600:	2300      	movs	r3, #0
 800c602:	73fb      	strb	r3, [r7, #15]
 800c604:	e016      	b.n	800c634 <USBH_RegisterClass+0x78>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800c606:	480e      	ldr	r0, [pc, #56]	; (800c640 <USBH_RegisterClass+0x84>)
 800c608:	f006 fac8 	bl	8012b9c <iprintf>
 800c60c:	480d      	ldr	r0, [pc, #52]	; (800c644 <USBH_RegisterClass+0x88>)
 800c60e:	f006 fac5 	bl	8012b9c <iprintf>
 800c612:	200a      	movs	r0, #10
 800c614:	f006 fada 	bl	8012bcc <putchar>
      status = USBH_FAIL;
 800c618:	2302      	movs	r3, #2
 800c61a:	73fb      	strb	r3, [r7, #15]
 800c61c:	e00a      	b.n	800c634 <USBH_RegisterClass+0x78>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800c61e:	4808      	ldr	r0, [pc, #32]	; (800c640 <USBH_RegisterClass+0x84>)
 800c620:	f006 fabc 	bl	8012b9c <iprintf>
 800c624:	4808      	ldr	r0, [pc, #32]	; (800c648 <USBH_RegisterClass+0x8c>)
 800c626:	f006 fab9 	bl	8012b9c <iprintf>
 800c62a:	200a      	movs	r0, #10
 800c62c:	f006 face 	bl	8012bcc <putchar>
    status = USBH_FAIL;
 800c630:	2302      	movs	r3, #2
 800c632:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c634:	7bfb      	ldrb	r3, [r7, #15]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	08014218 	.word	0x08014218
 800c644:	08014234 	.word	0x08014234
 800c648:	08014250 	.word	0x08014250

0800c64c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	460b      	mov	r3, r1
 800c656:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c658:	2300      	movs	r3, #0
 800c65a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f893 393a 	ldrb.w	r3, [r3, #2362]	; 0x93a
 800c662:	78fa      	ldrb	r2, [r7, #3]
 800c664:	429a      	cmp	r2, r3
 800c666:	d23f      	bcs.n	800c6e8 <USBH_SelectInterface+0x9c>
  {
    phost->device.current_interface = interface;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	78fa      	ldrb	r2, [r7, #3]
 800c66c:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800c670:	78fb      	ldrb	r3, [r7, #3]
 800c672:	4619      	mov	r1, r3
 800c674:	4824      	ldr	r0, [pc, #144]	; (800c708 <USBH_SelectInterface+0xbc>)
 800c676:	f006 fa91 	bl	8012b9c <iprintf>
 800c67a:	200a      	movs	r0, #10
 800c67c:	f006 faa6 	bl	8012bcc <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800c680:	78fa      	ldrb	r2, [r7, #3]
 800c682:	6879      	ldr	r1, [r7, #4]
 800c684:	4613      	mov	r3, r2
 800c686:	019b      	lsls	r3, r3, #6
 800c688:	4413      	add	r3, r2
 800c68a:	005b      	lsls	r3, r3, #1
 800c68c:	440b      	add	r3, r1
 800c68e:	f603 1345 	addw	r3, r3, #2373	; 0x945
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	4619      	mov	r1, r3
 800c696:	481d      	ldr	r0, [pc, #116]	; (800c70c <USBH_SelectInterface+0xc0>)
 800c698:	f006 fa80 	bl	8012b9c <iprintf>
 800c69c:	200a      	movs	r0, #10
 800c69e:	f006 fa95 	bl	8012bcc <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800c6a2:	78fa      	ldrb	r2, [r7, #3]
 800c6a4:	6879      	ldr	r1, [r7, #4]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	019b      	lsls	r3, r3, #6
 800c6aa:	4413      	add	r3, r2
 800c6ac:	005b      	lsls	r3, r3, #1
 800c6ae:	440b      	add	r3, r1
 800c6b0:	f603 1346 	addw	r3, r3, #2374	; 0x946
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	4815      	ldr	r0, [pc, #84]	; (800c710 <USBH_SelectInterface+0xc4>)
 800c6ba:	f006 fa6f 	bl	8012b9c <iprintf>
 800c6be:	200a      	movs	r0, #10
 800c6c0:	f006 fa84 	bl	8012bcc <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800c6c4:	78fa      	ldrb	r2, [r7, #3]
 800c6c6:	6879      	ldr	r1, [r7, #4]
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	019b      	lsls	r3, r3, #6
 800c6cc:	4413      	add	r3, r2
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	440b      	add	r3, r1
 800c6d2:	f603 1347 	addw	r3, r3, #2375	; 0x947
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	480e      	ldr	r0, [pc, #56]	; (800c714 <USBH_SelectInterface+0xc8>)
 800c6dc:	f006 fa5e 	bl	8012b9c <iprintf>
 800c6e0:	200a      	movs	r0, #10
 800c6e2:	f006 fa73 	bl	8012bcc <putchar>
 800c6e6:	e00a      	b.n	800c6fe <USBH_SelectInterface+0xb2>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800c6e8:	480b      	ldr	r0, [pc, #44]	; (800c718 <USBH_SelectInterface+0xcc>)
 800c6ea:	f006 fa57 	bl	8012b9c <iprintf>
 800c6ee:	480b      	ldr	r0, [pc, #44]	; (800c71c <USBH_SelectInterface+0xd0>)
 800c6f0:	f006 fa54 	bl	8012b9c <iprintf>
 800c6f4:	200a      	movs	r0, #10
 800c6f6:	f006 fa69 	bl	8012bcc <putchar>
    status = USBH_FAIL;
 800c6fa:	2302      	movs	r3, #2
 800c6fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	08014268 	.word	0x08014268
 800c70c:	08014288 	.word	0x08014288
 800c710:	08014298 	.word	0x08014298
 800c714:	080142a8 	.word	0x080142a8
 800c718:	08014218 	.word	0x08014218
 800c71c:	080142b8 	.word	0x080142b8

0800c720 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c720:	b480      	push	{r7}
 800c722:	b087      	sub	sp, #28
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	4608      	mov	r0, r1
 800c72a:	4611      	mov	r1, r2
 800c72c:	461a      	mov	r2, r3
 800c72e:	4603      	mov	r3, r0
 800c730:	70fb      	strb	r3, [r7, #3]
 800c732:	460b      	mov	r3, r1
 800c734:	70bb      	strb	r3, [r7, #2]
 800c736:	4613      	mov	r3, r2
 800c738:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c73a:	2300      	movs	r3, #0
 800c73c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c73e:	2300      	movs	r3, #0
 800c740:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f603 1336 	addw	r3, r3, #2358	; 0x936
 800c748:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c74a:	e026      	b.n	800c79a <USBH_FindInterface+0x7a>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c74c:	7dfa      	ldrb	r2, [r7, #23]
 800c74e:	4613      	mov	r3, r2
 800c750:	019b      	lsls	r3, r3, #6
 800c752:	4413      	add	r3, r2
 800c754:	005b      	lsls	r3, r3, #1
 800c756:	3308      	adds	r3, #8
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	4413      	add	r3, r2
 800c75c:	3302      	adds	r3, #2
 800c75e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	795b      	ldrb	r3, [r3, #5]
 800c764:	78fa      	ldrb	r2, [r7, #3]
 800c766:	429a      	cmp	r2, r3
 800c768:	d002      	beq.n	800c770 <USBH_FindInterface+0x50>
 800c76a:	78fb      	ldrb	r3, [r7, #3]
 800c76c:	2bff      	cmp	r3, #255	; 0xff
 800c76e:	d111      	bne.n	800c794 <USBH_FindInterface+0x74>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c774:	78ba      	ldrb	r2, [r7, #2]
 800c776:	429a      	cmp	r2, r3
 800c778:	d002      	beq.n	800c780 <USBH_FindInterface+0x60>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c77a:	78bb      	ldrb	r3, [r7, #2]
 800c77c:	2bff      	cmp	r3, #255	; 0xff
 800c77e:	d109      	bne.n	800c794 <USBH_FindInterface+0x74>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c784:	787a      	ldrb	r2, [r7, #1]
 800c786:	429a      	cmp	r2, r3
 800c788:	d002      	beq.n	800c790 <USBH_FindInterface+0x70>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c78a:	787b      	ldrb	r3, [r7, #1]
 800c78c:	2bff      	cmp	r3, #255	; 0xff
 800c78e:	d101      	bne.n	800c794 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 800c790:	7dfb      	ldrb	r3, [r7, #23]
 800c792:	e006      	b.n	800c7a2 <USBH_FindInterface+0x82>
    }
    if_ix++;
 800c794:	7dfb      	ldrb	r3, [r7, #23]
 800c796:	3301      	adds	r3, #1
 800c798:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c79a:	7dfb      	ldrb	r3, [r7, #23]
 800c79c:	2b0e      	cmp	r3, #14
 800c79e:	d9d5      	bls.n	800c74c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c7a0:	23ff      	movs	r3, #255	; 0xff
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bc80      	pop	{r7}
 800c7aa:	4770      	bx	lr

0800c7ac <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b087      	sub	sp, #28
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	70fb      	strb	r3, [r7, #3]
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f603 1336 	addw	r3, r3, #2358	; 0x936
 800c7ca:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c7cc:	e018      	b.n	800c800 <USBH_FindInterfaceIndex+0x54>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c7ce:	7dfa      	ldrb	r2, [r7, #23]
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	019b      	lsls	r3, r3, #6
 800c7d4:	4413      	add	r3, r2
 800c7d6:	005b      	lsls	r3, r3, #1
 800c7d8:	3308      	adds	r3, #8
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	4413      	add	r3, r2
 800c7de:	3302      	adds	r3, #2
 800c7e0:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	789b      	ldrb	r3, [r3, #2]
 800c7e6:	78fa      	ldrb	r2, [r7, #3]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d106      	bne.n	800c7fa <USBH_FindInterfaceIndex+0x4e>
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	78db      	ldrb	r3, [r3, #3]
 800c7f0:	78ba      	ldrb	r2, [r7, #2]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d101      	bne.n	800c7fa <USBH_FindInterfaceIndex+0x4e>
    {
      return  if_ix;
 800c7f6:	7dfb      	ldrb	r3, [r7, #23]
 800c7f8:	e006      	b.n	800c808 <USBH_FindInterfaceIndex+0x5c>
    }
    if_ix++;
 800c7fa:	7dfb      	ldrb	r3, [r7, #23]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c800:	7dfb      	ldrb	r3, [r7, #23]
 800c802:	2b0e      	cmp	r3, #14
 800c804:	d9e3      	bls.n	800c7ce <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 800c806:	23ff      	movs	r3, #255	; 0xff
}
 800c808:	4618      	mov	r0, r3
 800c80a:	371c      	adds	r7, #28
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bc80      	pop	{r7}
 800c810:	4770      	bx	lr

0800c812 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c812:	b580      	push	{r7, lr}
 800c814:	b082      	sub	sp, #8
 800c816:	af00      	add	r7, sp, #0
 800c818:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f001 fc2e 	bl	800e07c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c820:	2101      	movs	r1, #1
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f001 fd59 	bl	800e2da <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
	...

0800c834 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b088      	sub	sp, #32
 800c838:	af04      	add	r7, sp, #16
 800c83a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c83c:	2302      	movs	r3, #2
 800c83e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c840:	2300      	movs	r3, #0
 800c842:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f893 391f 	ldrb.w	r3, [r3, #2335]	; 0x91f
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d102      	bne.n	800c856 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2203      	movs	r2, #3
 800c854:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	2b0b      	cmp	r3, #11
 800c85e:	f200 820d 	bhi.w	800cc7c <USBH_Process+0x448>
 800c862:	a201      	add	r2, pc, #4	; (adr r2, 800c868 <USBH_Process+0x34>)
 800c864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c868:	0800c899 	.word	0x0800c899
 800c86c:	0800c8c7 	.word	0x0800c8c7
 800c870:	0800c8e7 	.word	0x0800c8e7
 800c874:	0800cbf5 	.word	0x0800cbf5
 800c878:	0800cc7d 	.word	0x0800cc7d
 800c87c:	0800c993 	.word	0x0800c993
 800c880:	0800cb89 	.word	0x0800cb89
 800c884:	0800c9db 	.word	0x0800c9db
 800c888:	0800ca03 	.word	0x0800ca03
 800c88c:	0800ca2f 	.word	0x0800ca2f
 800c890:	0800ca69 	.word	0x0800ca69
 800c894:	0800cbd5 	.word	0x0800cbd5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 391e 	ldrb.w	r3, [r3, #2334]	; 0x91e
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f000 81ed 	beq.w	800cc80 <USBH_Process+0x44c>
      {
        USBH_UsrLog("USB Device Connected");
 800c8a6:	48ae      	ldr	r0, [pc, #696]	; (800cb60 <USBH_Process+0x32c>)
 800c8a8:	f006 f978 	bl	8012b9c <iprintf>
 800c8ac:	200a      	movs	r0, #10
 800c8ae:	f006 f98d 	bl	8012bcc <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c8b8:	20c8      	movs	r0, #200	; 0xc8
 800c8ba:	f001 fd7e 	bl	800e3ba <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f001 fc3f 	bl	800e142 <USBH_LL_ResetPort>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c8c4:	e1dc      	b.n	800cc80 <USBH_Process+0x44c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 3921 	ldrb.w	r3, [r3, #2337]	; 0x921
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	f040 81d9 	bne.w	800cc84 <USBH_Process+0x450>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800c8d2:	48a4      	ldr	r0, [pc, #656]	; (800cb64 <USBH_Process+0x330>)
 800c8d4:	f006 f962 	bl	8012b9c <iprintf>
 800c8d8:	200a      	movs	r0, #10
 800c8da:	f006 f977 	bl	8012bcc <putchar>
        phost->gState = HOST_DEV_ATTACHED;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2202      	movs	r2, #2
 800c8e2:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c8e4:	e1ce      	b.n	800cc84 <USBH_Process+0x450>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8ec:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d007      	beq.n	800c904 <USBH_Process+0xd0>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8fa:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c8fe:	2104      	movs	r1, #4
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c904:	2064      	movs	r0, #100	; 0x64
 800c906:	f001 fd58 	bl	800e3ba <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f001 fbf0 	bl	800e0f0 <USBH_LL_GetSpeed>
 800c910:	4603      	mov	r3, r0
 800c912:	461a      	mov	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d

      phost->gState = HOST_ENUMERATION;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2205      	movs	r2, #5
 800c91e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c920:	2100      	movs	r1, #0
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f001 f9c7 	bl	800dcb6 <USBH_AllocPipe>
 800c928:	4603      	mov	r3, r0
 800c92a:	461a      	mov	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c930:	2180      	movs	r1, #128	; 0x80
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f001 f9bf 	bl	800dcb6 <USBH_AllocPipe>
 800c938:	4603      	mov	r3, r0
 800c93a:	461a      	mov	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	7919      	ldrb	r1, [r3, #4]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f893 091c 	ldrb.w	r0, [r3, #2332]	; 0x91c
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800c954:	b292      	uxth	r2, r2
 800c956:	9202      	str	r2, [sp, #8]
 800c958:	2200      	movs	r2, #0
 800c95a:	9201      	str	r2, [sp, #4]
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	4603      	mov	r3, r0
 800c960:	2280      	movs	r2, #128	; 0x80
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f001 f978 	bl	800dc58 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	7959      	ldrb	r1, [r3, #5]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 091c 	ldrb.w	r0, [r3, #2332]	; 0x91c
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800c97c:	b292      	uxth	r2, r2
 800c97e:	9202      	str	r2, [sp, #8]
 800c980:	2200      	movs	r2, #0
 800c982:	9201      	str	r2, [sp, #4]
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	4603      	mov	r3, r0
 800c988:	2200      	movs	r2, #0
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f001 f964 	bl	800dc58 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c990:	e185      	b.n	800cc9e <USBH_Process+0x46a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f98e 	bl	800ccb4 <USBH_HandleEnum>
 800c998:	4603      	mov	r3, r0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f040 8174 	bne.w	800cc88 <USBH_Process+0x454>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800c9a0:	4871      	ldr	r0, [pc, #452]	; (800cb68 <USBH_Process+0x334>)
 800c9a2:	f006 f8fb 	bl	8012b9c <iprintf>
 800c9a6:	200a      	movs	r0, #10
 800c9a8:	f006 f910 	bl	8012bcc <putchar>

        phost->device.current_interface = 0U;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 3935 	ldrb.w	r3, [r3, #2357]	; 0x935
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d109      	bne.n	800c9d2 <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800c9be:	486b      	ldr	r0, [pc, #428]	; (800cb6c <USBH_Process+0x338>)
 800c9c0:	f006 f8ec 	bl	8012b9c <iprintf>
 800c9c4:	200a      	movs	r0, #10
 800c9c6:	f006 f901 	bl	8012bcc <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2208      	movs	r2, #8
 800c9ce:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 800c9d0:	e15a      	b.n	800cc88 <USBH_Process+0x454>
          phost->gState = HOST_INPUT;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2207      	movs	r2, #7
 800c9d6:	701a      	strb	r2, [r3, #0]
      break;
 800c9d8:	e156      	b.n	800cc88 <USBH_Process+0x454>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9e0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f000 8151 	beq.w	800cc8c <USBH_Process+0x458>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9f0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2208      	movs	r2, #8
 800c9fe:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ca00:	e144      	b.n	800cc8c <USBH_Process+0x458>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 393b 	ldrb.w	r3, [r3, #2363]	; 0x93b
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fc34 	bl	800d27a <USBH_SetCfg>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f040 813b 	bne.w	800cc90 <USBH_Process+0x45c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2209      	movs	r2, #9
 800ca1e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800ca20:	4853      	ldr	r0, [pc, #332]	; (800cb70 <USBH_Process+0x33c>)
 800ca22:	f006 f8bb 	bl	8012b9c <iprintf>
 800ca26:	200a      	movs	r0, #10
 800ca28:	f006 f8d0 	bl	8012bcc <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ca2c:	e130      	b.n	800cc90 <USBH_Process+0x45c>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f893 393d 	ldrb.w	r3, [r3, #2365]	; 0x93d
 800ca34:	f003 0320 	and.w	r3, r3, #32
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d011      	beq.n	800ca60 <USBH_Process+0x22c>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fc65 	bl	800d30e <USBH_SetFeature>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f040 8124 	bne.w	800cc94 <USBH_Process+0x460>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800ca4c:	4849      	ldr	r0, [pc, #292]	; (800cb74 <USBH_Process+0x340>)
 800ca4e:	f006 f8a5 	bl	8012b9c <iprintf>
 800ca52:	200a      	movs	r0, #10
 800ca54:	f006 f8ba 	bl	8012bcc <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	220a      	movs	r2, #10
 800ca5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ca5e:	e119      	b.n	800cc94 <USBH_Process+0x460>
        phost->gState = HOST_CHECK_CLASS;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	220a      	movs	r2, #10
 800ca64:	701a      	strb	r2, [r3, #0]
      break;
 800ca66:	e115      	b.n	800cc94 <USBH_Process+0x460>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca6e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d106      	bne.n	800ca84 <USBH_Process+0x250>
      {
        USBH_UsrLog("No Class has been registered.");
 800ca76:	4840      	ldr	r0, [pc, #256]	; (800cb78 <USBH_Process+0x344>)
 800ca78:	f006 f890 	bl	8012b9c <iprintf>
 800ca7c:	200a      	movs	r0, #10
 800ca7e:	f006 f8a5 	bl	8012bcc <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ca82:	e10c      	b.n	800cc9e <USBH_Process+0x46a>
        phost->pActiveClass = NULL;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ca92:	2300      	movs	r3, #0
 800ca94:	73fb      	strb	r3, [r7, #15]
 800ca96:	e019      	b.n	800cacc <USBH_Process+0x298>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ca98:	7bfa      	ldrb	r2, [r7, #15]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f502 6287 	add.w	r2, r2, #1080	; 0x438
 800caa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caa4:	791a      	ldrb	r2, [r3, #4]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f893 3945 	ldrb.w	r3, [r3, #2373]	; 0x945
 800caac:	429a      	cmp	r2, r3
 800caae:	d10a      	bne.n	800cac6 <USBH_Process+0x292>
            phost->pActiveClass = phost->pClass[idx];
 800cab0:	7bfa      	ldrb	r2, [r7, #15]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f502 6287 	add.w	r2, r2, #1080	; 0x438
 800cab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cac2:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cac6:	7bfb      	ldrb	r3, [r7, #15]
 800cac8:	3301      	adds	r3, #1
 800caca:	73fb      	strb	r3, [r7, #15]
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
 800cace:	2b0e      	cmp	r3, #14
 800cad0:	d9e2      	bls.n	800ca98 <USBH_Process+0x264>
        if (phost->pActiveClass != NULL)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cad8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d034      	beq.n	800cb4a <USBH_Process+0x316>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cae6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	4798      	blx	r3
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d118      	bne.n	800cb28 <USBH_Process+0x2f4>
            phost->gState = HOST_CLASS_REQUEST;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2206      	movs	r2, #6
 800cafa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb02:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	481c      	ldr	r0, [pc, #112]	; (800cb7c <USBH_Process+0x348>)
 800cb0c:	f006 f846 	bl	8012b9c <iprintf>
 800cb10:	200a      	movs	r0, #10
 800cb12:	f006 f85b 	bl	8012bcc <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb1c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800cb20:	2103      	movs	r1, #3
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	4798      	blx	r3
      break;
 800cb26:	e0ba      	b.n	800cc9e <USBH_Process+0x46a>
            phost->gState = HOST_ABORT_STATE;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	220d      	movs	r2, #13
 800cb2c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb34:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	4810      	ldr	r0, [pc, #64]	; (800cb80 <USBH_Process+0x34c>)
 800cb3e:	f006 f82d 	bl	8012b9c <iprintf>
 800cb42:	200a      	movs	r0, #10
 800cb44:	f006 f842 	bl	8012bcc <putchar>
      break;
 800cb48:	e0a9      	b.n	800cc9e <USBH_Process+0x46a>
          phost->gState = HOST_ABORT_STATE;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	220d      	movs	r2, #13
 800cb4e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800cb50:	480c      	ldr	r0, [pc, #48]	; (800cb84 <USBH_Process+0x350>)
 800cb52:	f006 f823 	bl	8012b9c <iprintf>
 800cb56:	200a      	movs	r0, #10
 800cb58:	f006 f838 	bl	8012bcc <putchar>
      break;
 800cb5c:	e09f      	b.n	800cc9e <USBH_Process+0x46a>
 800cb5e:	bf00      	nop
 800cb60:	080142d8 	.word	0x080142d8
 800cb64:	080142f0 	.word	0x080142f0
 800cb68:	0801430c 	.word	0x0801430c
 800cb6c:	08014320 	.word	0x08014320
 800cb70:	08014348 	.word	0x08014348
 800cb74:	08014364 	.word	0x08014364
 800cb78:	08014384 	.word	0x08014384
 800cb7c:	080143a4 	.word	0x080143a4
 800cb80:	080143b8 	.word	0x080143b8
 800cb84:	080143d8 	.word	0x080143d8

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb8e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d011      	beq.n	800cbba <USBH_Process+0x386>
      {
        status = phost->pActiveClass->Requests(phost);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb9c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cba0:	691b      	ldr	r3, [r3, #16]
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	4798      	blx	r3
 800cba6:	4603      	mov	r3, r0
 800cba8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cbaa:	7bbb      	ldrb	r3, [r7, #14]
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d172      	bne.n	800cc98 <USBH_Process+0x464>
        {
          phost->gState = HOST_CLASS;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	220b      	movs	r2, #11
 800cbb6:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cbb8:	e06e      	b.n	800cc98 <USBH_Process+0x464>
        phost->gState = HOST_ABORT_STATE;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	220d      	movs	r2, #13
 800cbbe:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800cbc0:	4839      	ldr	r0, [pc, #228]	; (800cca8 <USBH_Process+0x474>)
 800cbc2:	f005 ffeb 	bl	8012b9c <iprintf>
 800cbc6:	4839      	ldr	r0, [pc, #228]	; (800ccac <USBH_Process+0x478>)
 800cbc8:	f005 ffe8 	bl	8012b9c <iprintf>
 800cbcc:	200a      	movs	r0, #10
 800cbce:	f005 fffd 	bl	8012bcc <putchar>
      break;
 800cbd2:	e061      	b.n	800cc98 <USBH_Process+0x464>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbda:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d05c      	beq.n	800cc9c <USBH_Process+0x468>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbe8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cbec:	695b      	ldr	r3, [r3, #20]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	4798      	blx	r3
      }
      break;
 800cbf2:	e053      	b.n	800cc9c <USBH_Process+0x468>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f

      DeInitStateMachine(phost);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7ff fc8d 	bl	800c51c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc08:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00e      	beq.n	800cc2e <USBH_Process+0x3fa>
      {
        phost->pActiveClass->DeInit(phost);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc16:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc26:	461a      	mov	r2, r3
 800cc28:	2300      	movs	r3, #0
 800cc2a:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
      }

      if (phost->pUser != NULL)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc34:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d007      	beq.n	800cc4c <USBH_Process+0x418>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc42:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800cc46:	2105      	movs	r1, #5
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800cc4c:	4818      	ldr	r0, [pc, #96]	; (800ccb0 <USBH_Process+0x47c>)
 800cc4e:	f005 ffa5 	bl	8012b9c <iprintf>
 800cc52:	200a      	movs	r0, #10
 800cc54:	f005 ffba 	bl	8012bcc <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d107      	bne.n	800cc74 <USBH_Process+0x440>
      {
        phost->device.is_ReEnumerated = 0U;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7ff fdd0 	bl	800c812 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cc72:	e014      	b.n	800cc9e <USBH_Process+0x46a>
        USBH_LL_Start(phost);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f001 fa01 	bl	800e07c <USBH_LL_Start>
      break;
 800cc7a:	e010      	b.n	800cc9e <USBH_Process+0x46a>

    case HOST_ABORT_STATE:
    default :
      break;
 800cc7c:	bf00      	nop
 800cc7e:	e00e      	b.n	800cc9e <USBH_Process+0x46a>
      break;
 800cc80:	bf00      	nop
 800cc82:	e00c      	b.n	800cc9e <USBH_Process+0x46a>
      break;
 800cc84:	bf00      	nop
 800cc86:	e00a      	b.n	800cc9e <USBH_Process+0x46a>
      break;
 800cc88:	bf00      	nop
 800cc8a:	e008      	b.n	800cc9e <USBH_Process+0x46a>
    break;
 800cc8c:	bf00      	nop
 800cc8e:	e006      	b.n	800cc9e <USBH_Process+0x46a>
      break;
 800cc90:	bf00      	nop
 800cc92:	e004      	b.n	800cc9e <USBH_Process+0x46a>
      break;
 800cc94:	bf00      	nop
 800cc96:	e002      	b.n	800cc9e <USBH_Process+0x46a>
      break;
 800cc98:	bf00      	nop
 800cc9a:	e000      	b.n	800cc9e <USBH_Process+0x46a>
      break;
 800cc9c:	bf00      	nop
  }
  return USBH_OK;
 800cc9e:	2300      	movs	r3, #0
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	08014218 	.word	0x08014218
 800ccac:	08014400 	.word	0x08014400
 800ccb0:	08014418 	.word	0x08014418

0800ccb4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b088      	sub	sp, #32
 800ccb8:	af04      	add	r7, sp, #16
 800ccba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	785b      	ldrb	r3, [r3, #1]
 800ccc4:	2b07      	cmp	r3, #7
 800ccc6:	f200 8148 	bhi.w	800cf5a <USBH_HandleEnum+0x2a6>
 800ccca:	a201      	add	r2, pc, #4	; (adr r2, 800ccd0 <USBH_HandleEnum+0x1c>)
 800cccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd0:	0800ccf1 	.word	0x0800ccf1
 800ccd4:	0800cd63 	.word	0x0800cd63
 800ccd8:	0800cda3 	.word	0x0800cda3
 800ccdc:	0800ce2d 	.word	0x0800ce2d
 800cce0:	0800ce45 	.word	0x0800ce45
 800cce4:	0800ce63 	.word	0x0800ce63
 800cce8:	0800ceb7 	.word	0x0800ceb7
 800ccec:	0800cf0b 	.word	0x0800cf0b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800ccf0:	2108      	movs	r1, #8
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 f9f1 	bl	800d0da <USBH_Get_DevDesc>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	f040 812f 	bne.w	800cf5e <USBH_HandleEnum+0x2aa>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 292b 	ldrb.w	r2, [r3, #2347]	; 0x92b
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	7919      	ldrb	r1, [r3, #4]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f893 091c 	ldrb.w	r0, [r3, #2332]	; 0x91c
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800cd24:	b292      	uxth	r2, r2
 800cd26:	9202      	str	r2, [sp, #8]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	9201      	str	r2, [sp, #4]
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2280      	movs	r2, #128	; 0x80
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 ff90 	bl	800dc58 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	7959      	ldrb	r1, [r3, #5]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f893 091c 	ldrb.w	r0, [r3, #2332]	; 0x91c
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800cd4c:	b292      	uxth	r2, r2
 800cd4e:	9202      	str	r2, [sp, #8]
 800cd50:	2200      	movs	r2, #0
 800cd52:	9201      	str	r2, [sp, #4]
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	4603      	mov	r3, r0
 800cd58:	2200      	movs	r2, #0
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 ff7c 	bl	800dc58 <USBH_OpenPipe>
      }
      break;
 800cd60:	e0fd      	b.n	800cf5e <USBH_HandleEnum+0x2aa>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 800cd62:	2112      	movs	r1, #18
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 f9b8 	bl	800d0da <USBH_Get_DevDesc>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f040 80f8 	bne.w	800cf62 <USBH_HandleEnum+0x2ae>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8b3 392e 	ldrh.w	r3, [r3, #2350]	; 0x92e
 800cd78:	4619      	mov	r1, r3
 800cd7a:	4883      	ldr	r0, [pc, #524]	; (800cf88 <USBH_HandleEnum+0x2d4>)
 800cd7c:	f005 ff0e 	bl	8012b9c <iprintf>
 800cd80:	200a      	movs	r0, #10
 800cd82:	f005 ff23 	bl	8012bcc <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8b3 392c 	ldrh.w	r3, [r3, #2348]	; 0x92c
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	487f      	ldr	r0, [pc, #508]	; (800cf8c <USBH_HandleEnum+0x2d8>)
 800cd90:	f005 ff04 	bl	8012b9c <iprintf>
 800cd94:	200a      	movs	r0, #10
 800cd96:	f005 ff19 	bl	8012bcc <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	705a      	strb	r2, [r3, #1]

      }
      break;
 800cda0:	e0df      	b.n	800cf62 <USBH_HandleEnum+0x2ae>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800cda2:	2101      	movs	r1, #1
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 fa44 	bl	800d232 <USBH_SetAddress>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f040 80da 	bne.w	800cf66 <USBH_HandleEnum+0x2b2>
      {
        USBH_Delay(2U);
 800cdb2:	2002      	movs	r0, #2
 800cdb4:	f001 fb01 	bl	800e3ba <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f893 391c 	ldrb.w	r3, [r3, #2332]	; 0x91c
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	4871      	ldr	r0, [pc, #452]	; (800cf90 <USBH_HandleEnum+0x2dc>)
 800cdca:	f005 fee7 	bl	8012b9c <iprintf>
 800cdce:	200a      	movs	r0, #10
 800cdd0:	f005 fefc 	bl	8012bcc <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2203      	movs	r2, #3
 800cdd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	7919      	ldrb	r1, [r3, #4]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 091c 	ldrb.w	r0, [r3, #2332]	; 0x91c
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800cdee:	b292      	uxth	r2, r2
 800cdf0:	9202      	str	r2, [sp, #8]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	9201      	str	r2, [sp, #4]
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2280      	movs	r2, #128	; 0x80
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 ff2b 	bl	800dc58 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	7959      	ldrb	r1, [r3, #5]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f893 091c 	ldrb.w	r0, [r3, #2332]	; 0x91c
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800ce16:	b292      	uxth	r2, r2
 800ce18:	9202      	str	r2, [sp, #8]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	9201      	str	r2, [sp, #4]
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	4603      	mov	r3, r0
 800ce22:	2200      	movs	r2, #0
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 ff17 	bl	800dc58 <USBH_OpenPipe>
      }
      break;
 800ce2a:	e09c      	b.n	800cf66 <USBH_HandleEnum+0x2b2>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 800ce2c:	2109      	movs	r1, #9
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f97b 	bl	800d12a <USBH_Get_CfgDesc>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f040 8097 	bne.w	800cf6a <USBH_HandleEnum+0x2b6>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2204      	movs	r2, #4
 800ce40:	705a      	strb	r2, [r3, #1]
      }
      break;
 800ce42:	e092      	b.n	800cf6a <USBH_HandleEnum+0x2b6>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8b3 3938 	ldrh.w	r3, [r3, #2360]	; 0x938
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 f96c 	bl	800d12a <USBH_Get_CfgDesc>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f040 808a 	bne.w	800cf6e <USBH_HandleEnum+0x2ba>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2205      	movs	r2, #5
 800ce5e:	705a      	strb	r2, [r3, #1]
      }
      break;
 800ce60:	e085      	b.n	800cf6e <USBH_HandleEnum+0x2ba>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f893 3932 	ldrb.w	r3, [r3, #2354]	; 0x932
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d01a      	beq.n	800cea2 <USBH_HandleEnum+0x1ee>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f893 1932 	ldrb.w	r1, [r3, #2354]	; 0x932
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800ce78:	23ff      	movs	r3, #255	; 0xff
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 f979 	bl	800d172 <USBH_Get_StringDesc>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d175      	bne.n	800cf72 <USBH_HandleEnum+0x2be>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	4841      	ldr	r0, [pc, #260]	; (800cf94 <USBH_HandleEnum+0x2e0>)
 800ce90:	f005 fe84 	bl	8012b9c <iprintf>
 800ce94:	200a      	movs	r0, #10
 800ce96:	f005 fe99 	bl	8012bcc <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2206      	movs	r2, #6
 800ce9e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cea0:	e067      	b.n	800cf72 <USBH_HandleEnum+0x2be>
        USBH_UsrLog("Manufacturer : N/A");
 800cea2:	483d      	ldr	r0, [pc, #244]	; (800cf98 <USBH_HandleEnum+0x2e4>)
 800cea4:	f005 fe7a 	bl	8012b9c <iprintf>
 800cea8:	200a      	movs	r0, #10
 800ceaa:	f005 fe8f 	bl	8012bcc <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2206      	movs	r2, #6
 800ceb2:	705a      	strb	r2, [r3, #1]
      break;
 800ceb4:	e05d      	b.n	800cf72 <USBH_HandleEnum+0x2be>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 3933 	ldrb.w	r3, [r3, #2355]	; 0x933
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d01a      	beq.n	800cef6 <USBH_HandleEnum+0x242>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f893 1933 	ldrb.w	r1, [r3, #2355]	; 0x933
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800cecc:	23ff      	movs	r3, #255	; 0xff
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 f94f 	bl	800d172 <USBH_Get_StringDesc>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d14d      	bne.n	800cf76 <USBH_HandleEnum+0x2c2>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cee0:	4619      	mov	r1, r3
 800cee2:	482e      	ldr	r0, [pc, #184]	; (800cf9c <USBH_HandleEnum+0x2e8>)
 800cee4:	f005 fe5a 	bl	8012b9c <iprintf>
 800cee8:	200a      	movs	r0, #10
 800ceea:	f005 fe6f 	bl	8012bcc <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2207      	movs	r2, #7
 800cef2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cef4:	e03f      	b.n	800cf76 <USBH_HandleEnum+0x2c2>
        USBH_UsrLog("Product : N/A");
 800cef6:	482a      	ldr	r0, [pc, #168]	; (800cfa0 <USBH_HandleEnum+0x2ec>)
 800cef8:	f005 fe50 	bl	8012b9c <iprintf>
 800cefc:	200a      	movs	r0, #10
 800cefe:	f005 fe65 	bl	8012bcc <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2207      	movs	r2, #7
 800cf06:	705a      	strb	r2, [r3, #1]
      break;
 800cf08:	e035      	b.n	800cf76 <USBH_HandleEnum+0x2c2>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 3934 	ldrb.w	r3, [r3, #2356]	; 0x934
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d019      	beq.n	800cf48 <USBH_HandleEnum+0x294>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f893 1934 	ldrb.w	r1, [r3, #2356]	; 0x934
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800cf20:	23ff      	movs	r3, #255	; 0xff
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 f925 	bl	800d172 <USBH_Get_StringDesc>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d125      	bne.n	800cf7a <USBH_HandleEnum+0x2c6>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cf34:	4619      	mov	r1, r3
 800cf36:	481b      	ldr	r0, [pc, #108]	; (800cfa4 <USBH_HandleEnum+0x2f0>)
 800cf38:	f005 fe30 	bl	8012b9c <iprintf>
 800cf3c:	200a      	movs	r0, #10
 800cf3e:	f005 fe45 	bl	8012bcc <putchar>
          Status = USBH_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cf46:	e018      	b.n	800cf7a <USBH_HandleEnum+0x2c6>
        USBH_UsrLog("Serial Number : N/A");
 800cf48:	4817      	ldr	r0, [pc, #92]	; (800cfa8 <USBH_HandleEnum+0x2f4>)
 800cf4a:	f005 fe27 	bl	8012b9c <iprintf>
 800cf4e:	200a      	movs	r0, #10
 800cf50:	f005 fe3c 	bl	8012bcc <putchar>
        Status = USBH_OK;
 800cf54:	2300      	movs	r3, #0
 800cf56:	73fb      	strb	r3, [r7, #15]
      break;
 800cf58:	e00f      	b.n	800cf7a <USBH_HandleEnum+0x2c6>

    default:
      break;
 800cf5a:	bf00      	nop
 800cf5c:	e00e      	b.n	800cf7c <USBH_HandleEnum+0x2c8>
      break;
 800cf5e:	bf00      	nop
 800cf60:	e00c      	b.n	800cf7c <USBH_HandleEnum+0x2c8>
      break;
 800cf62:	bf00      	nop
 800cf64:	e00a      	b.n	800cf7c <USBH_HandleEnum+0x2c8>
      break;
 800cf66:	bf00      	nop
 800cf68:	e008      	b.n	800cf7c <USBH_HandleEnum+0x2c8>
      break;
 800cf6a:	bf00      	nop
 800cf6c:	e006      	b.n	800cf7c <USBH_HandleEnum+0x2c8>
      break;
 800cf6e:	bf00      	nop
 800cf70:	e004      	b.n	800cf7c <USBH_HandleEnum+0x2c8>
      break;
 800cf72:	bf00      	nop
 800cf74:	e002      	b.n	800cf7c <USBH_HandleEnum+0x2c8>
      break;
 800cf76:	bf00      	nop
 800cf78:	e000      	b.n	800cf7c <USBH_HandleEnum+0x2c8>
      break;
 800cf7a:	bf00      	nop
  }
  return Status;
 800cf7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	08014430 	.word	0x08014430
 800cf8c:	0801443c 	.word	0x0801443c
 800cf90:	08014448 	.word	0x08014448
 800cf94:	08014460 	.word	0x08014460
 800cf98:	08014474 	.word	0x08014474
 800cf9c:	08014488 	.word	0x08014488
 800cfa0:	08014498 	.word	0x08014498
 800cfa4:	080144a8 	.word	0x080144a8
 800cfa8:	080144bc 	.word	0x080144bc

0800cfac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
}
 800cfc4:	bf00      	nop
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bc80      	pop	{r7}
 800cfcc:	4770      	bx	lr

0800cfce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b082      	sub	sp, #8
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfdc:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cfe8:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
  USBH_HandleSof(phost);
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 f804 	bl	800cffa <USBH_HandleSof>
}
 800cff2:	bf00      	nop
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b082      	sub	sp, #8
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	b2db      	uxtb	r3, r3
 800d008:	2b0b      	cmp	r3, #11
 800d00a:	d10e      	bne.n	800d02a <USBH_HandleSof+0x30>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d012:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800d016:	2b00      	cmp	r3, #0
 800d018:	d007      	beq.n	800d02a <USBH_HandleSof+0x30>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d020:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800d024:	699b      	ldr	r3, [r3, #24]
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	4798      	blx	r3
  }
}
 800d02a:	bf00      	nop
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d032:	b480      	push	{r7}
 800d034:	b083      	sub	sp, #12
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800d042:	bf00      	nop
}
 800d044:	370c      	adds	r7, #12
 800d046:	46bd      	mov	sp, r7
 800d048:	bc80      	pop	{r7}
 800d04a:	4770      	bx	lr

0800d04c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921

  return;
 800d05c:	bf00      	nop
}
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	bc80      	pop	{r7}
 800d064:	4770      	bx	lr

0800d066 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d066:	b480      	push	{r7}
 800d068:	b083      	sub	sp, #12
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2201      	movs	r2, #1
 800d072:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
  phost->device.is_disconnected = 0U;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
  phost->device.is_ReEnumerated = 0U;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bc80      	pop	{r7}
 800d090:	4770      	bx	lr

0800d092 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b082      	sub	sp, #8
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2201      	movs	r2, #1
 800d09e:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
  phost->device.is_connected = 0U;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
  phost->device.PortEnabled = 0U;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 ffff 	bl	800e0b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	791b      	ldrb	r3, [r3, #4]
 800d0bc:	4619      	mov	r1, r3
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 fe1b 	bl	800dcfa <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	795b      	ldrb	r3, [r3, #5]
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 fe15 	bl	800dcfa <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3708      	adds	r7, #8
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b086      	sub	sp, #24
 800d0de:	af02      	add	r7, sp, #8
 800d0e0:	6078      	str	r0, [r7, #4]
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d0ec:	78fb      	ldrb	r3, [r7, #3]
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 f864 	bl	800d1c8 <USBH_GetDescriptor>
 800d100:	4603      	mov	r3, r0
 800d102:	73fb      	strb	r3, [r7, #15]
 800d104:	7bfb      	ldrb	r3, [r7, #15]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d10a      	bne.n	800d120 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f603 1024 	addw	r0, r3, #2340	; 0x924
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d116:	78fa      	ldrb	r2, [r7, #3]
 800d118:	b292      	uxth	r2, r2
 800d11a:	4619      	mov	r1, r3
 800d11c:	f000 f93f 	bl	800d39e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d120:	7bfb      	ldrb	r3, [r7, #15]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b086      	sub	sp, #24
 800d12e:	af02      	add	r7, sp, #8
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	460b      	mov	r3, r1
 800d134:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	331c      	adds	r3, #28
 800d13a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d13c:	887b      	ldrh	r3, [r7, #2]
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d146:	2100      	movs	r1, #0
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 f83d 	bl	800d1c8 <USBH_GetDescriptor>
 800d14e:	4603      	mov	r3, r0
 800d150:	72fb      	strb	r3, [r7, #11]
 800d152:	7afb      	ldrb	r3, [r7, #11]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d107      	bne.n	800d168 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f603 1336 	addw	r3, r3, #2358	; 0x936
 800d15e:	887a      	ldrh	r2, [r7, #2]
 800d160:	68f9      	ldr	r1, [r7, #12]
 800d162:	4618      	mov	r0, r3
 800d164:	f000 f98a 	bl	800d47c <USBH_ParseCfgDesc>
  }

  return status;
 800d168:	7afb      	ldrb	r3, [r7, #11]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b088      	sub	sp, #32
 800d176:	af02      	add	r7, sp, #8
 800d178:	60f8      	str	r0, [r7, #12]
 800d17a:	607a      	str	r2, [r7, #4]
 800d17c:	461a      	mov	r2, r3
 800d17e:	460b      	mov	r3, r1
 800d180:	72fb      	strb	r3, [r7, #11]
 800d182:	4613      	mov	r3, r2
 800d184:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d186:	7afb      	ldrb	r3, [r7, #11]
 800d188:	b29b      	uxth	r3, r3
 800d18a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d18e:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d196:	893b      	ldrh	r3, [r7, #8]
 800d198:	9300      	str	r3, [sp, #0]
 800d19a:	460b      	mov	r3, r1
 800d19c:	2100      	movs	r1, #0
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f000 f812 	bl	800d1c8 <USBH_GetDescriptor>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	75fb      	strb	r3, [r7, #23]
 800d1a8:	7dfb      	ldrb	r3, [r7, #23]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d107      	bne.n	800d1be <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d1b4:	893a      	ldrh	r2, [r7, #8]
 800d1b6:	6879      	ldr	r1, [r7, #4]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 fa5d 	bl	800d678 <USBH_ParseStringDesc>
  }

  return status;
 800d1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3718      	adds	r7, #24
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	607b      	str	r3, [r7, #4]
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	72fb      	strb	r3, [r7, #11]
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	789b      	ldrb	r3, [r3, #2]
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d11c      	bne.n	800d21c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d1e2:	7afb      	ldrb	r3, [r7, #11]
 800d1e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2206      	movs	r2, #6
 800d1f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	893a      	ldrh	r2, [r7, #8]
 800d1f8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d1fa:	893b      	ldrh	r3, [r7, #8]
 800d1fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d204:	d104      	bne.n	800d210 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f240 4209 	movw	r2, #1033	; 0x409
 800d20c:	829a      	strh	r2, [r3, #20]
 800d20e:	e002      	b.n	800d216 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2200      	movs	r2, #0
 800d214:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	8b3a      	ldrh	r2, [r7, #24]
 800d21a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d21c:	8b3b      	ldrh	r3, [r7, #24]
 800d21e:	461a      	mov	r2, r3
 800d220:	6879      	ldr	r1, [r7, #4]
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f000 fa74 	bl	800d710 <USBH_CtlReq>
 800d228:	4603      	mov	r3, r0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b082      	sub	sp, #8
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	460b      	mov	r3, r1
 800d23c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	789b      	ldrb	r3, [r3, #2]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d10f      	bne.n	800d266 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2205      	movs	r2, #5
 800d250:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d252:	78fb      	ldrb	r3, [r7, #3]
 800d254:	b29a      	uxth	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d266:	2200      	movs	r2, #0
 800d268:	2100      	movs	r1, #0
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fa50 	bl	800d710 <USBH_CtlReq>
 800d270:	4603      	mov	r3, r0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b082      	sub	sp, #8
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
 800d282:	460b      	mov	r3, r1
 800d284:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	789b      	ldrb	r3, [r3, #2]
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d10e      	bne.n	800d2ac <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2209      	movs	r2, #9
 800d298:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	887a      	ldrh	r2, [r7, #2]
 800d29e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	2100      	movs	r1, #0
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 fa2d 	bl	800d710 <USBH_CtlReq>
 800d2b6:	4603      	mov	r3, r0
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3708      	adds	r7, #8
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	70fb      	strb	r3, [r7, #3]
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	789b      	ldrb	r3, [r3, #2]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d110      	bne.n	800d2fa <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	220b      	movs	r2, #11
 800d2e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 800d2e4:	78bb      	ldrb	r3, [r7, #2]
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d2ec:	78fb      	ldrb	r3, [r7, #3]
 800d2ee:	b29a      	uxth	r2, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 fa06 	bl	800d710 <USBH_CtlReq>
 800d304:	4603      	mov	r3, r0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3708      	adds	r7, #8
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b082      	sub	sp, #8
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
 800d316:	460b      	mov	r3, r1
 800d318:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	789b      	ldrb	r3, [r3, #2]
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d10f      	bne.n	800d342 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2203      	movs	r2, #3
 800d32c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d32e:	78fb      	ldrb	r3, [r7, #3]
 800d330:	b29a      	uxth	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d342:	2200      	movs	r2, #0
 800d344:	2100      	movs	r1, #0
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 f9e2 	bl	800d710 <USBH_CtlReq>
 800d34c:	4603      	mov	r3, r0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b082      	sub	sp, #8
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	460b      	mov	r3, r1
 800d360:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	789b      	ldrb	r3, [r3, #2]
 800d366:	2b01      	cmp	r3, #1
 800d368:	d10f      	bne.n	800d38a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2202      	movs	r2, #2
 800d36e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2201      	movs	r2, #1
 800d374:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d37c:	78fb      	ldrb	r3, [r7, #3]
 800d37e:	b29a      	uxth	r2, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d38a:	2200      	movs	r2, #0
 800d38c:	2100      	movs	r1, #0
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f9be 	bl	800d710 <USBH_CtlReq>
 800d394:	4603      	mov	r3, r0
}
 800d396:	4618      	mov	r0, r3
 800d398:	3708      	adds	r7, #8
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}

0800d39e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d39e:	b480      	push	{r7}
 800d3a0:	b085      	sub	sp, #20
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	60f8      	str	r0, [r7, #12]
 800d3a6:	60b9      	str	r1, [r7, #8]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	781a      	ldrb	r2, [r3, #0]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	785a      	ldrb	r2, [r3, #1]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	3302      	adds	r3, #2
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	3303      	adds	r3, #3
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	021b      	lsls	r3, r3, #8
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	791a      	ldrb	r2, [r3, #4]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	795a      	ldrb	r2, [r3, #5]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	799a      	ldrb	r2, [r3, #6]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	79da      	ldrb	r2, [r3, #7]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d3f8:	88fb      	ldrh	r3, [r7, #6]
 800d3fa:	2b08      	cmp	r3, #8
 800d3fc:	d939      	bls.n	800d472 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	3308      	adds	r3, #8
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	b29a      	uxth	r2, r3
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	3309      	adds	r3, #9
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	021b      	lsls	r3, r3, #8
 800d410:	b29b      	uxth	r3, r3
 800d412:	4313      	orrs	r3, r2
 800d414:	b29a      	uxth	r2, r3
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	330a      	adds	r3, #10
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	b29a      	uxth	r2, r3
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	330b      	adds	r3, #11
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	b29b      	uxth	r3, r3
 800d42a:	021b      	lsls	r3, r3, #8
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	4313      	orrs	r3, r2
 800d430:	b29a      	uxth	r2, r3
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	330c      	adds	r3, #12
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	330d      	adds	r3, #13
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	b29b      	uxth	r3, r3
 800d446:	021b      	lsls	r3, r3, #8
 800d448:	b29b      	uxth	r3, r3
 800d44a:	4313      	orrs	r3, r2
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	7b9a      	ldrb	r2, [r3, #14]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	7bda      	ldrb	r2, [r3, #15]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	7c1a      	ldrb	r2, [r3, #16]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	7c5a      	ldrb	r2, [r3, #17]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	745a      	strb	r2, [r3, #17]
  }
}
 800d472:	bf00      	nop
 800d474:	3714      	adds	r7, #20
 800d476:	46bd      	mov	sp, r7
 800d478:	bc80      	pop	{r7}
 800d47a:	4770      	bx	lr

0800d47c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b08a      	sub	sp, #40	; 0x28
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	4613      	mov	r3, r2
 800d488:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d48e:	2300      	movs	r3, #0
 800d490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d494:	2300      	movs	r3, #0
 800d496:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	781a      	ldrb	r2, [r3, #0]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	785a      	ldrb	r2, [r3, #1]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	3302      	adds	r3, #2
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	b29a      	uxth	r2, r3
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	3303      	adds	r3, #3
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	021b      	lsls	r3, r3, #8
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	b29a      	uxth	r2, r3
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	791a      	ldrb	r2, [r3, #4]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	795a      	ldrb	r2, [r3, #5]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	799a      	ldrb	r2, [r3, #6]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	79da      	ldrb	r2, [r3, #7]
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	7a1a      	ldrb	r2, [r3, #8]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d4f2:	88fb      	ldrh	r3, [r7, #6]
 800d4f4:	2b09      	cmp	r3, #9
 800d4f6:	d961      	bls.n	800d5bc <USBH_ParseCfgDesc+0x140>
  {
    ptr = USB_LEN_CFG_DESC;
 800d4f8:	2309      	movs	r3, #9
 800d4fa:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d500:	e053      	b.n	800d5aa <USBH_ParseCfgDesc+0x12e>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d502:	f107 0316 	add.w	r3, r7, #22
 800d506:	4619      	mov	r1, r3
 800d508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d50a:	f000 f8e7 	bl	800d6dc <USBH_GetNextDesc>
 800d50e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d512:	785b      	ldrb	r3, [r3, #1]
 800d514:	2b04      	cmp	r3, #4
 800d516:	d148      	bne.n	800d5aa <USBH_ParseCfgDesc+0x12e>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d518:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d51c:	4613      	mov	r3, r2
 800d51e:	019b      	lsls	r3, r3, #6
 800d520:	4413      	add	r3, r2
 800d522:	005b      	lsls	r3, r3, #1
 800d524:	3308      	adds	r3, #8
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	4413      	add	r3, r2
 800d52a:	3302      	adds	r3, #2
 800d52c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d52e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d530:	69f8      	ldr	r0, [r7, #28]
 800d532:	f000 f847 	bl	800d5c4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d536:	2300      	movs	r3, #0
 800d538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d53c:	2300      	movs	r3, #0
 800d53e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d540:	e023      	b.n	800d58a <USBH_ParseCfgDesc+0x10e>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d542:	f107 0316 	add.w	r3, r7, #22
 800d546:	4619      	mov	r1, r3
 800d548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d54a:	f000 f8c7 	bl	800d6dc <USBH_GetNextDesc>
 800d54e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d552:	785b      	ldrb	r3, [r3, #1]
 800d554:	2b05      	cmp	r3, #5
 800d556:	d118      	bne.n	800d58a <USBH_ParseCfgDesc+0x10e>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d558:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d55c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d560:	3301      	adds	r3, #1
 800d562:	00d9      	lsls	r1, r3, #3
 800d564:	4613      	mov	r3, r2
 800d566:	019b      	lsls	r3, r3, #6
 800d568:	4413      	add	r3, r2
 800d56a:	005b      	lsls	r3, r3, #1
 800d56c:	440b      	add	r3, r1
 800d56e:	3308      	adds	r3, #8
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	4413      	add	r3, r2
 800d574:	3304      	adds	r3, #4
 800d576:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d57a:	69b8      	ldr	r0, [r7, #24]
 800d57c:	f000 f850 	bl	800d620 <USBH_ParseEPDesc>
            ep_ix++;
 800d580:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d584:	3301      	adds	r3, #1
 800d586:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	791b      	ldrb	r3, [r3, #4]
 800d58e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d592:	429a      	cmp	r2, r3
 800d594:	d204      	bcs.n	800d5a0 <USBH_ParseCfgDesc+0x124>
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	885a      	ldrh	r2, [r3, #2]
 800d59a:	8afb      	ldrh	r3, [r7, #22]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d8d0      	bhi.n	800d542 <USBH_ParseCfgDesc+0xc6>
          }
        }
        if_ix++;
 800d5a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d5aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d5ae:	2b0e      	cmp	r3, #14
 800d5b0:	d804      	bhi.n	800d5bc <USBH_ParseCfgDesc+0x140>
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	885a      	ldrh	r2, [r3, #2]
 800d5b6:	8afb      	ldrh	r3, [r7, #22]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d8a2      	bhi.n	800d502 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d5bc:	bf00      	nop
 800d5be:	3728      	adds	r7, #40	; 0x28
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	781a      	ldrb	r2, [r3, #0]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	785a      	ldrb	r2, [r3, #1]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	789a      	ldrb	r2, [r3, #2]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	78da      	ldrb	r2, [r3, #3]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	791a      	ldrb	r2, [r3, #4]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	795a      	ldrb	r2, [r3, #5]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	799a      	ldrb	r2, [r3, #6]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	79da      	ldrb	r2, [r3, #7]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	7a1a      	ldrb	r2, [r3, #8]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	721a      	strb	r2, [r3, #8]
}
 800d616:	bf00      	nop
 800d618:	370c      	adds	r7, #12
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bc80      	pop	{r7}
 800d61e:	4770      	bx	lr

0800d620 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d620:	b480      	push	{r7}
 800d622:	b083      	sub	sp, #12
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	781a      	ldrb	r2, [r3, #0]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	785a      	ldrb	r2, [r3, #1]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	789a      	ldrb	r2, [r3, #2]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	78da      	ldrb	r2, [r3, #3]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	3304      	adds	r3, #4
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	b29a      	uxth	r2, r3
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	3305      	adds	r3, #5
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	b29b      	uxth	r3, r3
 800d65a:	021b      	lsls	r3, r3, #8
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	4313      	orrs	r3, r2
 800d660:	b29a      	uxth	r2, r3
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	799a      	ldrb	r2, [r3, #6]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	719a      	strb	r2, [r3, #6]
}
 800d66e:	bf00      	nop
 800d670:	370c      	adds	r7, #12
 800d672:	46bd      	mov	sp, r7
 800d674:	bc80      	pop	{r7}
 800d676:	4770      	bx	lr

0800d678 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d678:	b480      	push	{r7}
 800d67a:	b087      	sub	sp, #28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	4613      	mov	r3, r2
 800d684:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	3301      	adds	r3, #1
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	2b03      	cmp	r3, #3
 800d68e:	d120      	bne.n	800d6d2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	1e9a      	subs	r2, r3, #2
 800d696:	88fb      	ldrh	r3, [r7, #6]
 800d698:	4293      	cmp	r3, r2
 800d69a:	bf28      	it	cs
 800d69c:	4613      	movcs	r3, r2
 800d69e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	3302      	adds	r3, #2
 800d6a4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	82fb      	strh	r3, [r7, #22]
 800d6aa:	e00b      	b.n	800d6c4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d6ac:	8afb      	ldrh	r3, [r7, #22]
 800d6ae:	68fa      	ldr	r2, [r7, #12]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	781a      	ldrb	r2, [r3, #0]
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d6be:	8afb      	ldrh	r3, [r7, #22]
 800d6c0:	3302      	adds	r3, #2
 800d6c2:	82fb      	strh	r3, [r7, #22]
 800d6c4:	8afa      	ldrh	r2, [r7, #22]
 800d6c6:	8abb      	ldrh	r3, [r7, #20]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d3ef      	bcc.n	800d6ac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	701a      	strb	r2, [r3, #0]
  }
}
 800d6d2:	bf00      	nop
 800d6d4:	371c      	adds	r7, #28
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bc80      	pop	{r7}
 800d6da:	4770      	bx	lr

0800d6dc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	881a      	ldrh	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	4413      	add	r3, r2
 800d6f2:	b29a      	uxth	r2, r3
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4413      	add	r3, r2
 800d702:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d704:	68fb      	ldr	r3, [r7, #12]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3714      	adds	r7, #20
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bc80      	pop	{r7}
 800d70e:	4770      	bx	lr

0800d710 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b086      	sub	sp, #24
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	4613      	mov	r3, r2
 800d71c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d71e:	2301      	movs	r3, #1
 800d720:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	789b      	ldrb	r3, [r3, #2]
 800d726:	2b01      	cmp	r3, #1
 800d728:	d002      	beq.n	800d730 <USBH_CtlReq+0x20>
 800d72a:	2b02      	cmp	r3, #2
 800d72c:	d00f      	beq.n	800d74e <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 800d72e:	e034      	b.n	800d79a <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	88fa      	ldrh	r2, [r7, #6]
 800d73a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2201      	movs	r2, #1
 800d740:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2202      	movs	r2, #2
 800d746:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d748:	2301      	movs	r3, #1
 800d74a:	75fb      	strb	r3, [r7, #23]
      break;
 800d74c:	e025      	b.n	800d79a <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f000 f828 	bl	800d7a4 <USBH_HandleControl>
 800d754:	4603      	mov	r3, r0
 800d756:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800d758:	7dfb      	ldrb	r3, [r7, #23]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d108      	bne.n	800d770 <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2201      	movs	r2, #1
 800d762:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2200      	movs	r2, #0
 800d768:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d76a:	2300      	movs	r3, #0
 800d76c:	75fb      	strb	r3, [r7, #23]
      break;
 800d76e:	e013      	b.n	800d798 <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 800d770:	7dfb      	ldrb	r3, [r7, #23]
 800d772:	2b03      	cmp	r3, #3
 800d774:	d108      	bne.n	800d788 <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2201      	movs	r2, #1
 800d77a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2200      	movs	r2, #0
 800d780:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d782:	2303      	movs	r3, #3
 800d784:	75fb      	strb	r3, [r7, #23]
      break;
 800d786:	e007      	b.n	800d798 <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 800d788:	7dfb      	ldrb	r3, [r7, #23]
 800d78a:	2b02      	cmp	r3, #2
 800d78c:	d104      	bne.n	800d798 <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2201      	movs	r2, #1
 800d792:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800d794:	2302      	movs	r3, #2
 800d796:	75fb      	strb	r3, [r7, #23]
      break;
 800d798:	bf00      	nop
  }
  return status;
 800d79a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3718      	adds	r7, #24
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b086      	sub	sp, #24
 800d7a8:	af02      	add	r7, sp, #8
 800d7aa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	7e1b      	ldrb	r3, [r3, #24]
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	2b0a      	cmp	r3, #10
 800d7bc:	f200 815d 	bhi.w	800da7a <USBH_HandleControl+0x2d6>
 800d7c0:	a201      	add	r2, pc, #4	; (adr r2, 800d7c8 <USBH_HandleControl+0x24>)
 800d7c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c6:	bf00      	nop
 800d7c8:	0800d7f5 	.word	0x0800d7f5
 800d7cc:	0800d80f 	.word	0x0800d80f
 800d7d0:	0800d879 	.word	0x0800d879
 800d7d4:	0800d8a3 	.word	0x0800d8a3
 800d7d8:	0800d8db 	.word	0x0800d8db
 800d7dc:	0800d909 	.word	0x0800d909
 800d7e0:	0800d95b 	.word	0x0800d95b
 800d7e4:	0800d981 	.word	0x0800d981
 800d7e8:	0800d9bd 	.word	0x0800d9bd
 800d7ec:	0800d9e7 	.word	0x0800d9e7
 800d7f0:	0800da25 	.word	0x0800da25
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f103 0110 	add.w	r1, r3, #16
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	795b      	ldrb	r3, [r3, #5]
 800d7fe:	461a      	mov	r2, r3
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 f94f 	bl	800daa4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2202      	movs	r2, #2
 800d80a:	761a      	strb	r2, [r3, #24]
      break;
 800d80c:	e140      	b.n	800da90 <USBH_HandleControl+0x2ec>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	795b      	ldrb	r3, [r3, #5]
 800d812:	4619      	mov	r1, r3
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 fd4b 	bl	800e2b0 <USBH_LL_GetURBState>
 800d81a:	4603      	mov	r3, r0
 800d81c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d81e:	7bbb      	ldrb	r3, [r7, #14]
 800d820:	2b01      	cmp	r3, #1
 800d822:	d11e      	bne.n	800d862 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	7c1b      	ldrb	r3, [r3, #16]
 800d828:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d82c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	8adb      	ldrh	r3, [r3, #22]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d00a      	beq.n	800d84c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d836:	7b7b      	ldrb	r3, [r7, #13]
 800d838:	2b80      	cmp	r3, #128	; 0x80
 800d83a:	d103      	bne.n	800d844 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2203      	movs	r2, #3
 800d840:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d842:	e11c      	b.n	800da7e <USBH_HandleControl+0x2da>
            phost->Control.state = CTRL_DATA_OUT;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2205      	movs	r2, #5
 800d848:	761a      	strb	r2, [r3, #24]
      break;
 800d84a:	e118      	b.n	800da7e <USBH_HandleControl+0x2da>
          if (direction == USB_D2H)
 800d84c:	7b7b      	ldrb	r3, [r7, #13]
 800d84e:	2b80      	cmp	r3, #128	; 0x80
 800d850:	d103      	bne.n	800d85a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2209      	movs	r2, #9
 800d856:	761a      	strb	r2, [r3, #24]
      break;
 800d858:	e111      	b.n	800da7e <USBH_HandleControl+0x2da>
            phost->Control.state = CTRL_STATUS_IN;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2207      	movs	r2, #7
 800d85e:	761a      	strb	r2, [r3, #24]
      break;
 800d860:	e10d      	b.n	800da7e <USBH_HandleControl+0x2da>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d862:	7bbb      	ldrb	r3, [r7, #14]
 800d864:	2b04      	cmp	r3, #4
 800d866:	d003      	beq.n	800d870 <USBH_HandleControl+0xcc>
 800d868:	7bbb      	ldrb	r3, [r7, #14]
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	f040 8107 	bne.w	800da7e <USBH_HandleControl+0x2da>
          phost->Control.state = CTRL_ERROR;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	220b      	movs	r2, #11
 800d874:	761a      	strb	r2, [r3, #24]
      break;
 800d876:	e102      	b.n	800da7e <USBH_HandleControl+0x2da>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d87e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800d882:	b29a      	uxth	r2, r3
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6899      	ldr	r1, [r3, #8]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	899a      	ldrh	r2, [r3, #12]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	791b      	ldrb	r3, [r3, #4]
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 f944 	bl	800db22 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2204      	movs	r2, #4
 800d89e:	761a      	strb	r2, [r3, #24]
      break;
 800d8a0:	e0f6      	b.n	800da90 <USBH_HandleControl+0x2ec>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	791b      	ldrb	r3, [r3, #4]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 fd01 	bl	800e2b0 <USBH_LL_GetURBState>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d8b2:	7bbb      	ldrb	r3, [r7, #14]
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d102      	bne.n	800d8be <USBH_HandleControl+0x11a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2209      	movs	r2, #9
 800d8bc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d8be:	7bbb      	ldrb	r3, [r7, #14]
 800d8c0:	2b05      	cmp	r3, #5
 800d8c2:	d102      	bne.n	800d8ca <USBH_HandleControl+0x126>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d8c4:	2303      	movs	r3, #3
 800d8c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d8c8:	e0db      	b.n	800da82 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800d8ca:	7bbb      	ldrb	r3, [r7, #14]
 800d8cc:	2b04      	cmp	r3, #4
 800d8ce:	f040 80d8 	bne.w	800da82 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	220b      	movs	r2, #11
 800d8d6:	761a      	strb	r2, [r3, #24]
      break;
 800d8d8:	e0d3      	b.n	800da82 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6899      	ldr	r1, [r3, #8]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	899a      	ldrh	r2, [r3, #12]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	795b      	ldrb	r3, [r3, #5]
 800d8e6:	2001      	movs	r0, #1
 800d8e8:	9000      	str	r0, [sp, #0]
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 f8f4 	bl	800dad8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8f6:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2206      	movs	r2, #6
 800d904:	761a      	strb	r2, [r3, #24]
      break;
 800d906:	e0c3      	b.n	800da90 <USBH_HandleControl+0x2ec>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	795b      	ldrb	r3, [r3, #5]
 800d90c:	4619      	mov	r1, r3
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 fcce 	bl	800e2b0 <USBH_LL_GetURBState>
 800d914:	4603      	mov	r3, r0
 800d916:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d918:	7bbb      	ldrb	r3, [r7, #14]
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d103      	bne.n	800d926 <USBH_HandleControl+0x182>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2207      	movs	r2, #7
 800d922:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d924:	e0af      	b.n	800da86 <USBH_HandleControl+0x2e2>
      else if (URB_Status == USBH_URB_STALL)
 800d926:	7bbb      	ldrb	r3, [r7, #14]
 800d928:	2b05      	cmp	r3, #5
 800d92a:	d105      	bne.n	800d938 <USBH_HandleControl+0x194>
        phost->Control.state = CTRL_STALLED;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	220c      	movs	r2, #12
 800d930:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d932:	2303      	movs	r3, #3
 800d934:	73fb      	strb	r3, [r7, #15]
      break;
 800d936:	e0a6      	b.n	800da86 <USBH_HandleControl+0x2e2>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d938:	7bbb      	ldrb	r3, [r7, #14]
 800d93a:	2b02      	cmp	r3, #2
 800d93c:	d103      	bne.n	800d946 <USBH_HandleControl+0x1a2>
        phost->Control.state = CTRL_DATA_OUT;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2205      	movs	r2, #5
 800d942:	761a      	strb	r2, [r3, #24]
      break;
 800d944:	e09f      	b.n	800da86 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800d946:	7bbb      	ldrb	r3, [r7, #14]
 800d948:	2b04      	cmp	r3, #4
 800d94a:	f040 809c 	bne.w	800da86 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	220b      	movs	r2, #11
 800d952:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d954:	2302      	movs	r3, #2
 800d956:	73fb      	strb	r3, [r7, #15]
      break;
 800d958:	e095      	b.n	800da86 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	791b      	ldrb	r3, [r3, #4]
 800d95e:	2200      	movs	r2, #0
 800d960:	2100      	movs	r1, #0
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 f8dd 	bl	800db22 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d96e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800d972:	b29a      	uxth	r2, r3
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2208      	movs	r2, #8
 800d97c:	761a      	strb	r2, [r3, #24]

      break;
 800d97e:	e087      	b.n	800da90 <USBH_HandleControl+0x2ec>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	791b      	ldrb	r3, [r3, #4]
 800d984:	4619      	mov	r1, r3
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 fc92 	bl	800e2b0 <USBH_LL_GetURBState>
 800d98c:	4603      	mov	r3, r0
 800d98e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d990:	7bbb      	ldrb	r3, [r7, #14]
 800d992:	2b01      	cmp	r3, #1
 800d994:	d105      	bne.n	800d9a2 <USBH_HandleControl+0x1fe>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	220d      	movs	r2, #13
 800d99a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d99c:	2300      	movs	r3, #0
 800d99e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d9a0:	e073      	b.n	800da8a <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_ERROR)
 800d9a2:	7bbb      	ldrb	r3, [r7, #14]
 800d9a4:	2b04      	cmp	r3, #4
 800d9a6:	d103      	bne.n	800d9b0 <USBH_HandleControl+0x20c>
        phost->Control.state = CTRL_ERROR;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	220b      	movs	r2, #11
 800d9ac:	761a      	strb	r2, [r3, #24]
      break;
 800d9ae:	e06c      	b.n	800da8a <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_STALL)
 800d9b0:	7bbb      	ldrb	r3, [r7, #14]
 800d9b2:	2b05      	cmp	r3, #5
 800d9b4:	d169      	bne.n	800da8a <USBH_HandleControl+0x2e6>
          status = USBH_NOT_SUPPORTED;
 800d9b6:	2303      	movs	r3, #3
 800d9b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d9ba:	e066      	b.n	800da8a <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	795b      	ldrb	r3, [r3, #5]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	9200      	str	r2, [sp, #0]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	2100      	movs	r1, #0
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 f885 	bl	800dad8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9d4:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800d9d8:	b29a      	uxth	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	220a      	movs	r2, #10
 800d9e2:	761a      	strb	r2, [r3, #24]
      break;
 800d9e4:	e054      	b.n	800da90 <USBH_HandleControl+0x2ec>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	795b      	ldrb	r3, [r3, #5]
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 fc5f 	bl	800e2b0 <USBH_LL_GetURBState>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d9f6:	7bbb      	ldrb	r3, [r7, #14]
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d105      	bne.n	800da08 <USBH_HandleControl+0x264>
      {
        status = USBH_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	220d      	movs	r2, #13
 800da04:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800da06:	e042      	b.n	800da8e <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_NOTREADY)
 800da08:	7bbb      	ldrb	r3, [r7, #14]
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	d103      	bne.n	800da16 <USBH_HandleControl+0x272>
        phost->Control.state = CTRL_STATUS_OUT;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2209      	movs	r2, #9
 800da12:	761a      	strb	r2, [r3, #24]
      break;
 800da14:	e03b      	b.n	800da8e <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_ERROR)
 800da16:	7bbb      	ldrb	r3, [r7, #14]
 800da18:	2b04      	cmp	r3, #4
 800da1a:	d138      	bne.n	800da8e <USBH_HandleControl+0x2ea>
          phost->Control.state = CTRL_ERROR;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	220b      	movs	r2, #11
 800da20:	761a      	strb	r2, [r3, #24]
      break;
 800da22:	e034      	b.n	800da8e <USBH_HandleControl+0x2ea>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	7e5b      	ldrb	r3, [r3, #25]
 800da28:	3301      	adds	r3, #1
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	765a      	strb	r2, [r3, #25]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	7e5b      	ldrb	r3, [r3, #25]
 800da34:	2b02      	cmp	r3, #2
 800da36:	d806      	bhi.n	800da46 <USBH_HandleControl+0x2a2>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2201      	movs	r2, #1
 800da42:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800da44:	e024      	b.n	800da90 <USBH_HandleControl+0x2ec>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da4c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800da50:	2106      	movs	r1, #6
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2200      	movs	r2, #0
 800da5a:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800da5c:	480f      	ldr	r0, [pc, #60]	; (800da9c <USBH_HandleControl+0x2f8>)
 800da5e:	f005 f89d 	bl	8012b9c <iprintf>
 800da62:	480f      	ldr	r0, [pc, #60]	; (800daa0 <USBH_HandleControl+0x2fc>)
 800da64:	f005 f89a 	bl	8012b9c <iprintf>
 800da68:	200a      	movs	r0, #10
 800da6a:	f005 f8af 	bl	8012bcc <putchar>
        phost->gState = HOST_IDLE;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800da74:	2302      	movs	r3, #2
 800da76:	73fb      	strb	r3, [r7, #15]
      break;
 800da78:	e00a      	b.n	800da90 <USBH_HandleControl+0x2ec>

    default:
      break;
 800da7a:	bf00      	nop
 800da7c:	e008      	b.n	800da90 <USBH_HandleControl+0x2ec>
      break;
 800da7e:	bf00      	nop
 800da80:	e006      	b.n	800da90 <USBH_HandleControl+0x2ec>
      break;
 800da82:	bf00      	nop
 800da84:	e004      	b.n	800da90 <USBH_HandleControl+0x2ec>
      break;
 800da86:	bf00      	nop
 800da88:	e002      	b.n	800da90 <USBH_HandleControl+0x2ec>
      break;
 800da8a:	bf00      	nop
 800da8c:	e000      	b.n	800da90 <USBH_HandleControl+0x2ec>
      break;
 800da8e:	bf00      	nop
  }

  return status;
 800da90:	7bfb      	ldrb	r3, [r7, #15]
}
 800da92:	4618      	mov	r0, r3
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	080144d0 	.word	0x080144d0
 800daa0:	080144d8 	.word	0x080144d8

0800daa4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b088      	sub	sp, #32
 800daa8:	af04      	add	r7, sp, #16
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	4613      	mov	r3, r2
 800dab0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dab2:	79f9      	ldrb	r1, [r7, #7]
 800dab4:	2300      	movs	r3, #0
 800dab6:	9303      	str	r3, [sp, #12]
 800dab8:	2308      	movs	r3, #8
 800daba:	9302      	str	r3, [sp, #8]
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	9301      	str	r3, [sp, #4]
 800dac0:	2300      	movs	r3, #0
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	2300      	movs	r3, #0
 800dac6:	2200      	movs	r2, #0
 800dac8:	68f8      	ldr	r0, [r7, #12]
 800daca:	f000 fbbe 	bl	800e24a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800dace:	2300      	movs	r3, #0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b088      	sub	sp, #32
 800dadc:	af04      	add	r7, sp, #16
 800dade:	60f8      	str	r0, [r7, #12]
 800dae0:	60b9      	str	r1, [r7, #8]
 800dae2:	4611      	mov	r1, r2
 800dae4:	461a      	mov	r2, r3
 800dae6:	460b      	mov	r3, r1
 800dae8:	80fb      	strh	r3, [r7, #6]
 800daea:	4613      	mov	r3, r2
 800daec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d001      	beq.n	800dafc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800daf8:	2300      	movs	r3, #0
 800dafa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dafc:	7979      	ldrb	r1, [r7, #5]
 800dafe:	7e3b      	ldrb	r3, [r7, #24]
 800db00:	9303      	str	r3, [sp, #12]
 800db02:	88fb      	ldrh	r3, [r7, #6]
 800db04:	9302      	str	r3, [sp, #8]
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	9301      	str	r3, [sp, #4]
 800db0a:	2301      	movs	r3, #1
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	2300      	movs	r3, #0
 800db10:	2200      	movs	r2, #0
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	f000 fb99 	bl	800e24a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}

0800db22 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800db22:	b580      	push	{r7, lr}
 800db24:	b088      	sub	sp, #32
 800db26:	af04      	add	r7, sp, #16
 800db28:	60f8      	str	r0, [r7, #12]
 800db2a:	60b9      	str	r1, [r7, #8]
 800db2c:	4611      	mov	r1, r2
 800db2e:	461a      	mov	r2, r3
 800db30:	460b      	mov	r3, r1
 800db32:	80fb      	strh	r3, [r7, #6]
 800db34:	4613      	mov	r3, r2
 800db36:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800db38:	7979      	ldrb	r1, [r7, #5]
 800db3a:	2300      	movs	r3, #0
 800db3c:	9303      	str	r3, [sp, #12]
 800db3e:	88fb      	ldrh	r3, [r7, #6]
 800db40:	9302      	str	r3, [sp, #8]
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	2301      	movs	r3, #1
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	2300      	movs	r3, #0
 800db4c:	2201      	movs	r2, #1
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f000 fb7b 	bl	800e24a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800db54:	2300      	movs	r3, #0

}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b088      	sub	sp, #32
 800db62:	af04      	add	r7, sp, #16
 800db64:	60f8      	str	r0, [r7, #12]
 800db66:	60b9      	str	r1, [r7, #8]
 800db68:	4611      	mov	r1, r2
 800db6a:	461a      	mov	r2, r3
 800db6c:	460b      	mov	r3, r1
 800db6e:	80fb      	strh	r3, [r7, #6]
 800db70:	4613      	mov	r3, r2
 800db72:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f893 391d 	ldrb.w	r3, [r3, #2333]	; 0x91d
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d001      	beq.n	800db82 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800db7e:	2300      	movs	r3, #0
 800db80:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800db82:	7979      	ldrb	r1, [r7, #5]
 800db84:	7e3b      	ldrb	r3, [r7, #24]
 800db86:	9303      	str	r3, [sp, #12]
 800db88:	88fb      	ldrh	r3, [r7, #6]
 800db8a:	9302      	str	r3, [sp, #8]
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	9301      	str	r3, [sp, #4]
 800db90:	2301      	movs	r3, #1
 800db92:	9300      	str	r3, [sp, #0]
 800db94:	2302      	movs	r3, #2
 800db96:	2200      	movs	r2, #0
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	f000 fb56 	bl	800e24a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	af04      	add	r7, sp, #16
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	80fb      	strh	r3, [r7, #6]
 800dbba:	4613      	mov	r3, r2
 800dbbc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dbbe:	7979      	ldrb	r1, [r7, #5]
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	9303      	str	r3, [sp, #12]
 800dbc4:	88fb      	ldrh	r3, [r7, #6]
 800dbc6:	9302      	str	r3, [sp, #8]
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	9301      	str	r3, [sp, #4]
 800dbcc:	2301      	movs	r3, #1
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f000 fb38 	bl	800e24a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dbda:	2300      	movs	r3, #0
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3710      	adds	r7, #16
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b088      	sub	sp, #32
 800dbe8:	af04      	add	r7, sp, #16
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	4611      	mov	r1, r2
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	71fb      	strb	r3, [r7, #7]
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dbfa:	79fb      	ldrb	r3, [r7, #7]
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	79b9      	ldrb	r1, [r7, #6]
 800dc00:	2200      	movs	r2, #0
 800dc02:	9203      	str	r2, [sp, #12]
 800dc04:	9302      	str	r3, [sp, #8]
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	9301      	str	r3, [sp, #4]
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	2303      	movs	r3, #3
 800dc10:	2201      	movs	r2, #1
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	f000 fb19 	bl	800e24a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3710      	adds	r7, #16
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}

0800dc22 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b088      	sub	sp, #32
 800dc26:	af04      	add	r7, sp, #16
 800dc28:	60f8      	str	r0, [r7, #12]
 800dc2a:	60b9      	str	r1, [r7, #8]
 800dc2c:	607a      	str	r2, [r7, #4]
 800dc2e:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	78f9      	ldrb	r1, [r7, #3]
 800dc36:	2200      	movs	r2, #0
 800dc38:	9203      	str	r2, [sp, #12]
 800dc3a:	9302      	str	r3, [sp, #8]
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	9301      	str	r3, [sp, #4]
 800dc40:	2301      	movs	r3, #1
 800dc42:	9300      	str	r3, [sp, #0]
 800dc44:	2301      	movs	r3, #1
 800dc46:	2200      	movs	r2, #0
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	f000 fafe 	bl	800e24a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b086      	sub	sp, #24
 800dc5c:	af04      	add	r7, sp, #16
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	4608      	mov	r0, r1
 800dc62:	4611      	mov	r1, r2
 800dc64:	461a      	mov	r2, r3
 800dc66:	4603      	mov	r3, r0
 800dc68:	70fb      	strb	r3, [r7, #3]
 800dc6a:	460b      	mov	r3, r1
 800dc6c:	70bb      	strb	r3, [r7, #2]
 800dc6e:	4613      	mov	r3, r2
 800dc70:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800dc72:	7878      	ldrb	r0, [r7, #1]
 800dc74:	78ba      	ldrb	r2, [r7, #2]
 800dc76:	78f9      	ldrb	r1, [r7, #3]
 800dc78:	8b3b      	ldrh	r3, [r7, #24]
 800dc7a:	9302      	str	r3, [sp, #8]
 800dc7c:	7d3b      	ldrb	r3, [r7, #20]
 800dc7e:	9301      	str	r3, [sp, #4]
 800dc80:	7c3b      	ldrb	r3, [r7, #16]
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	4603      	mov	r3, r0
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 fa8d 	bl	800e1a6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3708      	adds	r7, #8
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b082      	sub	sp, #8
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
 800dc9e:	460b      	mov	r3, r1
 800dca0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800dca2:	78fb      	ldrb	r3, [r7, #3]
 800dca4:	4619      	mov	r1, r3
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 faae 	bl	800e208 <USBH_LL_ClosePipe>

  return USBH_OK;
 800dcac:	2300      	movs	r3, #0
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3708      	adds	r7, #8
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b084      	sub	sp, #16
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 f838 	bl	800dd38 <USBH_GetFreePipe>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800dccc:	89fb      	ldrh	r3, [r7, #14]
 800dcce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d00b      	beq.n	800dcee <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800dcd6:	78fa      	ldrb	r2, [r7, #3]
 800dcd8:	89fb      	ldrh	r3, [r7, #14]
 800dcda:	f003 030f 	and.w	r3, r3, #15
 800dcde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dce2:	6879      	ldr	r1, [r7, #4]
 800dce4:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	440b      	add	r3, r1
 800dcec:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800dcee:	89fb      	ldrh	r3, [r7, #14]
 800dcf0:	b2db      	uxtb	r3, r3
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}

0800dcfa <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800dcfa:	b480      	push	{r7}
 800dcfc:	b083      	sub	sp, #12
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
 800dd02:	460b      	mov	r3, r1
 800dd04:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800dd06:	78fb      	ldrb	r3, [r7, #3]
 800dd08:	2b0a      	cmp	r3, #10
 800dd0a:	d80f      	bhi.n	800dd2c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800dd0c:	78fb      	ldrb	r3, [r7, #3]
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4413      	add	r3, r2
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	78fb      	ldrb	r3, [r7, #3]
 800dd1c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800dd20:	6879      	ldr	r1, [r7, #4]
 800dd22:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	440b      	add	r3, r1
 800dd2a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	370c      	adds	r7, #12
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bc80      	pop	{r7}
 800dd36:	4770      	bx	lr

0800dd38 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800dd40:	2300      	movs	r3, #0
 800dd42:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800dd44:	2300      	movs	r3, #0
 800dd46:	73fb      	strb	r3, [r7, #15]
 800dd48:	e010      	b.n	800dd6c <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800dd4a:	7bfb      	ldrb	r3, [r7, #15]
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4413      	add	r3, r2
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d102      	bne.n	800dd66 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800dd60:	7bfb      	ldrb	r3, [r7, #15]
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	e007      	b.n	800dd76 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 800dd66:	7bfb      	ldrb	r3, [r7, #15]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	73fb      	strb	r3, [r7, #15]
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	2b0a      	cmp	r3, #10
 800dd70:	d9eb      	bls.n	800dd4a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800dd72:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3714      	adds	r7, #20
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bc80      	pop	{r7}
 800dd7e:	4770      	bx	lr

0800dd80 <USBH_CDC_ReceiveCallback>:



int flag = 1;
void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 800dd88:	2201      	movs	r2, #1
 800dd8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800dd8e:	4805      	ldr	r0, [pc, #20]	; (800dda4 <USBH_CDC_ReceiveCallback+0x24>)
 800dd90:	f7f3 fcac 	bl	80016ec <HAL_GPIO_WritePin>
	flag = 1;
 800dd94:	4b04      	ldr	r3, [pc, #16]	; (800dda8 <USBH_CDC_ReceiveCallback+0x28>)
 800dd96:	2201      	movs	r2, #1
 800dd98:	601a      	str	r2, [r3, #0]
}
 800dd9a:	bf00      	nop
 800dd9c:	3708      	adds	r7, #8
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	40011400 	.word	0x40011400
 800dda8:	200000b0 	.word	0x200000b0

0800ddac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	4920      	ldr	r1, [pc, #128]	; (800de34 <MX_USB_HOST_Init+0x88>)
 800ddb4:	4820      	ldr	r0, [pc, #128]	; (800de38 <MX_USB_HOST_Init+0x8c>)
 800ddb6:	f7fe fb5d 	bl	800c474 <USBH_Init>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d001      	beq.n	800ddc4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ddc0:	f7f2 fe60 	bl	8000a84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 800ddc4:	491d      	ldr	r1, [pc, #116]	; (800de3c <MX_USB_HOST_Init+0x90>)
 800ddc6:	481c      	ldr	r0, [pc, #112]	; (800de38 <MX_USB_HOST_Init+0x8c>)
 800ddc8:	f7fe fbf8 	bl	800c5bc <USBH_RegisterClass>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d001      	beq.n	800ddd6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ddd2:	f7f2 fe57 	bl	8000a84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ddd6:	491a      	ldr	r1, [pc, #104]	; (800de40 <MX_USB_HOST_Init+0x94>)
 800ddd8:	4817      	ldr	r0, [pc, #92]	; (800de38 <MX_USB_HOST_Init+0x8c>)
 800ddda:	f7fe fbef 	bl	800c5bc <USBH_RegisterClass>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <MX_USB_HOST_Init+0x3c>
  {
    Error_Handler();
 800dde4:	f7f2 fe4e 	bl	8000a84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800dde8:	4916      	ldr	r1, [pc, #88]	; (800de44 <MX_USB_HOST_Init+0x98>)
 800ddea:	4813      	ldr	r0, [pc, #76]	; (800de38 <MX_USB_HOST_Init+0x8c>)
 800ddec:	f7fe fbe6 	bl	800c5bc <USBH_RegisterClass>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d001      	beq.n	800ddfa <MX_USB_HOST_Init+0x4e>
  {
    Error_Handler();
 800ddf6:	f7f2 fe45 	bl	8000a84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800ddfa:	4913      	ldr	r1, [pc, #76]	; (800de48 <MX_USB_HOST_Init+0x9c>)
 800ddfc:	480e      	ldr	r0, [pc, #56]	; (800de38 <MX_USB_HOST_Init+0x8c>)
 800ddfe:	f7fe fbdd 	bl	800c5bc <USBH_RegisterClass>
 800de02:	4603      	mov	r3, r0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d001      	beq.n	800de0c <MX_USB_HOST_Init+0x60>
  {
    Error_Handler();
 800de08:	f7f2 fe3c 	bl	8000a84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MTP_CLASS) != USBH_OK)
 800de0c:	490f      	ldr	r1, [pc, #60]	; (800de4c <MX_USB_HOST_Init+0xa0>)
 800de0e:	480a      	ldr	r0, [pc, #40]	; (800de38 <MX_USB_HOST_Init+0x8c>)
 800de10:	f7fe fbd4 	bl	800c5bc <USBH_RegisterClass>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	d001      	beq.n	800de1e <MX_USB_HOST_Init+0x72>
  {
    Error_Handler();
 800de1a:	f7f2 fe33 	bl	8000a84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800de1e:	4806      	ldr	r0, [pc, #24]	; (800de38 <MX_USB_HOST_Init+0x8c>)
 800de20:	f7fe fcf7 	bl	800c812 <USBH_Start>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <MX_USB_HOST_Init+0x82>
  {
    Error_Handler();
 800de2a:	f7f2 fe2b 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800de2e:	bf00      	nop
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	0800de65 	.word	0x0800de65
 800de38:	20000b68 	.word	0x20000b68
 800de3c:	20000010 	.word	0x20000010
 800de40:	20000030 	.word	0x20000030
 800de44:	20000070 	.word	0x20000070
 800de48:	20000050 	.word	0x20000050
 800de4c:	20000090 	.word	0x20000090

0800de50 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800de54:	4802      	ldr	r0, [pc, #8]	; (800de60 <MX_USB_HOST_Process+0x10>)
 800de56:	f7fe fced 	bl	800c834 <USBH_Process>
}
 800de5a:	bf00      	nop
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	20000b68 	.word	0x20000b68

0800de64 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	460b      	mov	r3, r1
 800de6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
	  switch(id)
 800de70:	78fb      	ldrb	r3, [r7, #3]
 800de72:	3b01      	subs	r3, #1
 800de74:	2b04      	cmp	r3, #4
 800de76:	d837      	bhi.n	800dee8 <USBH_UserProcess+0x84>
 800de78:	a201      	add	r2, pc, #4	; (adr r2, 800de80 <USBH_UserProcess+0x1c>)
 800de7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de7e:	bf00      	nop
 800de80:	0800dee9 	.word	0x0800dee9
 800de84:	0800dea3 	.word	0x0800dea3
 800de88:	0800dee9 	.word	0x0800dee9
 800de8c:	0800deb1 	.word	0x0800deb1
 800de90:	0800de95 	.word	0x0800de95
	    {
	    case HOST_USER_SELECT_CONFIGURATION:
	    break;

	    case HOST_USER_DISCONNECTION:
	    Appli_state = APPLICATION_DISCONNECT;
 800de94:	4b17      	ldr	r3, [pc, #92]	; (800def4 <USBH_UserProcess+0x90>)
 800de96:	2203      	movs	r2, #3
 800de98:	701a      	strb	r2, [r3, #0]
	    UARTPrint("APPLICATION_DISCONNECT\r\n");
 800de9a:	4817      	ldr	r0, [pc, #92]	; (800def8 <USBH_UserProcess+0x94>)
 800de9c:	f7f2 fc4c 	bl	8000738 <UARTPrint>

	    break;
 800dea0:	e023      	b.n	800deea <USBH_UserProcess+0x86>

	    case HOST_USER_CLASS_ACTIVE:
	    Appli_state = APPLICATION_READY;
 800dea2:	4b14      	ldr	r3, [pc, #80]	; (800def4 <USBH_UserProcess+0x90>)
 800dea4:	2202      	movs	r2, #2
 800dea6:	701a      	strb	r2, [r3, #0]
	    UARTPrint("APPLICATION_READY\r\n");
 800dea8:	4814      	ldr	r0, [pc, #80]	; (800defc <USBH_UserProcess+0x98>)
 800deaa:	f7f2 fc45 	bl	8000738 <UARTPrint>

	    break;
 800deae:	e01c      	b.n	800deea <USBH_UserProcess+0x86>

	    case HOST_USER_CONNECTION:
	    Appli_state = APPLICATION_START;
 800deb0:	4b10      	ldr	r3, [pc, #64]	; (800def4 <USBH_UserProcess+0x90>)
 800deb2:	2201      	movs	r2, #1
 800deb4:	701a      	strb	r2, [r3, #0]
	    UARTPrint("APPLICATION_START\r\n");
 800deb6:	4812      	ldr	r0, [pc, #72]	; (800df00 <USBH_UserProcess+0x9c>)
 800deb8:	f7f2 fc3e 	bl	8000738 <UARTPrint>
	    UARTPrint("idVendor= %d",phost->device.DevDesc.idVendor);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8b3 392c 	ldrh.w	r3, [r3, #2348]	; 0x92c
 800dec2:	4619      	mov	r1, r3
 800dec4:	480f      	ldr	r0, [pc, #60]	; (800df04 <USBH_UserProcess+0xa0>)
 800dec6:	f7f2 fc37 	bl	8000738 <UARTPrint>
	    UARTPrint("idProduct= %d",phost->device.DevDesc.idProduct);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8b3 392e 	ldrh.w	r3, [r3, #2350]	; 0x92e
 800ded0:	4619      	mov	r1, r3
 800ded2:	480d      	ldr	r0, [pc, #52]	; (800df08 <USBH_UserProcess+0xa4>)
 800ded4:	f7f2 fc30 	bl	8000738 <UARTPrint>
	    UARTPrint("decs=%d",phost->device.DevDesc.bDescriptorType);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f893 3925 	ldrb.w	r3, [r3, #2341]	; 0x925
 800dede:	4619      	mov	r1, r3
 800dee0:	480a      	ldr	r0, [pc, #40]	; (800df0c <USBH_UserProcess+0xa8>)
 800dee2:	f7f2 fc29 	bl	8000738 <UARTPrint>

	    break;
 800dee6:	e000      	b.n	800deea <USBH_UserProcess+0x86>

	    default:
	    break;
 800dee8:	bf00      	nop
	    }
  /* USER CODE END CALL_BACK_1 */
}
 800deea:	bf00      	nop
 800deec:	3708      	adds	r7, #8
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	20001cdc 	.word	0x20001cdc
 800def8:	08014500 	.word	0x08014500
 800defc:	0801451c 	.word	0x0801451c
 800df00:	08014530 	.word	0x08014530
 800df04:	08014544 	.word	0x08014544
 800df08:	08014554 	.word	0x08014554
 800df0c:	08014564 	.word	0x08014564

0800df10 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800df20:	d113      	bne.n	800df4a <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800df22:	4b0c      	ldr	r3, [pc, #48]	; (800df54 <HAL_HCD_MspInit+0x44>)
 800df24:	695b      	ldr	r3, [r3, #20]
 800df26:	4a0b      	ldr	r2, [pc, #44]	; (800df54 <HAL_HCD_MspInit+0x44>)
 800df28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800df2c:	6153      	str	r3, [r2, #20]
 800df2e:	4b09      	ldr	r3, [pc, #36]	; (800df54 <HAL_HCD_MspInit+0x44>)
 800df30:	695b      	ldr	r3, [r3, #20]
 800df32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800df36:	60fb      	str	r3, [r7, #12]
 800df38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800df3a:	2200      	movs	r2, #0
 800df3c:	2100      	movs	r1, #0
 800df3e:	2043      	movs	r0, #67	; 0x43
 800df40:	f7f3 f8e3 	bl	800110a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800df44:	2043      	movs	r0, #67	; 0x43
 800df46:	f7f3 f8fc 	bl	8001142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800df4a:	bf00      	nop
 800df4c:	3710      	adds	r7, #16
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	40021000 	.word	0x40021000

0800df58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800df66:	4618      	mov	r0, r3
 800df68:	f7ff f831 	bl	800cfce <USBH_LL_IncTimer>
}
 800df6c:	bf00      	nop
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800df82:	4618      	mov	r0, r3
 800df84:	f7ff f86f 	bl	800d066 <USBH_LL_Connect>
}
 800df88:	bf00      	nop
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7ff f877 	bl	800d092 <USBH_LL_Disconnect>
}
 800dfa4:	bf00      	nop
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	70fb      	strb	r3, [r7, #3]
 800dfb8:	4613      	mov	r3, r2
 800dfba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bc80      	pop	{r7}
 800dfc4:	4770      	bx	lr

0800dfc6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfc6:	b580      	push	{r7, lr}
 800dfc8:	b082      	sub	sp, #8
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7ff f82c 	bl	800d032 <USBH_LL_PortEnabled>
}
 800dfda:	bf00      	nop
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b082      	sub	sp, #8
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7ff f82b 	bl	800d04c <USBH_LL_PortDisabled>
}
 800dff6:	bf00      	nop
 800dff8:	3708      	adds	r7, #8
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
	...

0800e000 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e00e:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 800e012:	2b01      	cmp	r3, #1
 800e014:	d12a      	bne.n	800e06c <USBH_LL_Init+0x6c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e016:	4a18      	ldr	r2, [pc, #96]	; (800e078 <USBH_LL_Init+0x78>)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e024:	461a      	mov	r2, r3
 800e026:	4b14      	ldr	r3, [pc, #80]	; (800e078 <USBH_LL_Init+0x78>)
 800e028:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e02c:	4b12      	ldr	r3, [pc, #72]	; (800e078 <USBH_LL_Init+0x78>)
 800e02e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e032:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e034:	4b10      	ldr	r3, [pc, #64]	; (800e078 <USBH_LL_Init+0x78>)
 800e036:	2208      	movs	r2, #8
 800e038:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_LOW;
 800e03a:	4b0f      	ldr	r3, [pc, #60]	; (800e078 <USBH_LL_Init+0x78>)
 800e03c:	2201      	movs	r2, #1
 800e03e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e040:	4b0d      	ldr	r3, [pc, #52]	; (800e078 <USBH_LL_Init+0x78>)
 800e042:	2202      	movs	r2, #2
 800e044:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e046:	4b0c      	ldr	r3, [pc, #48]	; (800e078 <USBH_LL_Init+0x78>)
 800e048:	2200      	movs	r2, #0
 800e04a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e04c:	480a      	ldr	r0, [pc, #40]	; (800e078 <USBH_LL_Init+0x78>)
 800e04e:	f7f3 fb65 	bl	800171c <HAL_HCD_Init>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d001      	beq.n	800e05c <USBH_LL_Init+0x5c>
  {
    Error_Handler( );
 800e058:	f7f2 fd14 	bl	8000a84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e05c:	4806      	ldr	r0, [pc, #24]	; (800e078 <USBH_LL_Init+0x78>)
 800e05e:	f7f3 ff3b 	bl	8001ed8 <HAL_HCD_GetCurrentFrame>
 800e062:	4603      	mov	r3, r0
 800e064:	4619      	mov	r1, r3
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f7fe ffa0 	bl	800cfac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	20001ce0 	.word	0x20001ce0

0800e07c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e084:	2300      	movs	r3, #0
 800e086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e088:	2300      	movs	r3, #0
 800e08a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e092:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800e096:	4618      	mov	r0, r3
 800e098:	f7f3 feaa 	bl	8001df0 <HAL_HCD_Start>
 800e09c:	4603      	mov	r3, r0
 800e09e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0a0:	7bfb      	ldrb	r3, [r7, #15]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f000 f994 	bl	800e3d0 <USBH_Get_USB_Status>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b084      	sub	sp, #16
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0cc:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7f3 feb0 	bl	8001e36 <HAL_HCD_Stop>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0da:	7bfb      	ldrb	r3, [r7, #15]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f000 f977 	bl	800e3d0 <USBH_Get_USB_Status>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3710      	adds	r7, #16
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e102:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800e106:	4618      	mov	r0, r3
 800e108:	f7f3 fef4 	bl	8001ef4 <HAL_HCD_GetCurrentSpeed>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b02      	cmp	r3, #2
 800e110:	d00c      	beq.n	800e12c <USBH_LL_GetSpeed+0x3c>
 800e112:	2b02      	cmp	r3, #2
 800e114:	d80d      	bhi.n	800e132 <USBH_LL_GetSpeed+0x42>
 800e116:	2b00      	cmp	r3, #0
 800e118:	d002      	beq.n	800e120 <USBH_LL_GetSpeed+0x30>
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d003      	beq.n	800e126 <USBH_LL_GetSpeed+0x36>
 800e11e:	e008      	b.n	800e132 <USBH_LL_GetSpeed+0x42>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e120:	2300      	movs	r3, #0
 800e122:	73fb      	strb	r3, [r7, #15]
    break;
 800e124:	e008      	b.n	800e138 <USBH_LL_GetSpeed+0x48>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e126:	2301      	movs	r3, #1
 800e128:	73fb      	strb	r3, [r7, #15]
    break;
 800e12a:	e005      	b.n	800e138 <USBH_LL_GetSpeed+0x48>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e12c:	2302      	movs	r3, #2
 800e12e:	73fb      	strb	r3, [r7, #15]
    break;
 800e130:	e002      	b.n	800e138 <USBH_LL_GetSpeed+0x48>

  default:
   speed = USBH_SPEED_FULL;
 800e132:	2301      	movs	r3, #1
 800e134:	73fb      	strb	r3, [r7, #15]
    break;
 800e136:	bf00      	nop
  }
  return  speed;
 800e138:	7bfb      	ldrb	r3, [r7, #15]
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3710      	adds	r7, #16
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b084      	sub	sp, #16
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e14a:	2300      	movs	r3, #0
 800e14c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e14e:	2300      	movs	r3, #0
 800e150:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e158:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7f3 fe87 	bl	8001e70 <HAL_HCD_ResetPort>
 800e162:	4603      	mov	r3, r0
 800e164:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e166:	7bfb      	ldrb	r3, [r7, #15]
 800e168:	4618      	mov	r0, r3
 800e16a:	f000 f931 	bl	800e3d0 <USBH_Get_USB_Status>
 800e16e:	4603      	mov	r3, r0
 800e170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e172:	7bbb      	ldrb	r3, [r7, #14]
}
 800e174:	4618      	mov	r0, r3
 800e176:	3710      	adds	r7, #16
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b082      	sub	sp, #8
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	460b      	mov	r3, r1
 800e186:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e18e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800e192:	78fa      	ldrb	r2, [r7, #3]
 800e194:	4611      	mov	r1, r2
 800e196:	4618      	mov	r0, r3
 800e198:	f7f3 fe8b 	bl	8001eb2 <HAL_HCD_HC_GetXferCount>
 800e19c:	4603      	mov	r3, r0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3708      	adds	r7, #8
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e1a6:	b590      	push	{r4, r7, lr}
 800e1a8:	b089      	sub	sp, #36	; 0x24
 800e1aa:	af04      	add	r7, sp, #16
 800e1ac:	6078      	str	r0, [r7, #4]
 800e1ae:	4608      	mov	r0, r1
 800e1b0:	4611      	mov	r1, r2
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	70fb      	strb	r3, [r7, #3]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	70bb      	strb	r3, [r7, #2]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1ce:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 800e1d2:	787c      	ldrb	r4, [r7, #1]
 800e1d4:	78ba      	ldrb	r2, [r7, #2]
 800e1d6:	78f9      	ldrb	r1, [r7, #3]
 800e1d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e1da:	9302      	str	r3, [sp, #8]
 800e1dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e1e0:	9301      	str	r3, [sp, #4]
 800e1e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	4623      	mov	r3, r4
 800e1ea:	f7f3 faf9 	bl	80017e0 <HAL_HCD_HC_Init>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e1f2:	7bfb      	ldrb	r3, [r7, #15]
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f000 f8eb 	bl	800e3d0 <USBH_Get_USB_Status>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800e200:	4618      	mov	r0, r3
 800e202:	3714      	adds	r7, #20
 800e204:	46bd      	mov	sp, r7
 800e206:	bd90      	pop	{r4, r7, pc}

0800e208 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	460b      	mov	r3, r1
 800e212:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e214:	2300      	movs	r3, #0
 800e216:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e218:	2300      	movs	r3, #0
 800e21a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e222:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800e226:	78fa      	ldrb	r2, [r7, #3]
 800e228:	4611      	mov	r1, r2
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7f3 fb67 	bl	80018fe <HAL_HCD_HC_Halt>
 800e230:	4603      	mov	r3, r0
 800e232:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e234:	7bfb      	ldrb	r3, [r7, #15]
 800e236:	4618      	mov	r0, r3
 800e238:	f000 f8ca 	bl	800e3d0 <USBH_Get_USB_Status>
 800e23c:	4603      	mov	r3, r0
 800e23e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e240:	7bbb      	ldrb	r3, [r7, #14]
}
 800e242:	4618      	mov	r0, r3
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}

0800e24a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e24a:	b590      	push	{r4, r7, lr}
 800e24c:	b089      	sub	sp, #36	; 0x24
 800e24e:	af04      	add	r7, sp, #16
 800e250:	6078      	str	r0, [r7, #4]
 800e252:	4608      	mov	r0, r1
 800e254:	4611      	mov	r1, r2
 800e256:	461a      	mov	r2, r3
 800e258:	4603      	mov	r3, r0
 800e25a:	70fb      	strb	r3, [r7, #3]
 800e25c:	460b      	mov	r3, r1
 800e25e:	70bb      	strb	r3, [r7, #2]
 800e260:	4613      	mov	r3, r2
 800e262:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e264:	2300      	movs	r3, #0
 800e266:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e268:	2300      	movs	r3, #0
 800e26a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e272:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 800e276:	787c      	ldrb	r4, [r7, #1]
 800e278:	78ba      	ldrb	r2, [r7, #2]
 800e27a:	78f9      	ldrb	r1, [r7, #3]
 800e27c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e280:	9303      	str	r3, [sp, #12]
 800e282:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e284:	9302      	str	r3, [sp, #8]
 800e286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e288:	9301      	str	r3, [sp, #4]
 800e28a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	4623      	mov	r3, r4
 800e292:	f7f3 fb57 	bl	8001944 <HAL_HCD_HC_SubmitRequest>
 800e296:	4603      	mov	r3, r0
 800e298:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e29a:	7bfb      	ldrb	r3, [r7, #15]
 800e29c:	4618      	mov	r0, r3
 800e29e:	f000 f897 	bl	800e3d0 <USBH_Get_USB_Status>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3714      	adds	r7, #20
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd90      	pop	{r4, r7, pc}

0800e2b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2c2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800e2c6:	78fa      	ldrb	r2, [r7, #3]
 800e2c8:	4611      	mov	r1, r2
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7f3 fdde 	bl	8001e8c <HAL_HCD_HC_GetURBState>
 800e2d0:	4603      	mov	r3, r0
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3708      	adds	r7, #8
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}

0800e2da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e2da:	b580      	push	{r7, lr}
 800e2dc:	b082      	sub	sp, #8
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	6078      	str	r0, [r7, #4]
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800e2e6:	20c8      	movs	r0, #200	; 0xc8
 800e2e8:	f7f2 fe36 	bl	8000f58 <HAL_Delay>
  return USBH_OK;
 800e2ec:	2300      	movs	r3, #0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3708      	adds	r7, #8
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e2f6:	b480      	push	{r7}
 800e2f8:	b085      	sub	sp, #20
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	460b      	mov	r3, r1
 800e300:	70fb      	strb	r3, [r7, #3]
 800e302:	4613      	mov	r3, r2
 800e304:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e30c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800e310:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e312:	78fb      	ldrb	r3, [r7, #3]
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	212c      	movs	r1, #44	; 0x2c
 800e318:	fb01 f303 	mul.w	r3, r1, r3
 800e31c:	4413      	add	r3, r2
 800e31e:	333b      	adds	r3, #59	; 0x3b
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d009      	beq.n	800e33a <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e326:	78fb      	ldrb	r3, [r7, #3]
 800e328:	68fa      	ldr	r2, [r7, #12]
 800e32a:	212c      	movs	r1, #44	; 0x2c
 800e32c:	fb01 f303 	mul.w	r3, r1, r3
 800e330:	4413      	add	r3, r2
 800e332:	3354      	adds	r3, #84	; 0x54
 800e334:	78ba      	ldrb	r2, [r7, #2]
 800e336:	701a      	strb	r2, [r3, #0]
 800e338:	e008      	b.n	800e34c <USBH_LL_SetToggle+0x56>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e33a:	78fb      	ldrb	r3, [r7, #3]
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	212c      	movs	r1, #44	; 0x2c
 800e340:	fb01 f303 	mul.w	r3, r1, r3
 800e344:	4413      	add	r3, r2
 800e346:	3355      	adds	r3, #85	; 0x55
 800e348:	78ba      	ldrb	r2, [r7, #2]
 800e34a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e34c:	2300      	movs	r3, #0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3714      	adds	r7, #20
 800e352:	46bd      	mov	sp, r7
 800e354:	bc80      	pop	{r7}
 800e356:	4770      	bx	lr

0800e358 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e358:	b480      	push	{r7}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	460b      	mov	r3, r1
 800e362:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e364:	2300      	movs	r3, #0
 800e366:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e36e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800e372:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e374:	78fb      	ldrb	r3, [r7, #3]
 800e376:	68ba      	ldr	r2, [r7, #8]
 800e378:	212c      	movs	r1, #44	; 0x2c
 800e37a:	fb01 f303 	mul.w	r3, r1, r3
 800e37e:	4413      	add	r3, r2
 800e380:	333b      	adds	r3, #59	; 0x3b
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d009      	beq.n	800e39c <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e388:	78fb      	ldrb	r3, [r7, #3]
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	212c      	movs	r1, #44	; 0x2c
 800e38e:	fb01 f303 	mul.w	r3, r1, r3
 800e392:	4413      	add	r3, r2
 800e394:	3354      	adds	r3, #84	; 0x54
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	73fb      	strb	r3, [r7, #15]
 800e39a:	e008      	b.n	800e3ae <USBH_LL_GetToggle+0x56>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e39c:	78fb      	ldrb	r3, [r7, #3]
 800e39e:	68ba      	ldr	r2, [r7, #8]
 800e3a0:	212c      	movs	r1, #44	; 0x2c
 800e3a2:	fb01 f303 	mul.w	r3, r1, r3
 800e3a6:	4413      	add	r3, r2
 800e3a8:	3355      	adds	r3, #85	; 0x55
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3714      	adds	r7, #20
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bc80      	pop	{r7}
 800e3b8:	4770      	bx	lr

0800e3ba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b082      	sub	sp, #8
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f7f2 fdc8 	bl	8000f58 <HAL_Delay>
}
 800e3c8:	bf00      	nop
 800e3ca:	3708      	adds	r7, #8
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b085      	sub	sp, #20
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e3de:	79fb      	ldrb	r3, [r7, #7]
 800e3e0:	2b03      	cmp	r3, #3
 800e3e2:	d817      	bhi.n	800e414 <USBH_Get_USB_Status+0x44>
 800e3e4:	a201      	add	r2, pc, #4	; (adr r2, 800e3ec <USBH_Get_USB_Status+0x1c>)
 800e3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ea:	bf00      	nop
 800e3ec:	0800e3fd 	.word	0x0800e3fd
 800e3f0:	0800e403 	.word	0x0800e403
 800e3f4:	0800e409 	.word	0x0800e409
 800e3f8:	0800e40f 	.word	0x0800e40f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800e400:	e00b      	b.n	800e41a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e402:	2302      	movs	r3, #2
 800e404:	73fb      	strb	r3, [r7, #15]
    break;
 800e406:	e008      	b.n	800e41a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e408:	2301      	movs	r3, #1
 800e40a:	73fb      	strb	r3, [r7, #15]
    break;
 800e40c:	e005      	b.n	800e41a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e40e:	2302      	movs	r3, #2
 800e410:	73fb      	strb	r3, [r7, #15]
    break;
 800e412:	e002      	b.n	800e41a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e414:	2302      	movs	r3, #2
 800e416:	73fb      	strb	r3, [r7, #15]
    break;
 800e418:	bf00      	nop
  }
  return usb_status;
 800e41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3714      	adds	r7, #20
 800e420:	46bd      	mov	sp, r7
 800e422:	bc80      	pop	{r7}
 800e424:	4770      	bx	lr
 800e426:	bf00      	nop
	...

0800e430 <Ibox_PaymentController_SetCredentials>:
 800e430:	f000 b936 	b.w	800e6a0 <IboxInternal_WebClient_SetCredentials>
	...

0800e440 <Ibox_PaymentController_SetSendWebRequestAction>:
 800e440:	f000 b91e 	b.w	800e680 <IboxInternal_WebClient_SetSendRequestAction>
	...

0800e450 <Ibox_PaymentController_SetSendReaderRequestAction>:
 800e450:	f000 b8ae 	b.w	800e5b0 <IboxInternal_Reader_SetSendRequestAction>
	...

0800e460 <Ibox_PaymentController_SetStartTransactionAction>:
 800e460:	f000 b916 	b.w	800e690 <IboxInternal_WebClient_SetStartTransactionAction>
	...

0800e470 <Ibox_PaymentController_SetSelectEmvApplicationAction>:
 800e470:	f000 b8a6 	b.w	800e5c0 <IboxInternal_Reader_SetSelectEmvApplicationAction>
	...

0800e480 <Ibox_PaymentController_ReaderSoundEnabled>:
 800e480:	f000 b8a6 	b.w	800e5d0 <IboxInternal_Reader_SoundEnabled>
	...

0800e490 <Ibox_PaymentController_SetDebugEnabled>:
 800e490:	f000 b8c6 	b.w	800e620 <IboxInternal_SDKUtility_SetDebugEnabled>
	...

0800e4a0 <IboxInternal_Reader_SetReaderRequest>:
 800e4a0:	b570      	push	{r4, r5, r6, lr}
 800e4a2:	4e0b      	ldr	r6, [pc, #44]	; (800e4d0 <IboxInternal_Reader_SetReaderRequest+0x30>)
 800e4a4:	6833      	ldr	r3, [r6, #0]
 800e4a6:	4605      	mov	r5, r0
 800e4a8:	460c      	mov	r4, r1
 800e4aa:	b113      	cbz	r3, 800e4b2 <IboxInternal_Reader_SetReaderRequest+0x12>
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f003 ff79 	bl	80123a4 <free>
 800e4b2:	b904      	cbnz	r4, 800e4b6 <IboxInternal_Reader_SetReaderRequest+0x16>
 800e4b4:	bd70      	pop	{r4, r5, r6, pc}
 800e4b6:	2101      	movs	r1, #1
 800e4b8:	1860      	adds	r0, r4, r1
 800e4ba:	f003 feb5 	bl	8012228 <calloc>
 800e4be:	4629      	mov	r1, r5
 800e4c0:	4622      	mov	r2, r4
 800e4c2:	6030      	str	r0, [r6, #0]
 800e4c4:	f003 ff76 	bl	80123b4 <memcpy>
 800e4c8:	4b02      	ldr	r3, [pc, #8]	; (800e4d4 <IboxInternal_Reader_SetReaderRequest+0x34>)
 800e4ca:	601c      	str	r4, [r3, #0]
 800e4cc:	bd70      	pop	{r4, r5, r6, pc}
 800e4ce:	bf00      	nop
 800e4d0:	20001fe4 	.word	0x20001fe4
 800e4d4:	20001fe8 	.word	0x20001fe8
	...

0800e4e0 <IboxInternal_Reader_SendRequest2Reader>:
 800e4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e2:	4b2c      	ldr	r3, [pc, #176]	; (800e594 <IboxInternal_Reader_SendRequest2Reader+0xb4>)
 800e4e4:	681c      	ldr	r4, [r3, #0]
 800e4e6:	4615      	mov	r5, r2
 800e4e8:	4606      	mov	r6, r0
 800e4ea:	460f      	mov	r7, r1
 800e4ec:	b174      	cbz	r4, 800e50c <IboxInternal_Reader_SendRequest2Reader+0x2c>
 800e4ee:	47a0      	blx	r4
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	b158      	cbz	r0, 800e50c <IboxInternal_Reader_SendRequest2Reader+0x2c>
 800e4f4:	4639      	mov	r1, r7
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	f7ff ffd2 	bl	800e4a0 <IboxInternal_Reader_SetReaderRequest>
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	f003 ff51 	bl	80123a4 <free>
 800e502:	b10d      	cbz	r5, 800e508 <IboxInternal_Reader_SendRequest2Reader+0x28>
 800e504:	6861      	ldr	r1, [r4, #4]
 800e506:	bb71      	cbnz	r1, 800e566 <IboxInternal_Reader_SendRequest2Reader+0x86>
 800e508:	4620      	mov	r0, r4
 800e50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e50c:	2108      	movs	r1, #8
 800e50e:	2001      	movs	r0, #1
 800e510:	f003 fe8a 	bl	8012228 <calloc>
 800e514:	4b20      	ldr	r3, [pc, #128]	; (800e598 <IboxInternal_Reader_SendRequest2Reader+0xb8>)
 800e516:	4a21      	ldr	r2, [pc, #132]	; (800e59c <IboxInternal_Reader_SendRequest2Reader+0xbc>)
 800e518:	4604      	mov	r4, r0
 800e51a:	6812      	ldr	r2, [r2, #0]
 800e51c:	6818      	ldr	r0, [r3, #0]
 800e51e:	4631      	mov	r1, r6
 800e520:	463b      	mov	r3, r7
 800e522:	f000 f885 	bl	800e630 <IboxInternal_SDKUtility_compareArrays>
 800e526:	b190      	cbz	r0, 800e54e <IboxInternal_Reader_SendRequest2Reader+0x6e>
 800e528:	4a1d      	ldr	r2, [pc, #116]	; (800e5a0 <IboxInternal_Reader_SendRequest2Reader+0xc0>)
 800e52a:	6813      	ldr	r3, [r2, #0]
 800e52c:	3301      	adds	r3, #1
 800e52e:	2b05      	cmp	r3, #5
 800e530:	6013      	str	r3, [r2, #0]
 800e532:	dc1d      	bgt.n	800e570 <IboxInternal_Reader_SendRequest2Reader+0x90>
 800e534:	4639      	mov	r1, r7
 800e536:	4630      	mov	r0, r6
 800e538:	f7ff ffb2 	bl	800e4a0 <IboxInternal_Reader_SetReaderRequest>
 800e53c:	4630      	mov	r0, r6
 800e53e:	f003 ff31 	bl	80123a4 <free>
 800e542:	2d00      	cmp	r5, #0
 800e544:	d0e0      	beq.n	800e508 <IboxInternal_Reader_SendRequest2Reader+0x28>
 800e546:	2c00      	cmp	r4, #0
 800e548:	d1dc      	bne.n	800e504 <IboxInternal_Reader_SendRequest2Reader+0x24>
 800e54a:	4620      	mov	r0, r4
 800e54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e54e:	4b14      	ldr	r3, [pc, #80]	; (800e5a0 <IboxInternal_Reader_SendRequest2Reader+0xc0>)
 800e550:	4639      	mov	r1, r7
 800e552:	6018      	str	r0, [r3, #0]
 800e554:	4630      	mov	r0, r6
 800e556:	f7ff ffa3 	bl	800e4a0 <IboxInternal_Reader_SetReaderRequest>
 800e55a:	4630      	mov	r0, r6
 800e55c:	f003 ff22 	bl	80123a4 <free>
 800e560:	2d00      	cmp	r5, #0
 800e562:	d0d1      	beq.n	800e508 <IboxInternal_Reader_SendRequest2Reader+0x28>
 800e564:	e7ef      	b.n	800e546 <IboxInternal_Reader_SendRequest2Reader+0x66>
 800e566:	6820      	ldr	r0, [r4, #0]
 800e568:	f001 f812 	bl	800f590 <on_package>
 800e56c:	4620      	mov	r0, r4
 800e56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e570:	6820      	ldr	r0, [r4, #0]
 800e572:	2500      	movs	r5, #0
 800e574:	6015      	str	r5, [r2, #0]
 800e576:	f003 ff15 	bl	80123a4 <free>
 800e57a:	4620      	mov	r0, r4
 800e57c:	f003 ff12 	bl	80123a4 <free>
 800e580:	4639      	mov	r1, r7
 800e582:	4630      	mov	r0, r6
 800e584:	f7ff ff8c 	bl	800e4a0 <IboxInternal_Reader_SetReaderRequest>
 800e588:	4630      	mov	r0, r6
 800e58a:	462c      	mov	r4, r5
 800e58c:	f003 ff0a 	bl	80123a4 <free>
 800e590:	e7ba      	b.n	800e508 <IboxInternal_Reader_SendRequest2Reader+0x28>
 800e592:	bf00      	nop
 800e594:	20001ff4 	.word	0x20001ff4
 800e598:	20001fe4 	.word	0x20001fe4
 800e59c:	20001fe8 	.word	0x20001fe8
 800e5a0:	20001fec 	.word	0x20001fec
	...

0800e5b0 <IboxInternal_Reader_SetSendRequestAction>:
 800e5b0:	4b01      	ldr	r3, [pc, #4]	; (800e5b8 <IboxInternal_Reader_SetSendRequestAction+0x8>)
 800e5b2:	6018      	str	r0, [r3, #0]
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop
 800e5b8:	20001ff4 	.word	0x20001ff4
 800e5bc:	00000000 	.word	0x00000000

0800e5c0 <IboxInternal_Reader_SetSelectEmvApplicationAction>:
 800e5c0:	4b01      	ldr	r3, [pc, #4]	; (800e5c8 <IboxInternal_Reader_SetSelectEmvApplicationAction+0x8>)
 800e5c2:	6018      	str	r0, [r3, #0]
 800e5c4:	4770      	bx	lr
 800e5c6:	bf00      	nop
 800e5c8:	20001ff0 	.word	0x20001ff0
 800e5cc:	00000000 	.word	0x00000000

0800e5d0 <IboxInternal_Reader_SoundEnabled>:
 800e5d0:	b538      	push	{r3, r4, r5, lr}
 800e5d2:	2101      	movs	r1, #1
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800e5da:	f003 fe25 	bl	8012228 <calloc>
 800e5de:	4604      	mov	r4, r0
 800e5e0:	4601      	mov	r1, r0
 800e5e2:	b18d      	cbz	r5, 800e608 <IboxInternal_Reader_SoundEnabled+0x38>
 800e5e4:	2000      	movs	r0, #0
 800e5e6:	f000 f8a3 	bl	800e730 <setBuzzerStatus>
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	4601      	mov	r1, r0
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f7ff ff76 	bl	800e4e0 <IboxInternal_Reader_SendRequest2Reader>
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	b190      	cbz	r0, 800e61e <IboxInternal_Reader_SoundEnabled+0x4e>
 800e5f8:	6800      	ldr	r0, [r0, #0]
 800e5fa:	f003 fed3 	bl	80123a4 <free>
 800e5fe:	4620      	mov	r0, r4
 800e600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e604:	f003 bece 	b.w	80123a4 <free>
 800e608:	2001      	movs	r0, #1
 800e60a:	f000 f891 	bl	800e730 <setBuzzerStatus>
 800e60e:	2201      	movs	r2, #1
 800e610:	4601      	mov	r1, r0
 800e612:	4620      	mov	r0, r4
 800e614:	f7ff ff64 	bl	800e4e0 <IboxInternal_Reader_SendRequest2Reader>
 800e618:	4604      	mov	r4, r0
 800e61a:	2800      	cmp	r0, #0
 800e61c:	d1ec      	bne.n	800e5f8 <IboxInternal_Reader_SoundEnabled+0x28>
 800e61e:	bd38      	pop	{r3, r4, r5, pc}

0800e620 <IboxInternal_SDKUtility_SetDebugEnabled>:
 800e620:	4b01      	ldr	r3, [pc, #4]	; (800e628 <IboxInternal_SDKUtility_SetDebugEnabled+0x8>)
 800e622:	6018      	str	r0, [r3, #0]
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop
 800e628:	20001ff8 	.word	0x20001ff8
 800e62c:	00000000 	.word	0x00000000

0800e630 <IboxInternal_SDKUtility_compareArrays>:
 800e630:	429a      	cmp	r2, r3
 800e632:	d001      	beq.n	800e638 <IboxInternal_SDKUtility_compareArrays+0x8>
 800e634:	2000      	movs	r0, #0
 800e636:	4770      	bx	lr
 800e638:	2a00      	cmp	r2, #0
 800e63a:	dd12      	ble.n	800e662 <IboxInternal_SDKUtility_compareArrays+0x32>
 800e63c:	3801      	subs	r0, #1
 800e63e:	b410      	push	{r4}
 800e640:	4402      	add	r2, r0
 800e642:	3901      	subs	r1, #1
 800e644:	e001      	b.n	800e64a <IboxInternal_SDKUtility_compareArrays+0x1a>
 800e646:	4290      	cmp	r0, r2
 800e648:	d008      	beq.n	800e65c <IboxInternal_SDKUtility_compareArrays+0x2c>
 800e64a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800e64e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e652:	429c      	cmp	r4, r3
 800e654:	d0f7      	beq.n	800e646 <IboxInternal_SDKUtility_compareArrays+0x16>
 800e656:	2000      	movs	r0, #0
 800e658:	bc10      	pop	{r4}
 800e65a:	4770      	bx	lr
 800e65c:	2001      	movs	r0, #1
 800e65e:	bc10      	pop	{r4}
 800e660:	4770      	bx	lr
 800e662:	2001      	movs	r0, #1
 800e664:	4770      	bx	lr
 800e666:	bf00      	nop
	...

0800e670 <IboxInternal_SDKUtility_StringIsNullOrEmpty>:
 800e670:	b120      	cbz	r0, 800e67c <IboxInternal_SDKUtility_StringIsNullOrEmpty+0xc>
 800e672:	7800      	ldrb	r0, [r0, #0]
 800e674:	fab0 f080 	clz	r0, r0
 800e678:	0940      	lsrs	r0, r0, #5
 800e67a:	4770      	bx	lr
 800e67c:	2001      	movs	r0, #1
 800e67e:	4770      	bx	lr

0800e680 <IboxInternal_WebClient_SetSendRequestAction>:
 800e680:	4b01      	ldr	r3, [pc, #4]	; (800e688 <IboxInternal_WebClient_SetSendRequestAction+0x8>)
 800e682:	6018      	str	r0, [r3, #0]
 800e684:	4770      	bx	lr
 800e686:	bf00      	nop
 800e688:	20002008 	.word	0x20002008
 800e68c:	00000000 	.word	0x00000000

0800e690 <IboxInternal_WebClient_SetStartTransactionAction>:
 800e690:	4b01      	ldr	r3, [pc, #4]	; (800e698 <IboxInternal_WebClient_SetStartTransactionAction+0x8>)
 800e692:	6018      	str	r0, [r3, #0]
 800e694:	4770      	bx	lr
 800e696:	bf00      	nop
 800e698:	2000200c 	.word	0x2000200c
 800e69c:	00000000 	.word	0x00000000

0800e6a0 <IboxInternal_WebClient_SetCredentials>:
 800e6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6a2:	4e20      	ldr	r6, [pc, #128]	; (800e724 <IboxInternal_WebClient_SetCredentials+0x84>)
 800e6a4:	6833      	ldr	r3, [r6, #0]
 800e6a6:	4605      	mov	r5, r0
 800e6a8:	460c      	mov	r4, r1
 800e6aa:	b113      	cbz	r3, 800e6b2 <IboxInternal_WebClient_SetCredentials+0x12>
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f003 fe79 	bl	80123a4 <free>
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f7ff ffdc 	bl	800e670 <IboxInternal_SDKUtility_StringIsNullOrEmpty>
 800e6b8:	b160      	cbz	r0, 800e6d4 <IboxInternal_WebClient_SetCredentials+0x34>
 800e6ba:	4d1b      	ldr	r5, [pc, #108]	; (800e728 <IboxInternal_WebClient_SetCredentials+0x88>)
 800e6bc:	6828      	ldr	r0, [r5, #0]
 800e6be:	b108      	cbz	r0, 800e6c4 <IboxInternal_WebClient_SetCredentials+0x24>
 800e6c0:	f003 fe70 	bl	80123a4 <free>
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	f7ff ffd3 	bl	800e670 <IboxInternal_SDKUtility_StringIsNullOrEmpty>
 800e6ca:	b1a8      	cbz	r0, 800e6f8 <IboxInternal_WebClient_SetCredentials+0x58>
 800e6cc:	4b17      	ldr	r3, [pc, #92]	; (800e72c <IboxInternal_WebClient_SetCredentials+0x8c>)
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	601a      	str	r2, [r3, #0]
 800e6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6d4:	4628      	mov	r0, r5
 800e6d6:	f7f1 fdb5 	bl	8000244 <strlen>
 800e6da:	2101      	movs	r1, #1
 800e6dc:	3001      	adds	r0, #1
 800e6de:	f003 fda3 	bl	8012228 <calloc>
 800e6e2:	4607      	mov	r7, r0
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	6037      	str	r7, [r6, #0]
 800e6e8:	f7f1 fdac 	bl	8000244 <strlen>
 800e6ec:	4629      	mov	r1, r5
 800e6ee:	1c42      	adds	r2, r0, #1
 800e6f0:	4638      	mov	r0, r7
 800e6f2:	f003 fe5f 	bl	80123b4 <memcpy>
 800e6f6:	e7e0      	b.n	800e6ba <IboxInternal_WebClient_SetCredentials+0x1a>
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	f7f1 fda3 	bl	8000244 <strlen>
 800e6fe:	2101      	movs	r1, #1
 800e700:	3001      	adds	r0, #1
 800e702:	f003 fd91 	bl	8012228 <calloc>
 800e706:	4606      	mov	r6, r0
 800e708:	4620      	mov	r0, r4
 800e70a:	602e      	str	r6, [r5, #0]
 800e70c:	f7f1 fd9a 	bl	8000244 <strlen>
 800e710:	4621      	mov	r1, r4
 800e712:	1c42      	adds	r2, r0, #1
 800e714:	4630      	mov	r0, r6
 800e716:	f003 fe4d 	bl	80123b4 <memcpy>
 800e71a:	4b04      	ldr	r3, [pc, #16]	; (800e72c <IboxInternal_WebClient_SetCredentials+0x8c>)
 800e71c:	2200      	movs	r2, #0
 800e71e:	601a      	str	r2, [r3, #0]
 800e720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e722:	bf00      	nop
 800e724:	20002000 	.word	0x20002000
 800e728:	20002004 	.word	0x20002004
 800e72c:	20001ffc 	.word	0x20001ffc

0800e730 <setBuzzerStatus>:
 800e730:	b510      	push	{r4, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	460c      	mov	r4, r1
 800e736:	4601      	mov	r1, r0
 800e738:	4805      	ldr	r0, [pc, #20]	; (800e750 <setBuzzerStatus+0x20>)
 800e73a:	f000 faa9 	bl	800ec90 <pack_u8>
 800e73e:	9400      	str	r4, [sp, #0]
 800e740:	230a      	movs	r3, #10
 800e742:	2210      	movs	r2, #16
 800e744:	2123      	movs	r1, #35	; 0x23
 800e746:	2021      	movs	r0, #33	; 0x21
 800e748:	f000 fe62 	bl	800f410 <get_dl_package>
 800e74c:	b002      	add	sp, #8
 800e74e:	bd10      	pop	{r4, pc}
 800e750:	08014584 	.word	0x08014584
	...

0800e760 <unpack_content.part.0>:
 800e760:	4b0f      	ldr	r3, [pc, #60]	; (800e7a0 <unpack_content.part.0+0x40>)
 800e762:	b470      	push	{r4, r5, r6}
 800e764:	681c      	ldr	r4, [r3, #0]
 800e766:	4d0f      	ldr	r5, [pc, #60]	; (800e7a4 <unpack_content.part.0+0x44>)
 800e768:	1fa3      	subs	r3, r4, #6
 800e76a:	2b04      	cmp	r3, #4
 800e76c:	d911      	bls.n	800e792 <unpack_content.part.0+0x32>
 800e76e:	4b0e      	ldr	r3, [pc, #56]	; (800e7a8 <unpack_content.part.0+0x48>)
 800e770:	682e      	ldr	r6, [r5, #0]
 800e772:	4a0e      	ldr	r2, [pc, #56]	; (800e7ac <unpack_content.part.0+0x4c>)
 800e774:	1918      	adds	r0, r3, r4
 800e776:	4432      	add	r2, r6
 800e778:	3802      	subs	r0, #2
 800e77a:	3308      	adds	r3, #8
 800e77c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e780:	f802 1f01 	strb.w	r1, [r2, #1]!
 800e784:	4283      	cmp	r3, r0
 800e786:	d1f9      	bne.n	800e77c <unpack_content.part.0+0x1c>
 800e788:	3c05      	subs	r4, #5
 800e78a:	4434      	add	r4, r6
 800e78c:	602c      	str	r4, [r5, #0]
 800e78e:	bc70      	pop	{r4, r5, r6}
 800e790:	4770      	bx	lr
 800e792:	682e      	ldr	r6, [r5, #0]
 800e794:	3c05      	subs	r4, #5
 800e796:	4434      	add	r4, r6
 800e798:	602c      	str	r4, [r5, #0]
 800e79a:	bc70      	pop	{r4, r5, r6}
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop
 800e7a0:	2000cd9c 	.word	0x2000cd9c
 800e7a4:	20006cb0 	.word	0x20006cb0
 800e7a8:	2000c99c 	.word	0x2000c99c
 800e7ac:	200068ab 	.word	0x200068ab

0800e7b0 <reset_global_var>:
 800e7b0:	b570      	push	{r4, r5, r6, lr}
 800e7b2:	48b3      	ldr	r0, [pc, #716]	; (800ea80 <reset_global_var+0x2d0>)
 800e7b4:	4db3      	ldr	r5, [pc, #716]	; (800ea84 <reset_global_var+0x2d4>)
 800e7b6:	49b4      	ldr	r1, [pc, #720]	; (800ea88 <reset_global_var+0x2d8>)
 800e7b8:	4ab4      	ldr	r2, [pc, #720]	; (800ea8c <reset_global_var+0x2dc>)
 800e7ba:	4bb5      	ldr	r3, [pc, #724]	; (800ea90 <reset_global_var+0x2e0>)
 800e7bc:	4eb5      	ldr	r6, [pc, #724]	; (800ea94 <reset_global_var+0x2e4>)
 800e7be:	2400      	movs	r4, #0
 800e7c0:	702c      	strb	r4, [r5, #0]
 800e7c2:	7004      	strb	r4, [r0, #0]
 800e7c4:	4db4      	ldr	r5, [pc, #720]	; (800ea98 <reset_global_var+0x2e8>)
 800e7c6:	48b5      	ldr	r0, [pc, #724]	; (800ea9c <reset_global_var+0x2ec>)
 800e7c8:	700c      	strb	r4, [r1, #0]
 800e7ca:	7014      	strb	r4, [r2, #0]
 800e7cc:	701c      	strb	r4, [r3, #0]
 800e7ce:	49b4      	ldr	r1, [pc, #720]	; (800eaa0 <reset_global_var+0x2f0>)
 800e7d0:	4ab4      	ldr	r2, [pc, #720]	; (800eaa4 <reset_global_var+0x2f4>)
 800e7d2:	4bb5      	ldr	r3, [pc, #724]	; (800eaa8 <reset_global_var+0x2f8>)
 800e7d4:	702c      	strb	r4, [r5, #0]
 800e7d6:	7004      	strb	r4, [r0, #0]
 800e7d8:	4db4      	ldr	r5, [pc, #720]	; (800eaac <reset_global_var+0x2fc>)
 800e7da:	48b5      	ldr	r0, [pc, #724]	; (800eab0 <reset_global_var+0x300>)
 800e7dc:	700c      	strb	r4, [r1, #0]
 800e7de:	7014      	strb	r4, [r2, #0]
 800e7e0:	701c      	strb	r4, [r3, #0]
 800e7e2:	49b4      	ldr	r1, [pc, #720]	; (800eab4 <reset_global_var+0x304>)
 800e7e4:	4ab4      	ldr	r2, [pc, #720]	; (800eab8 <reset_global_var+0x308>)
 800e7e6:	4bb5      	ldr	r3, [pc, #724]	; (800eabc <reset_global_var+0x30c>)
 800e7e8:	702c      	strb	r4, [r5, #0]
 800e7ea:	7004      	strb	r4, [r0, #0]
 800e7ec:	4db4      	ldr	r5, [pc, #720]	; (800eac0 <reset_global_var+0x310>)
 800e7ee:	48b5      	ldr	r0, [pc, #724]	; (800eac4 <reset_global_var+0x314>)
 800e7f0:	700c      	strb	r4, [r1, #0]
 800e7f2:	7014      	strb	r4, [r2, #0]
 800e7f4:	701c      	strb	r4, [r3, #0]
 800e7f6:	49b4      	ldr	r1, [pc, #720]	; (800eac8 <reset_global_var+0x318>)
 800e7f8:	4ab4      	ldr	r2, [pc, #720]	; (800eacc <reset_global_var+0x31c>)
 800e7fa:	4bb5      	ldr	r3, [pc, #724]	; (800ead0 <reset_global_var+0x320>)
 800e7fc:	702c      	strb	r4, [r5, #0]
 800e7fe:	7004      	strb	r4, [r0, #0]
 800e800:	4db4      	ldr	r5, [pc, #720]	; (800ead4 <reset_global_var+0x324>)
 800e802:	48b5      	ldr	r0, [pc, #724]	; (800ead8 <reset_global_var+0x328>)
 800e804:	700c      	strb	r4, [r1, #0]
 800e806:	8014      	strh	r4, [r2, #0]
 800e808:	701c      	strb	r4, [r3, #0]
 800e80a:	49b4      	ldr	r1, [pc, #720]	; (800eadc <reset_global_var+0x32c>)
 800e80c:	4ab4      	ldr	r2, [pc, #720]	; (800eae0 <reset_global_var+0x330>)
 800e80e:	4bb5      	ldr	r3, [pc, #724]	; (800eae4 <reset_global_var+0x334>)
 800e810:	702c      	strb	r4, [r5, #0]
 800e812:	7004      	strb	r4, [r0, #0]
 800e814:	4db4      	ldr	r5, [pc, #720]	; (800eae8 <reset_global_var+0x338>)
 800e816:	48b5      	ldr	r0, [pc, #724]	; (800eaec <reset_global_var+0x33c>)
 800e818:	700c      	strb	r4, [r1, #0]
 800e81a:	7014      	strb	r4, [r2, #0]
 800e81c:	701c      	strb	r4, [r3, #0]
 800e81e:	49b4      	ldr	r1, [pc, #720]	; (800eaf0 <reset_global_var+0x340>)
 800e820:	4ab4      	ldr	r2, [pc, #720]	; (800eaf4 <reset_global_var+0x344>)
 800e822:	4bb5      	ldr	r3, [pc, #724]	; (800eaf8 <reset_global_var+0x348>)
 800e824:	702c      	strb	r4, [r5, #0]
 800e826:	7004      	strb	r4, [r0, #0]
 800e828:	4db4      	ldr	r5, [pc, #720]	; (800eafc <reset_global_var+0x34c>)
 800e82a:	7034      	strb	r4, [r6, #0]
 800e82c:	2003      	movs	r0, #3
 800e82e:	700c      	strb	r4, [r1, #0]
 800e830:	7014      	strb	r4, [r2, #0]
 800e832:	7018      	strb	r0, [r3, #0]
 800e834:	49b2      	ldr	r1, [pc, #712]	; (800eb00 <reset_global_var+0x350>)
 800e836:	4ab3      	ldr	r2, [pc, #716]	; (800eb04 <reset_global_var+0x354>)
 800e838:	48b3      	ldr	r0, [pc, #716]	; (800eb08 <reset_global_var+0x358>)
 800e83a:	4bb4      	ldr	r3, [pc, #720]	; (800eb0c <reset_global_var+0x35c>)
 800e83c:	2606      	movs	r6, #6
 800e83e:	702e      	strb	r6, [r5, #0]
 800e840:	f44f 6581 	mov.w	r5, #1032	; 0x408
 800e844:	700c      	strb	r4, [r1, #0]
 800e846:	7014      	strb	r4, [r2, #0]
 800e848:	4621      	mov	r1, r4
 800e84a:	462a      	mov	r2, r5
 800e84c:	7004      	strb	r4, [r0, #0]
 800e84e:	48b0      	ldr	r0, [pc, #704]	; (800eb10 <reset_global_var+0x360>)
 800e850:	701c      	strb	r4, [r3, #0]
 800e852:	f003 fdbd 	bl	80123d0 <memset>
 800e856:	462a      	mov	r2, r5
 800e858:	4621      	mov	r1, r4
 800e85a:	48ae      	ldr	r0, [pc, #696]	; (800eb14 <reset_global_var+0x364>)
 800e85c:	f003 fdb8 	bl	80123d0 <memset>
 800e860:	462a      	mov	r2, r5
 800e862:	4621      	mov	r1, r4
 800e864:	48ac      	ldr	r0, [pc, #688]	; (800eb18 <reset_global_var+0x368>)
 800e866:	f003 fdb3 	bl	80123d0 <memset>
 800e86a:	462a      	mov	r2, r5
 800e86c:	4621      	mov	r1, r4
 800e86e:	48ab      	ldr	r0, [pc, #684]	; (800eb1c <reset_global_var+0x36c>)
 800e870:	f003 fdae 	bl	80123d0 <memset>
 800e874:	462a      	mov	r2, r5
 800e876:	4621      	mov	r1, r4
 800e878:	48a9      	ldr	r0, [pc, #676]	; (800eb20 <reset_global_var+0x370>)
 800e87a:	f003 fda9 	bl	80123d0 <memset>
 800e87e:	462a      	mov	r2, r5
 800e880:	4621      	mov	r1, r4
 800e882:	48a8      	ldr	r0, [pc, #672]	; (800eb24 <reset_global_var+0x374>)
 800e884:	f003 fda4 	bl	80123d0 <memset>
 800e888:	462a      	mov	r2, r5
 800e88a:	4621      	mov	r1, r4
 800e88c:	48a6      	ldr	r0, [pc, #664]	; (800eb28 <reset_global_var+0x378>)
 800e88e:	f003 fd9f 	bl	80123d0 <memset>
 800e892:	462a      	mov	r2, r5
 800e894:	4621      	mov	r1, r4
 800e896:	48a5      	ldr	r0, [pc, #660]	; (800eb2c <reset_global_var+0x37c>)
 800e898:	f003 fd9a 	bl	80123d0 <memset>
 800e89c:	462a      	mov	r2, r5
 800e89e:	4621      	mov	r1, r4
 800e8a0:	48a3      	ldr	r0, [pc, #652]	; (800eb30 <reset_global_var+0x380>)
 800e8a2:	f003 fd95 	bl	80123d0 <memset>
 800e8a6:	462a      	mov	r2, r5
 800e8a8:	4621      	mov	r1, r4
 800e8aa:	48a2      	ldr	r0, [pc, #648]	; (800eb34 <reset_global_var+0x384>)
 800e8ac:	f003 fd90 	bl	80123d0 <memset>
 800e8b0:	462a      	mov	r2, r5
 800e8b2:	4621      	mov	r1, r4
 800e8b4:	48a0      	ldr	r0, [pc, #640]	; (800eb38 <reset_global_var+0x388>)
 800e8b6:	f003 fd8b 	bl	80123d0 <memset>
 800e8ba:	462a      	mov	r2, r5
 800e8bc:	4621      	mov	r1, r4
 800e8be:	489f      	ldr	r0, [pc, #636]	; (800eb3c <reset_global_var+0x38c>)
 800e8c0:	f003 fd86 	bl	80123d0 <memset>
 800e8c4:	462a      	mov	r2, r5
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	489d      	ldr	r0, [pc, #628]	; (800eb40 <reset_global_var+0x390>)
 800e8ca:	f003 fd81 	bl	80123d0 <memset>
 800e8ce:	462a      	mov	r2, r5
 800e8d0:	4621      	mov	r1, r4
 800e8d2:	489c      	ldr	r0, [pc, #624]	; (800eb44 <reset_global_var+0x394>)
 800e8d4:	f003 fd7c 	bl	80123d0 <memset>
 800e8d8:	462a      	mov	r2, r5
 800e8da:	4621      	mov	r1, r4
 800e8dc:	489a      	ldr	r0, [pc, #616]	; (800eb48 <reset_global_var+0x398>)
 800e8de:	f003 fd77 	bl	80123d0 <memset>
 800e8e2:	462a      	mov	r2, r5
 800e8e4:	4621      	mov	r1, r4
 800e8e6:	4899      	ldr	r0, [pc, #612]	; (800eb4c <reset_global_var+0x39c>)
 800e8e8:	f003 fd72 	bl	80123d0 <memset>
 800e8ec:	462a      	mov	r2, r5
 800e8ee:	4621      	mov	r1, r4
 800e8f0:	4897      	ldr	r0, [pc, #604]	; (800eb50 <reset_global_var+0x3a0>)
 800e8f2:	f003 fd6d 	bl	80123d0 <memset>
 800e8f6:	462a      	mov	r2, r5
 800e8f8:	4621      	mov	r1, r4
 800e8fa:	4896      	ldr	r0, [pc, #600]	; (800eb54 <reset_global_var+0x3a4>)
 800e8fc:	f003 fd68 	bl	80123d0 <memset>
 800e900:	462a      	mov	r2, r5
 800e902:	4621      	mov	r1, r4
 800e904:	4894      	ldr	r0, [pc, #592]	; (800eb58 <reset_global_var+0x3a8>)
 800e906:	f003 fd63 	bl	80123d0 <memset>
 800e90a:	462a      	mov	r2, r5
 800e90c:	4621      	mov	r1, r4
 800e90e:	4893      	ldr	r0, [pc, #588]	; (800eb5c <reset_global_var+0x3ac>)
 800e910:	f003 fd5e 	bl	80123d0 <memset>
 800e914:	462a      	mov	r2, r5
 800e916:	4621      	mov	r1, r4
 800e918:	4891      	ldr	r0, [pc, #580]	; (800eb60 <reset_global_var+0x3b0>)
 800e91a:	f003 fd59 	bl	80123d0 <memset>
 800e91e:	462a      	mov	r2, r5
 800e920:	4621      	mov	r1, r4
 800e922:	4890      	ldr	r0, [pc, #576]	; (800eb64 <reset_global_var+0x3b4>)
 800e924:	f003 fd54 	bl	80123d0 <memset>
 800e928:	462a      	mov	r2, r5
 800e92a:	4621      	mov	r1, r4
 800e92c:	488e      	ldr	r0, [pc, #568]	; (800eb68 <reset_global_var+0x3b8>)
 800e92e:	f003 fd4f 	bl	80123d0 <memset>
 800e932:	462a      	mov	r2, r5
 800e934:	4621      	mov	r1, r4
 800e936:	488d      	ldr	r0, [pc, #564]	; (800eb6c <reset_global_var+0x3bc>)
 800e938:	f003 fd4a 	bl	80123d0 <memset>
 800e93c:	462a      	mov	r2, r5
 800e93e:	4621      	mov	r1, r4
 800e940:	488b      	ldr	r0, [pc, #556]	; (800eb70 <reset_global_var+0x3c0>)
 800e942:	f003 fd45 	bl	80123d0 <memset>
 800e946:	462a      	mov	r2, r5
 800e948:	4621      	mov	r1, r4
 800e94a:	488a      	ldr	r0, [pc, #552]	; (800eb74 <reset_global_var+0x3c4>)
 800e94c:	f003 fd40 	bl	80123d0 <memset>
 800e950:	462a      	mov	r2, r5
 800e952:	4621      	mov	r1, r4
 800e954:	4888      	ldr	r0, [pc, #544]	; (800eb78 <reset_global_var+0x3c8>)
 800e956:	f003 fd3b 	bl	80123d0 <memset>
 800e95a:	462a      	mov	r2, r5
 800e95c:	4621      	mov	r1, r4
 800e95e:	4887      	ldr	r0, [pc, #540]	; (800eb7c <reset_global_var+0x3cc>)
 800e960:	f003 fd36 	bl	80123d0 <memset>
 800e964:	462a      	mov	r2, r5
 800e966:	4621      	mov	r1, r4
 800e968:	4885      	ldr	r0, [pc, #532]	; (800eb80 <reset_global_var+0x3d0>)
 800e96a:	f003 fd31 	bl	80123d0 <memset>
 800e96e:	462a      	mov	r2, r5
 800e970:	4621      	mov	r1, r4
 800e972:	4884      	ldr	r0, [pc, #528]	; (800eb84 <reset_global_var+0x3d4>)
 800e974:	f003 fd2c 	bl	80123d0 <memset>
 800e978:	462a      	mov	r2, r5
 800e97a:	4621      	mov	r1, r4
 800e97c:	4882      	ldr	r0, [pc, #520]	; (800eb88 <reset_global_var+0x3d8>)
 800e97e:	f003 fd27 	bl	80123d0 <memset>
 800e982:	462a      	mov	r2, r5
 800e984:	4621      	mov	r1, r4
 800e986:	4881      	ldr	r0, [pc, #516]	; (800eb8c <reset_global_var+0x3dc>)
 800e988:	f003 fd22 	bl	80123d0 <memset>
 800e98c:	462a      	mov	r2, r5
 800e98e:	4621      	mov	r1, r4
 800e990:	487f      	ldr	r0, [pc, #508]	; (800eb90 <reset_global_var+0x3e0>)
 800e992:	f003 fd1d 	bl	80123d0 <memset>
 800e996:	462a      	mov	r2, r5
 800e998:	4621      	mov	r1, r4
 800e99a:	487e      	ldr	r0, [pc, #504]	; (800eb94 <reset_global_var+0x3e4>)
 800e99c:	f003 fd18 	bl	80123d0 <memset>
 800e9a0:	462a      	mov	r2, r5
 800e9a2:	4621      	mov	r1, r4
 800e9a4:	487c      	ldr	r0, [pc, #496]	; (800eb98 <reset_global_var+0x3e8>)
 800e9a6:	f003 fd13 	bl	80123d0 <memset>
 800e9aa:	462a      	mov	r2, r5
 800e9ac:	4621      	mov	r1, r4
 800e9ae:	487b      	ldr	r0, [pc, #492]	; (800eb9c <reset_global_var+0x3ec>)
 800e9b0:	f003 fd0e 	bl	80123d0 <memset>
 800e9b4:	462a      	mov	r2, r5
 800e9b6:	4621      	mov	r1, r4
 800e9b8:	4879      	ldr	r0, [pc, #484]	; (800eba0 <reset_global_var+0x3f0>)
 800e9ba:	f003 fd09 	bl	80123d0 <memset>
 800e9be:	462a      	mov	r2, r5
 800e9c0:	4621      	mov	r1, r4
 800e9c2:	4878      	ldr	r0, [pc, #480]	; (800eba4 <reset_global_var+0x3f4>)
 800e9c4:	f003 fd04 	bl	80123d0 <memset>
 800e9c8:	462a      	mov	r2, r5
 800e9ca:	4621      	mov	r1, r4
 800e9cc:	4876      	ldr	r0, [pc, #472]	; (800eba8 <reset_global_var+0x3f8>)
 800e9ce:	f003 fcff 	bl	80123d0 <memset>
 800e9d2:	462a      	mov	r2, r5
 800e9d4:	4621      	mov	r1, r4
 800e9d6:	4875      	ldr	r0, [pc, #468]	; (800ebac <reset_global_var+0x3fc>)
 800e9d8:	f003 fcfa 	bl	80123d0 <memset>
 800e9dc:	462a      	mov	r2, r5
 800e9de:	4621      	mov	r1, r4
 800e9e0:	4873      	ldr	r0, [pc, #460]	; (800ebb0 <reset_global_var+0x400>)
 800e9e2:	f003 fcf5 	bl	80123d0 <memset>
 800e9e6:	462a      	mov	r2, r5
 800e9e8:	4621      	mov	r1, r4
 800e9ea:	4872      	ldr	r0, [pc, #456]	; (800ebb4 <reset_global_var+0x404>)
 800e9ec:	f003 fcf0 	bl	80123d0 <memset>
 800e9f0:	462a      	mov	r2, r5
 800e9f2:	4621      	mov	r1, r4
 800e9f4:	4870      	ldr	r0, [pc, #448]	; (800ebb8 <reset_global_var+0x408>)
 800e9f6:	f003 fceb 	bl	80123d0 <memset>
 800e9fa:	462a      	mov	r2, r5
 800e9fc:	4621      	mov	r1, r4
 800e9fe:	486f      	ldr	r0, [pc, #444]	; (800ebbc <reset_global_var+0x40c>)
 800ea00:	f003 fce6 	bl	80123d0 <memset>
 800ea04:	462a      	mov	r2, r5
 800ea06:	4621      	mov	r1, r4
 800ea08:	486d      	ldr	r0, [pc, #436]	; (800ebc0 <reset_global_var+0x410>)
 800ea0a:	f003 fce1 	bl	80123d0 <memset>
 800ea0e:	462a      	mov	r2, r5
 800ea10:	4621      	mov	r1, r4
 800ea12:	486c      	ldr	r0, [pc, #432]	; (800ebc4 <reset_global_var+0x414>)
 800ea14:	f003 fcdc 	bl	80123d0 <memset>
 800ea18:	462a      	mov	r2, r5
 800ea1a:	4621      	mov	r1, r4
 800ea1c:	486a      	ldr	r0, [pc, #424]	; (800ebc8 <reset_global_var+0x418>)
 800ea1e:	f003 fcd7 	bl	80123d0 <memset>
 800ea22:	462a      	mov	r2, r5
 800ea24:	4621      	mov	r1, r4
 800ea26:	4869      	ldr	r0, [pc, #420]	; (800ebcc <reset_global_var+0x41c>)
 800ea28:	f003 fcd2 	bl	80123d0 <memset>
 800ea2c:	462a      	mov	r2, r5
 800ea2e:	4621      	mov	r1, r4
 800ea30:	4867      	ldr	r0, [pc, #412]	; (800ebd0 <reset_global_var+0x420>)
 800ea32:	f003 fccd 	bl	80123d0 <memset>
 800ea36:	462a      	mov	r2, r5
 800ea38:	4621      	mov	r1, r4
 800ea3a:	4866      	ldr	r0, [pc, #408]	; (800ebd4 <reset_global_var+0x424>)
 800ea3c:	f003 fcc8 	bl	80123d0 <memset>
 800ea40:	462a      	mov	r2, r5
 800ea42:	4621      	mov	r1, r4
 800ea44:	4864      	ldr	r0, [pc, #400]	; (800ebd8 <reset_global_var+0x428>)
 800ea46:	f003 fcc3 	bl	80123d0 <memset>
 800ea4a:	462a      	mov	r2, r5
 800ea4c:	4621      	mov	r1, r4
 800ea4e:	4863      	ldr	r0, [pc, #396]	; (800ebdc <reset_global_var+0x42c>)
 800ea50:	f003 fcbe 	bl	80123d0 <memset>
 800ea54:	462a      	mov	r2, r5
 800ea56:	4621      	mov	r1, r4
 800ea58:	4861      	ldr	r0, [pc, #388]	; (800ebe0 <reset_global_var+0x430>)
 800ea5a:	f003 fcb9 	bl	80123d0 <memset>
 800ea5e:	462a      	mov	r2, r5
 800ea60:	4621      	mov	r1, r4
 800ea62:	4860      	ldr	r0, [pc, #384]	; (800ebe4 <reset_global_var+0x434>)
 800ea64:	f003 fcb4 	bl	80123d0 <memset>
 800ea68:	462a      	mov	r2, r5
 800ea6a:	4621      	mov	r1, r4
 800ea6c:	485e      	ldr	r0, [pc, #376]	; (800ebe8 <reset_global_var+0x438>)
 800ea6e:	f003 fcaf 	bl	80123d0 <memset>
 800ea72:	462a      	mov	r2, r5
 800ea74:	4621      	mov	r1, r4
 800ea76:	485d      	ldr	r0, [pc, #372]	; (800ebec <reset_global_var+0x43c>)
 800ea78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea7c:	f003 bca8 	b.w	80123d0 <memset>
 800ea80:	2000bd78 	.word	0x2000bd78
 800ea84:	2000a538 	.word	0x2000a538
 800ea88:	2000a12c 	.word	0x2000a12c
 800ea8c:	2000d9b9 	.word	0x2000d9b9
 800ea90:	2000b565 	.word	0x2000b565
 800ea94:	20010628 	.word	0x20010628
 800ea98:	2000c185 	.word	0x2000c185
 800ea9c:	2000bd7a 	.word	0x2000bd7a
 800eaa0:	2000bd79 	.word	0x2000bd79
 800eaa4:	2000c184 	.word	0x2000c184
 800eaa8:	2000609a 	.word	0x2000609a
 800eaac:	20011e5c 	.word	0x20011e5c
 800eab0:	200084ec 	.word	0x200084ec
 800eab4:	20003840 	.word	0x20003840
 800eab8:	2000e9dc 	.word	0x2000e9dc
 800eabc:	2000a945 	.word	0x2000a945
 800eac0:	2000a944 	.word	0x2000a944
 800eac4:	20007cd6 	.word	0x20007cd6
 800eac8:	20012268 	.word	0x20012268
 800eacc:	20012e88 	.word	0x20012e88
 800ead0:	200080e0 	.word	0x200080e0
 800ead4:	200078cc 	.word	0x200078cc
 800ead8:	20012e8a 	.word	0x20012e8a
 800eadc:	200078cd 	.word	0x200078cd
 800eae0:	200078ce 	.word	0x200078ce
 800eae4:	2000e9de 	.word	0x2000e9de
 800eae8:	20006098 	.word	0x20006098
 800eaec:	2000f1f0 	.word	0x2000f1f0
 800eaf0:	2000a946 	.word	0x2000a946
 800eaf4:	2000f1f1 	.word	0x2000f1f1
 800eaf8:	2000d9b8 	.word	0x2000d9b8
 800eafc:	2000b564 	.word	0x2000b564
 800eb00:	20007cd4 	.word	0x20007cd4
 800eb04:	2000fe14 	.word	0x2000fe14
 800eb08:	20004865 	.word	0x20004865
 800eb0c:	20004864 	.word	0x20004864
 800eb10:	20010a34 	.word	0x20010a34
 800eb14:	20010e3c 	.word	0x20010e3c
 800eb18:	2000fe18 	.word	0x2000fe18
 800eb1c:	20011e60 	.word	0x20011e60
 800eb20:	2001164c 	.word	0x2001164c
 800eb24:	20011a54 	.word	0x20011a54
 800eb28:	20011244 	.word	0x20011244
 800eb2c:	2001226c 	.word	0x2001226c
 800eb30:	2000a130 	.word	0x2000a130
 800eb34:	200084f0 	.word	0x200084f0
 800eb38:	20005c90 	.word	0x20005c90
 800eb3c:	2000cda0 	.word	0x2000cda0
 800eb40:	2000f604 	.word	0x2000f604
 800eb44:	2000b15c 	.word	0x2000b15c
 800eb48:	20012678 	.word	0x20012678
 800eb4c:	2000a94c 	.word	0x2000a94c
 800eb50:	20007cd8 	.word	0x20007cd8
 800eb54:	200070bc 	.word	0x200070bc
 800eb58:	200074c4 	.word	0x200074c4
 800eb5c:	20006cb4 	.word	0x20006cb4
 800eb60:	20012e8c 	.word	0x20012e8c
 800eb64:	2000d9bc 	.word	0x2000d9bc
 800eb68:	2000ddc4 	.word	0x2000ddc4
 800eb6c:	2000ede8 	.word	0x2000ede8
 800eb70:	2000e9e0 	.word	0x2000e9e0
 800eb74:	20003030 	.word	0x20003030
 800eb78:	20002c28 	.word	0x20002c28
 800eb7c:	20002010 	.word	0x20002010
 800eb80:	20002820 	.word	0x20002820
 800eb84:	20002418 	.word	0x20002418
 800eb88:	200064a4 	.word	0x200064a4
 800eb8c:	20003438 	.word	0x20003438
 800eb90:	20005888 	.word	0x20005888
 800eb94:	2000e1cc 	.word	0x2000e1cc
 800eb98:	2000c590 	.word	0x2000c590
 800eb9c:	200088f8 	.word	0x200088f8
 800eba0:	20009108 	.word	0x20009108
 800eba4:	2000a53c 	.word	0x2000a53c
 800eba8:	2000f1f4 	.word	0x2000f1f4
 800ebac:	20010220 	.word	0x20010220
 800ebb0:	2000445c 	.word	0x2000445c
 800ebb4:	20004054 	.word	0x20004054
 800ebb8:	20003c4c 	.word	0x20003c4c
 800ebbc:	20012a80 	.word	0x20012a80
 800ebc0:	2000609c 	.word	0x2000609c
 800ebc4:	2000991c 	.word	0x2000991c
 800ebc8:	20008d00 	.word	0x20008d00
 800ebcc:	20005078 	.word	0x20005078
 800ebd0:	20005480 	.word	0x20005480
 800ebd4:	2000b970 	.word	0x2000b970
 800ebd8:	2000c188 	.word	0x2000c188
 800ebdc:	200080e4 	.word	0x200080e4
 800ebe0:	2000d1a8 	.word	0x2000d1a8
 800ebe4:	2000d5b0 	.word	0x2000d5b0
 800ebe8:	2000bd7c 	.word	0x2000bd7c
 800ebec:	2000b568 	.word	0x2000b568

0800ebf0 <calc_mac>:
 800ebf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	e9cd 3300 	strd	r3, r3, [sp]
 800ebfc:	074b      	lsls	r3, r1, #29
 800ebfe:	460e      	mov	r6, r1
 800ec00:	4607      	mov	r7, r0
 800ec02:	4691      	mov	r9, r2
 800ec04:	d040      	beq.n	800ec88 <calc_mac+0x98>
 800ec06:	2900      	cmp	r1, #0
 800ec08:	460b      	mov	r3, r1
 800ec0a:	bfb8      	it	lt
 800ec0c:	1dcb      	addlt	r3, r1, #7
 800ec0e:	f023 0307 	bic.w	r3, r3, #7
 800ec12:	f103 0808 	add.w	r8, r3, #8
 800ec16:	4640      	mov	r0, r8
 800ec18:	f003 fbbc 	bl	8012394 <malloc>
 800ec1c:	f1b8 0f00 	cmp.w	r8, #0
 800ec20:	4682      	mov	sl, r0
 800ec22:	bfd8      	it	le
 800ec24:	4668      	movle	r0, sp
 800ec26:	dd24      	ble.n	800ec72 <calc_mac+0x82>
 800ec28:	eb08 040a 	add.w	r4, r8, sl
 800ec2c:	3c01      	subs	r4, #1
 800ec2e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800ec32:	2500      	movs	r5, #0
 800ec34:	f803 5f01 	strb.w	r5, [r3, #1]!
 800ec38:	42a3      	cmp	r3, r4
 800ec3a:	d1fb      	bne.n	800ec34 <calc_mac+0x44>
 800ec3c:	4632      	mov	r2, r6
 800ec3e:	4639      	mov	r1, r7
 800ec40:	4650      	mov	r0, sl
 800ec42:	2600      	movs	r6, #0
 800ec44:	f003 fbb6 	bl	80123b4 <memcpy>
 800ec48:	af02      	add	r7, sp, #8
 800ec4a:	4632      	mov	r2, r6
 800ec4c:	4668      	mov	r0, sp
 800ec4e:	eb0a 0502 	add.w	r5, sl, r2
 800ec52:	4603      	mov	r3, r0
 800ec54:	e000      	b.n	800ec58 <calc_mac+0x68>
 800ec56:	781e      	ldrb	r6, [r3, #0]
 800ec58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec5c:	4074      	eors	r4, r6
 800ec5e:	f803 4b01 	strb.w	r4, [r3], #1
 800ec62:	429f      	cmp	r7, r3
 800ec64:	d1f7      	bne.n	800ec56 <calc_mac+0x66>
 800ec66:	3208      	adds	r2, #8
 800ec68:	4590      	cmp	r8, r2
 800ec6a:	dd02      	ble.n	800ec72 <calc_mac+0x82>
 800ec6c:	f89d 6000 	ldrb.w	r6, [sp]
 800ec70:	e7ed      	b.n	800ec4e <calc_mac+0x5e>
 800ec72:	4a06      	ldr	r2, [pc, #24]	; (800ec8c <calc_mac+0x9c>)
 800ec74:	4649      	mov	r1, r9
 800ec76:	f003 fa3b 	bl	80120f0 <Des_Encrypt>
 800ec7a:	4650      	mov	r0, sl
 800ec7c:	f003 fb92 	bl	80123a4 <free>
 800ec80:	2008      	movs	r0, #8
 800ec82:	b002      	add	sp, #8
 800ec84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec88:	4688      	mov	r8, r1
 800ec8a:	e7c4      	b.n	800ec16 <calc_mac+0x26>
 800ec8c:	2000f5fc 	.word	0x2000f5fc

0800ec90 <pack_u8>:
 800ec90:	b538      	push	{r3, r4, r5, lr}
 800ec92:	460d      	mov	r5, r1
 800ec94:	498f      	ldr	r1, [pc, #572]	; (800eed4 <pack_u8+0x244>)
 800ec96:	4604      	mov	r4, r0
 800ec98:	f000 fd0a 	bl	800f6b0 <is_key>
 800ec9c:	b108      	cbz	r0, 800eca2 <pack_u8+0x12>
 800ec9e:	4b8e      	ldr	r3, [pc, #568]	; (800eed8 <pack_u8+0x248>)
 800eca0:	701d      	strb	r5, [r3, #0]
 800eca2:	498e      	ldr	r1, [pc, #568]	; (800eedc <pack_u8+0x24c>)
 800eca4:	4620      	mov	r0, r4
 800eca6:	f000 fd03 	bl	800f6b0 <is_key>
 800ecaa:	b108      	cbz	r0, 800ecb0 <pack_u8+0x20>
 800ecac:	4b8c      	ldr	r3, [pc, #560]	; (800eee0 <pack_u8+0x250>)
 800ecae:	701d      	strb	r5, [r3, #0]
 800ecb0:	498c      	ldr	r1, [pc, #560]	; (800eee4 <pack_u8+0x254>)
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	f000 fcfc 	bl	800f6b0 <is_key>
 800ecb8:	b108      	cbz	r0, 800ecbe <pack_u8+0x2e>
 800ecba:	4b8b      	ldr	r3, [pc, #556]	; (800eee8 <pack_u8+0x258>)
 800ecbc:	701d      	strb	r5, [r3, #0]
 800ecbe:	498b      	ldr	r1, [pc, #556]	; (800eeec <pack_u8+0x25c>)
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	f000 fcf5 	bl	800f6b0 <is_key>
 800ecc6:	b108      	cbz	r0, 800eccc <pack_u8+0x3c>
 800ecc8:	4b89      	ldr	r3, [pc, #548]	; (800eef0 <pack_u8+0x260>)
 800ecca:	701d      	strb	r5, [r3, #0]
 800eccc:	4989      	ldr	r1, [pc, #548]	; (800eef4 <pack_u8+0x264>)
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f000 fcee 	bl	800f6b0 <is_key>
 800ecd4:	b108      	cbz	r0, 800ecda <pack_u8+0x4a>
 800ecd6:	4b88      	ldr	r3, [pc, #544]	; (800eef8 <pack_u8+0x268>)
 800ecd8:	701d      	strb	r5, [r3, #0]
 800ecda:	4988      	ldr	r1, [pc, #544]	; (800eefc <pack_u8+0x26c>)
 800ecdc:	4620      	mov	r0, r4
 800ecde:	f000 fce7 	bl	800f6b0 <is_key>
 800ece2:	b108      	cbz	r0, 800ece8 <pack_u8+0x58>
 800ece4:	4b86      	ldr	r3, [pc, #536]	; (800ef00 <pack_u8+0x270>)
 800ece6:	701d      	strb	r5, [r3, #0]
 800ece8:	4986      	ldr	r1, [pc, #536]	; (800ef04 <pack_u8+0x274>)
 800ecea:	4620      	mov	r0, r4
 800ecec:	f000 fce0 	bl	800f6b0 <is_key>
 800ecf0:	b108      	cbz	r0, 800ecf6 <pack_u8+0x66>
 800ecf2:	4b85      	ldr	r3, [pc, #532]	; (800ef08 <pack_u8+0x278>)
 800ecf4:	701d      	strb	r5, [r3, #0]
 800ecf6:	4985      	ldr	r1, [pc, #532]	; (800ef0c <pack_u8+0x27c>)
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	f000 fcd9 	bl	800f6b0 <is_key>
 800ecfe:	b108      	cbz	r0, 800ed04 <pack_u8+0x74>
 800ed00:	4b83      	ldr	r3, [pc, #524]	; (800ef10 <pack_u8+0x280>)
 800ed02:	701d      	strb	r5, [r3, #0]
 800ed04:	4983      	ldr	r1, [pc, #524]	; (800ef14 <pack_u8+0x284>)
 800ed06:	4620      	mov	r0, r4
 800ed08:	f000 fcd2 	bl	800f6b0 <is_key>
 800ed0c:	b108      	cbz	r0, 800ed12 <pack_u8+0x82>
 800ed0e:	4b82      	ldr	r3, [pc, #520]	; (800ef18 <pack_u8+0x288>)
 800ed10:	701d      	strb	r5, [r3, #0]
 800ed12:	4982      	ldr	r1, [pc, #520]	; (800ef1c <pack_u8+0x28c>)
 800ed14:	4620      	mov	r0, r4
 800ed16:	f000 fccb 	bl	800f6b0 <is_key>
 800ed1a:	b108      	cbz	r0, 800ed20 <pack_u8+0x90>
 800ed1c:	4b80      	ldr	r3, [pc, #512]	; (800ef20 <pack_u8+0x290>)
 800ed1e:	701d      	strb	r5, [r3, #0]
 800ed20:	4980      	ldr	r1, [pc, #512]	; (800ef24 <pack_u8+0x294>)
 800ed22:	4620      	mov	r0, r4
 800ed24:	f000 fcc4 	bl	800f6b0 <is_key>
 800ed28:	b108      	cbz	r0, 800ed2e <pack_u8+0x9e>
 800ed2a:	4b7f      	ldr	r3, [pc, #508]	; (800ef28 <pack_u8+0x298>)
 800ed2c:	701d      	strb	r5, [r3, #0]
 800ed2e:	497f      	ldr	r1, [pc, #508]	; (800ef2c <pack_u8+0x29c>)
 800ed30:	4620      	mov	r0, r4
 800ed32:	f000 fcbd 	bl	800f6b0 <is_key>
 800ed36:	b108      	cbz	r0, 800ed3c <pack_u8+0xac>
 800ed38:	4b7d      	ldr	r3, [pc, #500]	; (800ef30 <pack_u8+0x2a0>)
 800ed3a:	701d      	strb	r5, [r3, #0]
 800ed3c:	497d      	ldr	r1, [pc, #500]	; (800ef34 <pack_u8+0x2a4>)
 800ed3e:	4620      	mov	r0, r4
 800ed40:	f000 fcb6 	bl	800f6b0 <is_key>
 800ed44:	b108      	cbz	r0, 800ed4a <pack_u8+0xba>
 800ed46:	4b7c      	ldr	r3, [pc, #496]	; (800ef38 <pack_u8+0x2a8>)
 800ed48:	701d      	strb	r5, [r3, #0]
 800ed4a:	497c      	ldr	r1, [pc, #496]	; (800ef3c <pack_u8+0x2ac>)
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	f000 fcaf 	bl	800f6b0 <is_key>
 800ed52:	b108      	cbz	r0, 800ed58 <pack_u8+0xc8>
 800ed54:	4b7a      	ldr	r3, [pc, #488]	; (800ef40 <pack_u8+0x2b0>)
 800ed56:	701d      	strb	r5, [r3, #0]
 800ed58:	497a      	ldr	r1, [pc, #488]	; (800ef44 <pack_u8+0x2b4>)
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f000 fca8 	bl	800f6b0 <is_key>
 800ed60:	b108      	cbz	r0, 800ed66 <pack_u8+0xd6>
 800ed62:	4b79      	ldr	r3, [pc, #484]	; (800ef48 <pack_u8+0x2b8>)
 800ed64:	701d      	strb	r5, [r3, #0]
 800ed66:	4979      	ldr	r1, [pc, #484]	; (800ef4c <pack_u8+0x2bc>)
 800ed68:	4620      	mov	r0, r4
 800ed6a:	f000 fca1 	bl	800f6b0 <is_key>
 800ed6e:	b108      	cbz	r0, 800ed74 <pack_u8+0xe4>
 800ed70:	4b77      	ldr	r3, [pc, #476]	; (800ef50 <pack_u8+0x2c0>)
 800ed72:	701d      	strb	r5, [r3, #0]
 800ed74:	4977      	ldr	r1, [pc, #476]	; (800ef54 <pack_u8+0x2c4>)
 800ed76:	4620      	mov	r0, r4
 800ed78:	f000 fc9a 	bl	800f6b0 <is_key>
 800ed7c:	b108      	cbz	r0, 800ed82 <pack_u8+0xf2>
 800ed7e:	4b76      	ldr	r3, [pc, #472]	; (800ef58 <pack_u8+0x2c8>)
 800ed80:	701d      	strb	r5, [r3, #0]
 800ed82:	4976      	ldr	r1, [pc, #472]	; (800ef5c <pack_u8+0x2cc>)
 800ed84:	4620      	mov	r0, r4
 800ed86:	f000 fc93 	bl	800f6b0 <is_key>
 800ed8a:	b108      	cbz	r0, 800ed90 <pack_u8+0x100>
 800ed8c:	4b74      	ldr	r3, [pc, #464]	; (800ef60 <pack_u8+0x2d0>)
 800ed8e:	701d      	strb	r5, [r3, #0]
 800ed90:	4974      	ldr	r1, [pc, #464]	; (800ef64 <pack_u8+0x2d4>)
 800ed92:	4620      	mov	r0, r4
 800ed94:	f000 fc8c 	bl	800f6b0 <is_key>
 800ed98:	b108      	cbz	r0, 800ed9e <pack_u8+0x10e>
 800ed9a:	4b73      	ldr	r3, [pc, #460]	; (800ef68 <pack_u8+0x2d8>)
 800ed9c:	701d      	strb	r5, [r3, #0]
 800ed9e:	4973      	ldr	r1, [pc, #460]	; (800ef6c <pack_u8+0x2dc>)
 800eda0:	4620      	mov	r0, r4
 800eda2:	f000 fc85 	bl	800f6b0 <is_key>
 800eda6:	b108      	cbz	r0, 800edac <pack_u8+0x11c>
 800eda8:	4b71      	ldr	r3, [pc, #452]	; (800ef70 <pack_u8+0x2e0>)
 800edaa:	701d      	strb	r5, [r3, #0]
 800edac:	4971      	ldr	r1, [pc, #452]	; (800ef74 <pack_u8+0x2e4>)
 800edae:	4620      	mov	r0, r4
 800edb0:	f000 fc7e 	bl	800f6b0 <is_key>
 800edb4:	b108      	cbz	r0, 800edba <pack_u8+0x12a>
 800edb6:	4b70      	ldr	r3, [pc, #448]	; (800ef78 <pack_u8+0x2e8>)
 800edb8:	701d      	strb	r5, [r3, #0]
 800edba:	4970      	ldr	r1, [pc, #448]	; (800ef7c <pack_u8+0x2ec>)
 800edbc:	4620      	mov	r0, r4
 800edbe:	f000 fc77 	bl	800f6b0 <is_key>
 800edc2:	b108      	cbz	r0, 800edc8 <pack_u8+0x138>
 800edc4:	4b6e      	ldr	r3, [pc, #440]	; (800ef80 <pack_u8+0x2f0>)
 800edc6:	701d      	strb	r5, [r3, #0]
 800edc8:	496e      	ldr	r1, [pc, #440]	; (800ef84 <pack_u8+0x2f4>)
 800edca:	4620      	mov	r0, r4
 800edcc:	f000 fc70 	bl	800f6b0 <is_key>
 800edd0:	b108      	cbz	r0, 800edd6 <pack_u8+0x146>
 800edd2:	4b6d      	ldr	r3, [pc, #436]	; (800ef88 <pack_u8+0x2f8>)
 800edd4:	701d      	strb	r5, [r3, #0]
 800edd6:	496d      	ldr	r1, [pc, #436]	; (800ef8c <pack_u8+0x2fc>)
 800edd8:	4620      	mov	r0, r4
 800edda:	f000 fc69 	bl	800f6b0 <is_key>
 800edde:	b108      	cbz	r0, 800ede4 <pack_u8+0x154>
 800ede0:	4b6b      	ldr	r3, [pc, #428]	; (800ef90 <pack_u8+0x300>)
 800ede2:	701d      	strb	r5, [r3, #0]
 800ede4:	4941      	ldr	r1, [pc, #260]	; (800eeec <pack_u8+0x25c>)
 800ede6:	4620      	mov	r0, r4
 800ede8:	f000 fc62 	bl	800f6b0 <is_key>
 800edec:	b108      	cbz	r0, 800edf2 <pack_u8+0x162>
 800edee:	4b40      	ldr	r3, [pc, #256]	; (800eef0 <pack_u8+0x260>)
 800edf0:	701d      	strb	r5, [r3, #0]
 800edf2:	4968      	ldr	r1, [pc, #416]	; (800ef94 <pack_u8+0x304>)
 800edf4:	4620      	mov	r0, r4
 800edf6:	f000 fc5b 	bl	800f6b0 <is_key>
 800edfa:	b108      	cbz	r0, 800ee00 <pack_u8+0x170>
 800edfc:	4b66      	ldr	r3, [pc, #408]	; (800ef98 <pack_u8+0x308>)
 800edfe:	701d      	strb	r5, [r3, #0]
 800ee00:	4966      	ldr	r1, [pc, #408]	; (800ef9c <pack_u8+0x30c>)
 800ee02:	4620      	mov	r0, r4
 800ee04:	f000 fc54 	bl	800f6b0 <is_key>
 800ee08:	b108      	cbz	r0, 800ee0e <pack_u8+0x17e>
 800ee0a:	4b65      	ldr	r3, [pc, #404]	; (800efa0 <pack_u8+0x310>)
 800ee0c:	701d      	strb	r5, [r3, #0]
 800ee0e:	4965      	ldr	r1, [pc, #404]	; (800efa4 <pack_u8+0x314>)
 800ee10:	4620      	mov	r0, r4
 800ee12:	f000 fc4d 	bl	800f6b0 <is_key>
 800ee16:	b108      	cbz	r0, 800ee1c <pack_u8+0x18c>
 800ee18:	4b63      	ldr	r3, [pc, #396]	; (800efa8 <pack_u8+0x318>)
 800ee1a:	701d      	strb	r5, [r3, #0]
 800ee1c:	4963      	ldr	r1, [pc, #396]	; (800efac <pack_u8+0x31c>)
 800ee1e:	4620      	mov	r0, r4
 800ee20:	f000 fc46 	bl	800f6b0 <is_key>
 800ee24:	b108      	cbz	r0, 800ee2a <pack_u8+0x19a>
 800ee26:	4b62      	ldr	r3, [pc, #392]	; (800efb0 <pack_u8+0x320>)
 800ee28:	701d      	strb	r5, [r3, #0]
 800ee2a:	4962      	ldr	r1, [pc, #392]	; (800efb4 <pack_u8+0x324>)
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	f000 fc3f 	bl	800f6b0 <is_key>
 800ee32:	b108      	cbz	r0, 800ee38 <pack_u8+0x1a8>
 800ee34:	4b60      	ldr	r3, [pc, #384]	; (800efb8 <pack_u8+0x328>)
 800ee36:	701d      	strb	r5, [r3, #0]
 800ee38:	4960      	ldr	r1, [pc, #384]	; (800efbc <pack_u8+0x32c>)
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f000 fc38 	bl	800f6b0 <is_key>
 800ee40:	b108      	cbz	r0, 800ee46 <pack_u8+0x1b6>
 800ee42:	4b5f      	ldr	r3, [pc, #380]	; (800efc0 <pack_u8+0x330>)
 800ee44:	701d      	strb	r5, [r3, #0]
 800ee46:	495f      	ldr	r1, [pc, #380]	; (800efc4 <pack_u8+0x334>)
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f000 fc31 	bl	800f6b0 <is_key>
 800ee4e:	b108      	cbz	r0, 800ee54 <pack_u8+0x1c4>
 800ee50:	4b5d      	ldr	r3, [pc, #372]	; (800efc8 <pack_u8+0x338>)
 800ee52:	701d      	strb	r5, [r3, #0]
 800ee54:	495d      	ldr	r1, [pc, #372]	; (800efcc <pack_u8+0x33c>)
 800ee56:	4620      	mov	r0, r4
 800ee58:	f000 fc2a 	bl	800f6b0 <is_key>
 800ee5c:	b108      	cbz	r0, 800ee62 <pack_u8+0x1d2>
 800ee5e:	4b5c      	ldr	r3, [pc, #368]	; (800efd0 <pack_u8+0x340>)
 800ee60:	701d      	strb	r5, [r3, #0]
 800ee62:	495c      	ldr	r1, [pc, #368]	; (800efd4 <pack_u8+0x344>)
 800ee64:	4620      	mov	r0, r4
 800ee66:	f000 fc23 	bl	800f6b0 <is_key>
 800ee6a:	b108      	cbz	r0, 800ee70 <pack_u8+0x1e0>
 800ee6c:	4b5a      	ldr	r3, [pc, #360]	; (800efd8 <pack_u8+0x348>)
 800ee6e:	701d      	strb	r5, [r3, #0]
 800ee70:	495a      	ldr	r1, [pc, #360]	; (800efdc <pack_u8+0x34c>)
 800ee72:	4620      	mov	r0, r4
 800ee74:	f000 fc1c 	bl	800f6b0 <is_key>
 800ee78:	b108      	cbz	r0, 800ee7e <pack_u8+0x1ee>
 800ee7a:	4b59      	ldr	r3, [pc, #356]	; (800efe0 <pack_u8+0x350>)
 800ee7c:	701d      	strb	r5, [r3, #0]
 800ee7e:	4959      	ldr	r1, [pc, #356]	; (800efe4 <pack_u8+0x354>)
 800ee80:	4620      	mov	r0, r4
 800ee82:	f000 fc15 	bl	800f6b0 <is_key>
 800ee86:	b108      	cbz	r0, 800ee8c <pack_u8+0x1fc>
 800ee88:	4b57      	ldr	r3, [pc, #348]	; (800efe8 <pack_u8+0x358>)
 800ee8a:	701d      	strb	r5, [r3, #0]
 800ee8c:	4957      	ldr	r1, [pc, #348]	; (800efec <pack_u8+0x35c>)
 800ee8e:	4620      	mov	r0, r4
 800ee90:	f000 fc0e 	bl	800f6b0 <is_key>
 800ee94:	b108      	cbz	r0, 800ee9a <pack_u8+0x20a>
 800ee96:	4b56      	ldr	r3, [pc, #344]	; (800eff0 <pack_u8+0x360>)
 800ee98:	701d      	strb	r5, [r3, #0]
 800ee9a:	4956      	ldr	r1, [pc, #344]	; (800eff4 <pack_u8+0x364>)
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f000 fc07 	bl	800f6b0 <is_key>
 800eea2:	b108      	cbz	r0, 800eea8 <pack_u8+0x218>
 800eea4:	4b54      	ldr	r3, [pc, #336]	; (800eff8 <pack_u8+0x368>)
 800eea6:	701d      	strb	r5, [r3, #0]
 800eea8:	4954      	ldr	r1, [pc, #336]	; (800effc <pack_u8+0x36c>)
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 fc00 	bl	800f6b0 <is_key>
 800eeb0:	b108      	cbz	r0, 800eeb6 <pack_u8+0x226>
 800eeb2:	4b53      	ldr	r3, [pc, #332]	; (800f000 <pack_u8+0x370>)
 800eeb4:	701d      	strb	r5, [r3, #0]
 800eeb6:	4953      	ldr	r1, [pc, #332]	; (800f004 <pack_u8+0x374>)
 800eeb8:	4620      	mov	r0, r4
 800eeba:	f000 fbf9 	bl	800f6b0 <is_key>
 800eebe:	b108      	cbz	r0, 800eec4 <pack_u8+0x234>
 800eec0:	4b51      	ldr	r3, [pc, #324]	; (800f008 <pack_u8+0x378>)
 800eec2:	701d      	strb	r5, [r3, #0]
 800eec4:	4951      	ldr	r1, [pc, #324]	; (800f00c <pack_u8+0x37c>)
 800eec6:	4620      	mov	r0, r4
 800eec8:	f000 fbf2 	bl	800f6b0 <is_key>
 800eecc:	b108      	cbz	r0, 800eed2 <pack_u8+0x242>
 800eece:	4b50      	ldr	r3, [pc, #320]	; (800f010 <pack_u8+0x380>)
 800eed0:	701d      	strb	r5, [r3, #0]
 800eed2:	bd38      	pop	{r3, r4, r5, pc}
 800eed4:	08014590 	.word	0x08014590
 800eed8:	20011e5c 	.word	0x20011e5c
 800eedc:	0801459c 	.word	0x0801459c
 800eee0:	200084ec 	.word	0x200084ec
 800eee4:	080145a8 	.word	0x080145a8
 800eee8:	2000a945 	.word	0x2000a945
 800eeec:	080145b4 	.word	0x080145b4
 800eef0:	2000b564 	.word	0x2000b564
 800eef4:	08014584 	.word	0x08014584
 800eef8:	2000a944 	.word	0x2000a944
 800eefc:	080145bc 	.word	0x080145bc
 800ef00:	20012268 	.word	0x20012268
 800ef04:	080145d0 	.word	0x080145d0
 800ef08:	20012674 	.word	0x20012674
 800ef0c:	080145dc 	.word	0x080145dc
 800ef10:	2000a538 	.word	0x2000a538
 800ef14:	080145e8 	.word	0x080145e8
 800ef18:	2000a12c 	.word	0x2000a12c
 800ef1c:	080145f4 	.word	0x080145f4
 800ef20:	20003840 	.word	0x20003840
 800ef24:	08014600 	.word	0x08014600
 800ef28:	2000e9dc 	.word	0x2000e9dc
 800ef2c:	08014610 	.word	0x08014610
 800ef30:	20010628 	.word	0x20010628
 800ef34:	0801461c 	.word	0x0801461c
 800ef38:	20007cd6 	.word	0x20007cd6
 800ef3c:	08014628 	.word	0x08014628
 800ef40:	200080e0 	.word	0x200080e0
 800ef44:	08014638 	.word	0x08014638
 800ef48:	200078cc 	.word	0x200078cc
 800ef4c:	0801464c 	.word	0x0801464c
 800ef50:	200078cd 	.word	0x200078cd
 800ef54:	08014660 	.word	0x08014660
 800ef58:	200078ce 	.word	0x200078ce
 800ef5c:	08014670 	.word	0x08014670
 800ef60:	20012e8a 	.word	0x20012e8a
 800ef64:	08014680 	.word	0x08014680
 800ef68:	2000e9de 	.word	0x2000e9de
 800ef6c:	08014688 	.word	0x08014688
 800ef70:	20006098 	.word	0x20006098
 800ef74:	0801469c 	.word	0x0801469c
 800ef78:	20006099 	.word	0x20006099
 800ef7c:	080146b0 	.word	0x080146b0
 800ef80:	200078cf 	.word	0x200078cf
 800ef84:	080146b8 	.word	0x080146b8
 800ef88:	2000c998 	.word	0x2000c998
 800ef8c:	080146c8 	.word	0x080146c8
 800ef90:	20007cd5 	.word	0x20007cd5
 800ef94:	080146d4 	.word	0x080146d4
 800ef98:	2000a947 	.word	0x2000a947
 800ef9c:	080146dc 	.word	0x080146dc
 800efa0:	2000d9b9 	.word	0x2000d9b9
 800efa4:	080146f0 	.word	0x080146f0
 800efa8:	2000bd78 	.word	0x2000bd78
 800efac:	08014700 	.word	0x08014700
 800efb0:	2000bd7a 	.word	0x2000bd7a
 800efb4:	08014710 	.word	0x08014710
 800efb8:	2000b565 	.word	0x2000b565
 800efbc:	08014724 	.word	0x08014724
 800efc0:	2000c184 	.word	0x2000c184
 800efc4:	08014738 	.word	0x08014738
 800efc8:	2000c185 	.word	0x2000c185
 800efcc:	0801474c 	.word	0x0801474c
 800efd0:	2000bd79 	.word	0x2000bd79
 800efd4:	0801475c 	.word	0x0801475c
 800efd8:	2000a946 	.word	0x2000a946
 800efdc:	08014764 	.word	0x08014764
 800efe0:	2000609a 	.word	0x2000609a
 800efe4:	08014770 	.word	0x08014770
 800efe8:	2000f1f1 	.word	0x2000f1f1
 800efec:	08014778 	.word	0x08014778
 800eff0:	2000f1f0 	.word	0x2000f1f0
 800eff4:	08014784 	.word	0x08014784
 800eff8:	20007cd4 	.word	0x20007cd4
 800effc:	08014790 	.word	0x08014790
 800f000:	2000fe14 	.word	0x2000fe14
 800f004:	08014798 	.word	0x08014798
 800f008:	20004865 	.word	0x20004865
 800f00c:	080147a0 	.word	0x080147a0
 800f010:	20004864 	.word	0x20004864
	...

0800f020 <clear_package_buffer>:
 800f020:	4b13      	ldr	r3, [pc, #76]	; (800f070 <clear_package_buffer+0x50>)
 800f022:	4914      	ldr	r1, [pc, #80]	; (800f074 <clear_package_buffer+0x54>)
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	2200      	movs	r2, #0
 800f028:	2b36      	cmp	r3, #54	; 0x36
 800f02a:	600a      	str	r2, [r1, #0]
 800f02c:	d00c      	beq.n	800f048 <clear_package_buffer+0x28>
 800f02e:	4b12      	ldr	r3, [pc, #72]	; (800f078 <clear_package_buffer+0x58>)
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	2b36      	cmp	r3, #54	; 0x36
 800f034:	d008      	beq.n	800f048 <clear_package_buffer+0x28>
 800f036:	4911      	ldr	r1, [pc, #68]	; (800f07c <clear_package_buffer+0x5c>)
 800f038:	4b11      	ldr	r3, [pc, #68]	; (800f080 <clear_package_buffer+0x60>)
 800f03a:	600a      	str	r2, [r1, #0]
 800f03c:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 800f040:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f044:	428b      	cmp	r3, r1
 800f046:	d1fb      	bne.n	800f040 <clear_package_buffer+0x20>
 800f048:	4b0e      	ldr	r3, [pc, #56]	; (800f084 <clear_package_buffer+0x64>)
 800f04a:	2200      	movs	r2, #0
 800f04c:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 800f050:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f054:	428b      	cmp	r3, r1
 800f056:	d1fb      	bne.n	800f050 <clear_package_buffer+0x30>
 800f058:	490b      	ldr	r1, [pc, #44]	; (800f088 <clear_package_buffer+0x68>)
 800f05a:	4b0c      	ldr	r3, [pc, #48]	; (800f08c <clear_package_buffer+0x6c>)
 800f05c:	600a      	str	r2, [r1, #0]
 800f05e:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 800f062:	2200      	movs	r2, #0
 800f064:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f068:	4299      	cmp	r1, r3
 800f06a:	d1fb      	bne.n	800f064 <clear_package_buffer+0x44>
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop
 800f070:	2000e9dd 	.word	0x2000e9dd
 800f074:	2000cd9c 	.word	0x2000cd9c
 800f078:	20009511 	.word	0x20009511
 800f07c:	20006cb0 	.word	0x20006cb0
 800f080:	200068ab 	.word	0x200068ab
 800f084:	2000c99b 	.word	0x2000c99b
 800f088:	20007cd0 	.word	0x20007cd0
 800f08c:	200078cf 	.word	0x200078cf

0800f090 <pack_data_u8>:
 800f090:	b470      	push	{r4, r5, r6}
 800f092:	4b05      	ldr	r3, [pc, #20]	; (800f0a8 <pack_data_u8+0x18>)
 800f094:	4d05      	ldr	r5, [pc, #20]	; (800f0ac <pack_data_u8+0x1c>)
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	4606      	mov	r6, r0
 800f09a:	1c51      	adds	r1, r2, #1
 800f09c:	4620      	mov	r0, r4
 800f09e:	54ae      	strb	r6, [r5, r2]
 800f0a0:	bc70      	pop	{r4, r5, r6}
 800f0a2:	6019      	str	r1, [r3, #0]
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop
 800f0a8:	20007cd0 	.word	0x20007cd0
 800f0ac:	200078d0 	.word	0x200078d0

0800f0b0 <pack_data_u16>:
 800f0b0:	b430      	push	{r4, r5}
 800f0b2:	4907      	ldr	r1, [pc, #28]	; (800f0d0 <pack_data_u16+0x20>)
 800f0b4:	4d07      	ldr	r5, [pc, #28]	; (800f0d4 <pack_data_u16+0x24>)
 800f0b6:	680b      	ldr	r3, [r1, #0]
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	7814      	ldrb	r4, [r2, #0]
 800f0bc:	54ec      	strb	r4, [r5, r3]
 800f0be:	1c5c      	adds	r4, r3, #1
 800f0c0:	600c      	str	r4, [r1, #0]
 800f0c2:	7852      	ldrb	r2, [r2, #1]
 800f0c4:	552a      	strb	r2, [r5, r4]
 800f0c6:	3302      	adds	r3, #2
 800f0c8:	bc30      	pop	{r4, r5}
 800f0ca:	600b      	str	r3, [r1, #0]
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop
 800f0d0:	20007cd0 	.word	0x20007cd0
 800f0d4:	200078d0 	.word	0x200078d0
	...

0800f0e0 <pack_data_node>:
 800f0e0:	b084      	sub	sp, #16
 800f0e2:	b470      	push	{r4, r5, r6}
 800f0e4:	ac03      	add	r4, sp, #12
 800f0e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f0ea:	9b04      	ldr	r3, [sp, #16]
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d009      	beq.n	800f104 <pack_data_node+0x24>
 800f0f0:	2b02      	cmp	r3, #2
 800f0f2:	d01b      	beq.n	800f12c <pack_data_node+0x4c>
 800f0f4:	2b03      	cmp	r3, #3
 800f0f6:	d021      	beq.n	800f13c <pack_data_node+0x5c>
 800f0f8:	4a15      	ldr	r2, [pc, #84]	; (800f150 <pack_data_node+0x70>)
 800f0fa:	4916      	ldr	r1, [pc, #88]	; (800f154 <pack_data_node+0x74>)
 800f0fc:	6813      	ldr	r3, [r2, #0]
 800f0fe:	1c5c      	adds	r4, r3, #1
 800f100:	54c8      	strb	r0, [r1, r3]
 800f102:	6014      	str	r4, [r2, #0]
 800f104:	2800      	cmp	r0, #0
 800f106:	dd0e      	ble.n	800f126 <pack_data_node+0x46>
 800f108:	4e11      	ldr	r6, [pc, #68]	; (800f150 <pack_data_node+0x70>)
 800f10a:	4a13      	ldr	r2, [pc, #76]	; (800f158 <pack_data_node+0x78>)
 800f10c:	6835      	ldr	r5, [r6, #0]
 800f10e:	f10d 0313 	add.w	r3, sp, #19
 800f112:	442a      	add	r2, r5
 800f114:	181c      	adds	r4, r3, r0
 800f116:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f11a:	f802 1f01 	strb.w	r1, [r2, #1]!
 800f11e:	42a3      	cmp	r3, r4
 800f120:	d1f9      	bne.n	800f116 <pack_data_node+0x36>
 800f122:	4428      	add	r0, r5
 800f124:	6030      	str	r0, [r6, #0]
 800f126:	bc70      	pop	{r4, r5, r6}
 800f128:	b004      	add	sp, #16
 800f12a:	4770      	bx	lr
 800f12c:	4a08      	ldr	r2, [pc, #32]	; (800f150 <pack_data_node+0x70>)
 800f12e:	4d09      	ldr	r5, [pc, #36]	; (800f154 <pack_data_node+0x74>)
 800f130:	6811      	ldr	r1, [r2, #0]
 800f132:	1c43      	adds	r3, r0, #1
 800f134:	1c4c      	adds	r4, r1, #1
 800f136:	546b      	strb	r3, [r5, r1]
 800f138:	6014      	str	r4, [r2, #0]
 800f13a:	e7e3      	b.n	800f104 <pack_data_node+0x24>
 800f13c:	4904      	ldr	r1, [pc, #16]	; (800f150 <pack_data_node+0x70>)
 800f13e:	4a05      	ldr	r2, [pc, #20]	; (800f154 <pack_data_node+0x74>)
 800f140:	680b      	ldr	r3, [r1, #0]
 800f142:	18d4      	adds	r4, r2, r3
 800f144:	1c9d      	adds	r5, r3, #2
 800f146:	600d      	str	r5, [r1, #0]
 800f148:	1201      	asrs	r1, r0, #8
 800f14a:	54d1      	strb	r1, [r2, r3]
 800f14c:	7060      	strb	r0, [r4, #1]
 800f14e:	e7d9      	b.n	800f104 <pack_data_node+0x24>
 800f150:	20007cd0 	.word	0x20007cd0
 800f154:	200078d0 	.word	0x200078d0
 800f158:	200078cf 	.word	0x200078cf
 800f15c:	00000000 	.word	0x00000000

0800f160 <get>:
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	460d      	mov	r5, r1
 800f164:	4908      	ldr	r1, [pc, #32]	; (800f188 <get+0x28>)
 800f166:	4604      	mov	r4, r0
 800f168:	f000 faa2 	bl	800f6b0 <is_key>
 800f16c:	b938      	cbnz	r0, 800f17e <get+0x1e>
 800f16e:	4b07      	ldr	r3, [pc, #28]	; (800f18c <get+0x2c>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	b143      	cbz	r3, 800f186 <get+0x26>
 800f174:	4629      	mov	r1, r5
 800f176:	4620      	mov	r0, r4
 800f178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f17c:	4718      	bx	r3
 800f17e:	4b04      	ldr	r3, [pc, #16]	; (800f190 <get+0x30>)
 800f180:	78db      	ldrb	r3, [r3, #3]
 800f182:	702b      	strb	r3, [r5, #0]
 800f184:	2001      	movs	r0, #1
 800f186:	bd70      	pop	{r4, r5, r6, pc}
 800f188:	080147ac 	.word	0x080147ac
 800f18c:	20006cac 	.word	0x20006cac
 800f190:	2000c99c 	.word	0x2000c99c
	...

0800f1a0 <pack>:
 800f1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1a4:	2400      	movs	r4, #0
 800f1a6:	b0a0      	sub	sp, #128	; 0x80
 800f1a8:	4689      	mov	r9, r1
 800f1aa:	4692      	mov	sl, r2
 800f1ac:	4621      	mov	r1, r4
 800f1ae:	227c      	movs	r2, #124	; 0x7c
 800f1b0:	4606      	mov	r6, r0
 800f1b2:	a801      	add	r0, sp, #4
 800f1b4:	4698      	mov	r8, r3
 800f1b6:	9400      	str	r4, [sp, #0]
 800f1b8:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800f1ba:	e9dd 7428 	ldrd	r7, r4, [sp, #160]	; 0xa0
 800f1be:	f003 f907 	bl	80123d0 <memset>
 800f1c2:	4669      	mov	r1, sp
 800f1c4:	4881      	ldr	r0, [pc, #516]	; (800f3cc <pack+0x22c>)
 800f1c6:	f7ff ffcb 	bl	800f160 <get>
 800f1ca:	4b81      	ldr	r3, [pc, #516]	; (800f3d0 <pack+0x230>)
 800f1cc:	f8df c224 	ldr.w	ip, [pc, #548]	; 800f3f4 <pack+0x254>
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	4880      	ldr	r0, [pc, #512]	; (800f3d4 <pack+0x234>)
 800f1d4:	fa5f f28a 	uxtb.w	r2, sl
 800f1d8:	fa5f f189 	uxtb.w	r1, r9
 800f1dc:	2b36      	cmp	r3, #54	; 0x36
 800f1de:	f88c 2000 	strb.w	r2, [ip]
 800f1e2:	7001      	strb	r1, [r0, #0]
 800f1e4:	f000 8097 	beq.w	800f316 <pack+0x176>
 800f1e8:	4b7b      	ldr	r3, [pc, #492]	; (800f3d8 <pack+0x238>)
 800f1ea:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800f1ee:	7019      	strb	r1, [r3, #0]
 800f1f0:	705a      	strb	r2, [r3, #1]
 800f1f2:	f883 8002 	strb.w	r8, [r3, #2]
 800f1f6:	f200 808a 	bhi.w	800f30e <pack+0x16e>
 800f1fa:	711c      	strb	r4, [r3, #4]
 800f1fc:	2c00      	cmp	r4, #0
 800f1fe:	f000 80d3 	beq.w	800f3a8 <pack+0x208>
 800f202:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800f3f8 <pack+0x258>
 800f206:	1e78      	subs	r0, r7, #1
 800f208:	4603      	mov	r3, r0
 800f20a:	3302      	adds	r3, #2
 800f20c:	1bdb      	subs	r3, r3, r7
 800f20e:	f810 ef01 	ldrb.w	lr, [r0, #1]!
 800f212:	f80c ef01 	strb.w	lr, [ip, #1]!
 800f216:	429c      	cmp	r4, r3
 800f218:	d8f6      	bhi.n	800f208 <pack+0x68>
 800f21a:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 800f3fc <pack+0x25c>
 800f21e:	4f6f      	ldr	r7, [pc, #444]	; (800f3dc <pack+0x23c>)
 800f220:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 800f3e4 <pack+0x244>
 800f224:	f104 030a 	add.w	r3, r4, #10
 800f228:	1d60      	adds	r0, r4, #5
 800f22a:	f8cc 3000 	str.w	r3, [ip]
 800f22e:	1da3      	adds	r3, r4, #6
 800f230:	6038      	str	r0, [r7, #0]
 800f232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f236:	f04f 074d 	mov.w	r7, #77	; 0x4d
 800f23a:	f88e 7000 	strb.w	r7, [lr]
 800f23e:	f240 80c1 	bls.w	800f3c4 <pack+0x224>
 800f242:	121f      	asrs	r7, r3, #8
 800f244:	f88e 3002 	strb.w	r3, [lr, #2]
 800f248:	f88e 7001 	strb.w	r7, [lr, #1]
 800f24c:	4b64      	ldr	r3, [pc, #400]	; (800f3e0 <pack+0x240>)
 800f24e:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f400 <pack+0x260>
 800f252:	4f61      	ldr	r7, [pc, #388]	; (800f3d8 <pack+0x238>)
 800f254:	b2f6      	uxtb	r6, r6
 800f256:	f88e 6003 	strb.w	r6, [lr, #3]
 800f25a:	f1a3 0e03 	sub.w	lr, r3, #3
 800f25e:	f888 6000 	strb.w	r6, [r8]
 800f262:	eb03 0900 	add.w	r9, r3, r0
 800f266:	46f0      	mov	r8, lr
 800f268:	4608      	mov	r0, r1
 800f26a:	e001      	b.n	800f270 <pack+0xd0>
 800f26c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 800f270:	f803 0f01 	strb.w	r0, [r3, #1]!
 800f274:	454b      	cmp	r3, r9
 800f276:	d1f9      	bne.n	800f26c <pack+0xcc>
 800f278:	2000      	movs	r0, #0
 800f27a:	3409      	adds	r4, #9
 800f27c:	4603      	mov	r3, r0
 800f27e:	274d      	movs	r7, #77	; 0x4d
 800f280:	e001      	b.n	800f286 <pack+0xe6>
 800f282:	f818 7f01 	ldrb.w	r7, [r8, #1]!
 800f286:	3301      	adds	r3, #1
 800f288:	42a3      	cmp	r3, r4
 800f28a:	ea80 0007 	eor.w	r0, r0, r7
 800f28e:	d3f8      	bcc.n	800f282 <pack+0xe2>
 800f290:	f80e 0004 	strb.w	r0, [lr, r4]
 800f294:	4f53      	ldr	r7, [pc, #332]	; (800f3e4 <pack+0x244>)
 800f296:	1e6b      	subs	r3, r5, #1
 800f298:	204d      	movs	r0, #77	; 0x4d
 800f29a:	e001      	b.n	800f2a0 <pack+0x100>
 800f29c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 800f2a0:	7058      	strb	r0, [r3, #1]
 800f2a2:	1c9c      	adds	r4, r3, #2
 800f2a4:	f8dc 0000 	ldr.w	r0, [ip]
 800f2a8:	1b64      	subs	r4, r4, r5
 800f2aa:	42a0      	cmp	r0, r4
 800f2ac:	f103 0301 	add.w	r3, r3, #1
 800f2b0:	d8f4      	bhi.n	800f29c <pack+0xfc>
 800f2b2:	4b4d      	ldr	r3, [pc, #308]	; (800f3e8 <pack+0x248>)
 800f2b4:	681f      	ldr	r7, [r3, #0]
 800f2b6:	2f00      	cmp	r7, #0
 800f2b8:	dd24      	ble.n	800f304 <pack+0x164>
 800f2ba:	f8df e148 	ldr.w	lr, [pc, #328]	; 800f404 <pack+0x264>
 800f2be:	4b4b      	ldr	r3, [pc, #300]	; (800f3ec <pack+0x24c>)
 800f2c0:	f8de 8000 	ldr.w	r8, [lr]
 800f2c4:	f04f 0c00 	mov.w	ip, #0
 800f2c8:	4664      	mov	r4, ip
 800f2ca:	e003      	b.n	800f2d4 <pack+0x134>
 800f2cc:	42a7      	cmp	r7, r4
 800f2ce:	f103 0308 	add.w	r3, r3, #8
 800f2d2:	d012      	beq.n	800f2fa <pack+0x15a>
 800f2d4:	781d      	ldrb	r5, [r3, #0]
 800f2d6:	42b5      	cmp	r5, r6
 800f2d8:	f104 0401 	add.w	r4, r4, #1
 800f2dc:	d1f6      	bne.n	800f2cc <pack+0x12c>
 800f2de:	785d      	ldrb	r5, [r3, #1]
 800f2e0:	428d      	cmp	r5, r1
 800f2e2:	d1f3      	bne.n	800f2cc <pack+0x12c>
 800f2e4:	789d      	ldrb	r5, [r3, #2]
 800f2e6:	4295      	cmp	r5, r2
 800f2e8:	bf04      	itt	eq
 800f2ea:	f8d3 8004 	ldreq.w	r8, [r3, #4]
 800f2ee:	f04f 0c01 	moveq.w	ip, #1
 800f2f2:	42a7      	cmp	r7, r4
 800f2f4:	f103 0308 	add.w	r3, r3, #8
 800f2f8:	d1ec      	bne.n	800f2d4 <pack+0x134>
 800f2fa:	f1bc 0f00 	cmp.w	ip, #0
 800f2fe:	d001      	beq.n	800f304 <pack+0x164>
 800f300:	f8ce 8000 	str.w	r8, [lr]
 800f304:	f7ff fe8c 	bl	800f020 <clear_package_buffer>
 800f308:	b020      	add	sp, #128	; 0x80
 800f30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f30e:	0a20      	lsrs	r0, r4, #8
 800f310:	711c      	strb	r4, [r3, #4]
 800f312:	70d8      	strb	r0, [r3, #3]
 800f314:	e775      	b.n	800f202 <pack+0x62>
 800f316:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 800f3e4 <pack+0x244>
 800f31a:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800f3fc <pack+0x25c>
 800f31e:	f88e 1004 	strb.w	r1, [lr, #4]
 800f322:	1da3      	adds	r3, r4, #6
 800f324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f328:	f04f 094d 	mov.w	r9, #77	; 0x4d
 800f32c:	f88e 9000 	strb.w	r9, [lr]
 800f330:	bfc4      	itt	gt
 800f332:	ea4f 2923 	movgt.w	r9, r3, asr #8
 800f336:	f88e 9001 	strbgt.w	r9, [lr, #1]
 800f33a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800f400 <pack+0x260>
 800f33e:	bfc8      	it	gt
 800f340:	f88e 3002 	strbgt.w	r3, [lr, #2]
 800f344:	f104 000a 	add.w	r0, r4, #10
 800f348:	bfd8      	it	le
 800f34a:	f88e 3002 	strble.w	r3, [lr, #2]
 800f34e:	2336      	movs	r3, #54	; 0x36
 800f350:	f8cc 0000 	str.w	r0, [ip]
 800f354:	f88e 2005 	strb.w	r2, [lr, #5]
 800f358:	f88e 8006 	strb.w	r8, [lr, #6]
 800f35c:	f889 3000 	strb.w	r3, [r9]
 800f360:	f88e 3003 	strb.w	r3, [lr, #3]
 800f364:	b154      	cbz	r4, 800f37c <pack+0x1dc>
 800f366:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800f36a:	4b21      	ldr	r3, [pc, #132]	; (800f3f0 <pack+0x250>)
 800f36c:	44b9      	add	r9, r7
 800f36e:	3f01      	subs	r7, #1
 800f370:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800f374:	f803 8f01 	strb.w	r8, [r3, #1]!
 800f378:	454f      	cmp	r7, r9
 800f37a:	d1f9      	bne.n	800f370 <pack+0x1d0>
 800f37c:	2700      	movs	r7, #0
 800f37e:	f104 0909 	add.w	r9, r4, #9
 800f382:	463b      	mov	r3, r7
 800f384:	4c17      	ldr	r4, [pc, #92]	; (800f3e4 <pack+0x244>)
 800f386:	f04f 084d 	mov.w	r8, #77	; 0x4d
 800f38a:	e001      	b.n	800f390 <pack+0x1f0>
 800f38c:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 800f390:	3301      	adds	r3, #1
 800f392:	454b      	cmp	r3, r9
 800f394:	ea87 0708 	eor.w	r7, r7, r8
 800f398:	d3f8      	bcc.n	800f38c <pack+0x1ec>
 800f39a:	f80e 7009 	strb.w	r7, [lr, r9]
 800f39e:	b2f6      	uxtb	r6, r6
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	f47f af77 	bne.w	800f294 <pack+0xf4>
 800f3a6:	e784      	b.n	800f2b2 <pack+0x112>
 800f3a8:	4b0c      	ldr	r3, [pc, #48]	; (800f3dc <pack+0x23c>)
 800f3aa:	f8df c050 	ldr.w	ip, [pc, #80]	; 800f3fc <pack+0x25c>
 800f3ae:	f8df e034 	ldr.w	lr, [pc, #52]	; 800f3e4 <pack+0x244>
 800f3b2:	2005      	movs	r0, #5
 800f3b4:	270a      	movs	r7, #10
 800f3b6:	6018      	str	r0, [r3, #0]
 800f3b8:	234d      	movs	r3, #77	; 0x4d
 800f3ba:	f88e 3000 	strb.w	r3, [lr]
 800f3be:	f8cc 7000 	str.w	r7, [ip]
 800f3c2:	2306      	movs	r3, #6
 800f3c4:	f88e 3002 	strb.w	r3, [lr, #2]
 800f3c8:	e740      	b.n	800f24c <pack+0xac>
 800f3ca:	bf00      	nop
 800f3cc:	080147ac 	.word	0x080147ac
 800f3d0:	2000a948 	.word	0x2000a948
 800f3d4:	20009510 	.word	0x20009510
 800f3d8:	200068ac 	.word	0x200068ac
 800f3dc:	20006cb0 	.word	0x20006cb0
 800f3e0:	2000c99f 	.word	0x2000c99f
 800f3e4:	2000c99c 	.word	0x2000c99c
 800f3e8:	200000b4 	.word	0x200000b4
 800f3ec:	200003b0 	.word	0x200003b0
 800f3f0:	2000c9a4 	.word	0x2000c9a4
 800f3f4:	20009512 	.word	0x20009512
 800f3f8:	200068b0 	.word	0x200068b0
 800f3fc:	2000cd9c 	.word	0x2000cd9c
 800f400:	20009511 	.word	0x20009511
 800f404:	20006cac 	.word	0x20006cac
	...

0800f410 <get_dl_package>:
 800f410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f414:	b085      	sub	sp, #20
 800f416:	4680      	mov	r8, r0
 800f418:	4693      	mov	fp, r2
 800f41a:	469a      	mov	sl, r3
 800f41c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f41e:	4689      	mov	r9, r1
 800f420:	f7ff fdfe 	bl	800f020 <clear_package_buffer>
 800f424:	4b18      	ldr	r3, [pc, #96]	; (800f488 <get_dl_package+0x78>)
 800f426:	6818      	ldr	r0, [r3, #0]
 800f428:	2800      	cmp	r0, #0
 800f42a:	f04f 0200 	mov.w	r2, #0
 800f42e:	dd16      	ble.n	800f45e <get_dl_package+0x4e>
 800f430:	4c16      	ldr	r4, [pc, #88]	; (800f48c <get_dl_package+0x7c>)
 800f432:	4615      	mov	r5, r2
 800f434:	e003      	b.n	800f43e <get_dl_package+0x2e>
 800f436:	4285      	cmp	r5, r0
 800f438:	f104 0408 	add.w	r4, r4, #8
 800f43c:	d00f      	beq.n	800f45e <get_dl_package+0x4e>
 800f43e:	7826      	ldrb	r6, [r4, #0]
 800f440:	4546      	cmp	r6, r8
 800f442:	f105 0501 	add.w	r5, r5, #1
 800f446:	d1f6      	bne.n	800f436 <get_dl_package+0x26>
 800f448:	7863      	ldrb	r3, [r4, #1]
 800f44a:	454b      	cmp	r3, r9
 800f44c:	d1f3      	bne.n	800f436 <get_dl_package+0x26>
 800f44e:	78a3      	ldrb	r3, [r4, #2]
 800f450:	455b      	cmp	r3, fp
 800f452:	bf08      	it	eq
 800f454:	6862      	ldreq	r2, [r4, #4]
 800f456:	4285      	cmp	r5, r0
 800f458:	f104 0408 	add.w	r4, r4, #8
 800f45c:	d1ef      	bne.n	800f43e <get_dl_package+0x2e>
 800f45e:	4790      	blx	r2
 800f460:	4b0b      	ldr	r3, [pc, #44]	; (800f490 <get_dl_package+0x80>)
 800f462:	4c0c      	ldr	r4, [pc, #48]	; (800f494 <get_dl_package+0x84>)
 800f464:	681d      	ldr	r5, [r3, #0]
 800f466:	9702      	str	r7, [sp, #8]
 800f468:	e9cd 4500 	strd	r4, r5, [sp]
 800f46c:	4653      	mov	r3, sl
 800f46e:	465a      	mov	r2, fp
 800f470:	4649      	mov	r1, r9
 800f472:	4640      	mov	r0, r8
 800f474:	f7ff fe94 	bl	800f1a0 <pack>
 800f478:	4604      	mov	r4, r0
 800f47a:	f7ff f999 	bl	800e7b0 <reset_global_var>
 800f47e:	4620      	mov	r0, r4
 800f480:	b005      	add	sp, #20
 800f482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f486:	bf00      	nop
 800f488:	200000b4 	.word	0x200000b4
 800f48c:	200000b8 	.word	0x200000b8
 800f490:	20007cd0 	.word	0x20007cd0
 800f494:	200078d0 	.word	0x200078d0
	...

0800f4a0 <unpack_content>:
 800f4a0:	4b0f      	ldr	r3, [pc, #60]	; (800f4e0 <unpack_content+0x40>)
 800f4a2:	4a10      	ldr	r2, [pc, #64]	; (800f4e4 <unpack_content+0x44>)
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	4910      	ldr	r1, [pc, #64]	; (800f4e8 <unpack_content+0x48>)
 800f4a8:	78d0      	ldrb	r0, [r2, #3]
 800f4aa:	7008      	strb	r0, [r1, #0]
 800f4ac:	2b36      	cmp	r3, #54	; 0x36
 800f4ae:	d014      	beq.n	800f4da <unpack_content+0x3a>
 800f4b0:	4b0e      	ldr	r3, [pc, #56]	; (800f4ec <unpack_content+0x4c>)
 800f4b2:	b410      	push	{r4}
 800f4b4:	681c      	ldr	r4, [r3, #0]
 800f4b6:	1e63      	subs	r3, r4, #1
 800f4b8:	2b04      	cmp	r3, #4
 800f4ba:	d909      	bls.n	800f4d0 <unpack_content+0x30>
 800f4bc:	4b0c      	ldr	r3, [pc, #48]	; (800f4f0 <unpack_content+0x50>)
 800f4be:	18e0      	adds	r0, r4, r3
 800f4c0:	3203      	adds	r2, #3
 800f4c2:	3805      	subs	r0, #5
 800f4c4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800f4c8:	f803 1b01 	strb.w	r1, [r3], #1
 800f4cc:	4283      	cmp	r3, r0
 800f4ce:	d1f9      	bne.n	800f4c4 <unpack_content+0x24>
 800f4d0:	4b08      	ldr	r3, [pc, #32]	; (800f4f4 <unpack_content+0x54>)
 800f4d2:	3c05      	subs	r4, #5
 800f4d4:	601c      	str	r4, [r3, #0]
 800f4d6:	bc10      	pop	{r4}
 800f4d8:	4770      	bx	lr
 800f4da:	f7ff b941 	b.w	800e760 <unpack_content.part.0>
 800f4de:	bf00      	nop
 800f4e0:	20009511 	.word	0x20009511
 800f4e4:	2000c99c 	.word	0x2000c99c
 800f4e8:	2000a948 	.word	0x2000a948
 800f4ec:	2000cd9c 	.word	0x2000cd9c
 800f4f0:	200068ac 	.word	0x200068ac
 800f4f4:	20006cb0 	.word	0x20006cb0
	...

0800f500 <copy_content_buf_to_out>:
 800f500:	4603      	mov	r3, r0
 800f502:	1e08      	subs	r0, r1, #0
 800f504:	dd0c      	ble.n	800f520 <copy_content_buf_to_out+0x20>
 800f506:	4907      	ldr	r1, [pc, #28]	; (800f524 <copy_content_buf_to_out+0x24>)
 800f508:	3a01      	subs	r2, #1
 800f50a:	b430      	push	{r4, r5}
 800f50c:	440b      	add	r3, r1
 800f50e:	1815      	adds	r5, r2, r0
 800f510:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800f514:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f518:	42aa      	cmp	r2, r5
 800f51a:	d1f9      	bne.n	800f510 <copy_content_buf_to_out+0x10>
 800f51c:	bc30      	pop	{r4, r5}
 800f51e:	4770      	bx	lr
 800f520:	4770      	bx	lr
 800f522:	bf00      	nop
 800f524:	200068ab 	.word	0x200068ab
	...

0800f530 <copy_content_node_to_out>:
 800f530:	4b08      	ldr	r3, [pc, #32]	; (800f554 <copy_content_node_to_out+0x24>)
 800f532:	4602      	mov	r2, r0
 800f534:	5c18      	ldrb	r0, [r3, r0]
 800f536:	b158      	cbz	r0, 800f550 <copy_content_node_to_out+0x20>
 800f538:	3201      	adds	r2, #1
 800f53a:	b410      	push	{r4}
 800f53c:	4413      	add	r3, r2
 800f53e:	180c      	adds	r4, r1, r0
 800f540:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f544:	f801 2b01 	strb.w	r2, [r1], #1
 800f548:	42a1      	cmp	r1, r4
 800f54a:	d1f9      	bne.n	800f540 <copy_content_node_to_out+0x10>
 800f54c:	bc10      	pop	{r4}
 800f54e:	4770      	bx	lr
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	200068ac 	.word	0x200068ac
	...

0800f560 <copy_content_double_length_node_to_out>:
 800f560:	b410      	push	{r4}
 800f562:	4a0a      	ldr	r2, [pc, #40]	; (800f58c <copy_content_double_length_node_to_out+0x2c>)
 800f564:	4603      	mov	r3, r0
 800f566:	1810      	adds	r0, r2, r0
 800f568:	5cd4      	ldrb	r4, [r2, r3]
 800f56a:	7840      	ldrb	r0, [r0, #1]
 800f56c:	eb10 2004 	adds.w	r0, r0, r4, lsl #8
 800f570:	d009      	beq.n	800f586 <copy_content_double_length_node_to_out+0x26>
 800f572:	3302      	adds	r3, #2
 800f574:	3901      	subs	r1, #1
 800f576:	4413      	add	r3, r2
 800f578:	180c      	adds	r4, r1, r0
 800f57a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f57e:	f801 2f01 	strb.w	r2, [r1, #1]!
 800f582:	42a1      	cmp	r1, r4
 800f584:	d1f9      	bne.n	800f57a <copy_content_double_length_node_to_out+0x1a>
 800f586:	bc10      	pop	{r4}
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	200068ac 	.word	0x200068ac

0800f590 <on_package>:
 800f590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f594:	4688      	mov	r8, r1
 800f596:	f7ff fd43 	bl	800f020 <clear_package_buffer>
 800f59a:	f1b8 0f00 	cmp.w	r8, #0
 800f59e:	d03e      	beq.n	800f61e <on_package+0x8e>
 800f5a0:	4e21      	ldr	r6, [pc, #132]	; (800f628 <on_package+0x98>)
 800f5a2:	4a22      	ldr	r2, [pc, #136]	; (800f62c <on_package+0x9c>)
 800f5a4:	f8d6 9000 	ldr.w	r9, [r6]
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	444a      	add	r2, r9
 800f5ac:	4440      	add	r0, r8
 800f5ae:	eba9 0e03 	sub.w	lr, r9, r3
 800f5b2:	ea6f 0c03 	mvn.w	ip, r3
 800f5b6:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800f5ba:	2700      	movs	r7, #0
 800f5bc:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f5c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f5c4:	eb0e 0503 	add.w	r5, lr, r3
 800f5c8:	eb0c 0403 	add.w	r4, ip, r3
 800f5cc:	42a1      	cmp	r1, r4
 800f5ce:	6035      	str	r5, [r6, #0]
 800f5d0:	bf84      	itt	hi
 800f5d2:	f813 4c01 	ldrbhi.w	r4, [r3, #-1]
 800f5d6:	4067      	eorhi	r7, r4
 800f5d8:	4283      	cmp	r3, r0
 800f5da:	d1ef      	bne.n	800f5bc <on_package+0x2c>
 800f5dc:	eb08 0009 	add.w	r0, r8, r9
 800f5e0:	2803      	cmp	r0, #3
 800f5e2:	d918      	bls.n	800f616 <on_package+0x86>
 800f5e4:	4a12      	ldr	r2, [pc, #72]	; (800f630 <on_package+0xa0>)
 800f5e6:	7851      	ldrb	r1, [r2, #1]
 800f5e8:	7893      	ldrb	r3, [r2, #2]
 800f5ea:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f5ee:	3304      	adds	r3, #4
 800f5f0:	4283      	cmp	r3, r0
 800f5f2:	d008      	beq.n	800f606 <on_package+0x76>
 800f5f4:	2700      	movs	r7, #0
 800f5f6:	4b0f      	ldr	r3, [pc, #60]	; (800f634 <on_package+0xa4>)
 800f5f8:	78d2      	ldrb	r2, [r2, #3]
 800f5fa:	701a      	strb	r2, [r3, #0]
 800f5fc:	f7ff ff50 	bl	800f4a0 <unpack_content>
 800f600:	4638      	mov	r0, r7
 800f602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f606:	1813      	adds	r3, r2, r0
 800f608:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 800f60c:	45b9      	cmp	r9, r7
 800f60e:	bf0c      	ite	eq
 800f610:	4607      	moveq	r7, r0
 800f612:	2700      	movne	r7, #0
 800f614:	e7ef      	b.n	800f5f6 <on_package+0x66>
 800f616:	2700      	movs	r7, #0
 800f618:	4638      	mov	r0, r7
 800f61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f61e:	4b02      	ldr	r3, [pc, #8]	; (800f628 <on_package+0x98>)
 800f620:	4647      	mov	r7, r8
 800f622:	6818      	ldr	r0, [r3, #0]
 800f624:	e7dc      	b.n	800f5e0 <on_package+0x50>
 800f626:	bf00      	nop
 800f628:	2000cd9c 	.word	0x2000cd9c
 800f62c:	2000c99b 	.word	0x2000c99b
 800f630:	2000c99c 	.word	0x2000c99c
 800f634:	2000e9dd 	.word	0x2000e9dd
	...

0800f640 <bcd_2_asc>:
 800f640:	b430      	push	{r4, r5}
 800f642:	f011 0501 	ands.w	r5, r1, #1
 800f646:	d001      	beq.n	800f64c <bcd_2_asc+0xc>
 800f648:	b30b      	cbz	r3, 800f68e <bcd_2_asc+0x4e>
 800f64a:	3101      	adds	r1, #1
 800f64c:	42a9      	cmp	r1, r5
 800f64e:	dd19      	ble.n	800f684 <bcd_2_asc+0x44>
 800f650:	1b4c      	subs	r4, r1, r5
 800f652:	4414      	add	r4, r2
 800f654:	4611      	mov	r1, r2
 800f656:	1aad      	subs	r5, r5, r2
 800f658:	e00d      	b.n	800f676 <bcd_2_asc+0x36>
 800f65a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f65e:	f003 030f 	and.w	r3, r3, #15
 800f662:	4610      	mov	r0, r2
 800f664:	2b09      	cmp	r3, #9
 800f666:	bf8c      	ite	hi
 800f668:	2237      	movhi	r2, #55	; 0x37
 800f66a:	2230      	movls	r2, #48	; 0x30
 800f66c:	4413      	add	r3, r2
 800f66e:	f801 3b01 	strb.w	r3, [r1], #1
 800f672:	42a1      	cmp	r1, r4
 800f674:	d007      	beq.n	800f686 <bcd_2_asc+0x46>
 800f676:	194b      	adds	r3, r1, r5
 800f678:	07db      	lsls	r3, r3, #31
 800f67a:	4602      	mov	r2, r0
 800f67c:	d4ed      	bmi.n	800f65a <bcd_2_asc+0x1a>
 800f67e:	7803      	ldrb	r3, [r0, #0]
 800f680:	091b      	lsrs	r3, r3, #4
 800f682:	e7ef      	b.n	800f664 <bcd_2_asc+0x24>
 800f684:	4614      	mov	r4, r2
 800f686:	2000      	movs	r0, #0
 800f688:	7020      	strb	r0, [r4, #0]
 800f68a:	bc30      	pop	{r4, r5}
 800f68c:	4770      	bx	lr
 800f68e:	461d      	mov	r5, r3
 800f690:	e7dc      	b.n	800f64c <bcd_2_asc+0xc>
 800f692:	bf00      	nop
	...

0800f6a0 <pack_without_data>:
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
	...

0800f6b0 <is_key>:
 800f6b0:	b508      	push	{r3, lr}
 800f6b2:	f7f0 fdbd 	bl	8000230 <strcmp>
 800f6b6:	fab0 f080 	clz	r0, r0
 800f6ba:	0940      	lsrs	r0, r0, #5
 800f6bc:	bd08      	pop	{r3, pc}
 800f6be:	bf00      	nop

0800f6c0 <parser_0000>:
 800f6c0:	2000      	movs	r0, #0
 800f6c2:	4770      	bx	lr
	...

0800f6d0 <parser_1000>:
 800f6d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f6d4:	4f30      	ldr	r7, [pc, #192]	; (800f798 <parser_1000+0xc8>)
 800f6d6:	b0a1      	sub	sp, #132	; 0x84
 800f6d8:	460e      	mov	r6, r1
 800f6da:	4930      	ldr	r1, [pc, #192]	; (800f79c <parser_1000+0xcc>)
 800f6dc:	797c      	ldrb	r4, [r7, #5]
 800f6de:	4605      	mov	r5, r0
 800f6e0:	f7f0 fda6 	bl	8000230 <strcmp>
 800f6e4:	b318      	cbz	r0, 800f72e <parser_1000+0x5e>
 800f6e6:	492e      	ldr	r1, [pc, #184]	; (800f7a0 <parser_1000+0xd0>)
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	f7f0 fda1 	bl	8000230 <strcmp>
 800f6ee:	f104 0906 	add.w	r9, r4, #6
 800f6f2:	4680      	mov	r8, r0
 800f6f4:	b368      	cbz	r0, 800f752 <parser_1000+0x82>
 800f6f6:	f817 3009 	ldrb.w	r3, [r7, r9]
 800f6fa:	492a      	ldr	r1, [pc, #168]	; (800f7a4 <parser_1000+0xd4>)
 800f6fc:	3407      	adds	r4, #7
 800f6fe:	441c      	add	r4, r3
 800f700:	1c62      	adds	r2, r4, #1
 800f702:	5d3b      	ldrb	r3, [r7, r4]
 800f704:	4628      	mov	r0, r5
 800f706:	eb02 0803 	add.w	r8, r2, r3
 800f70a:	f7f0 fd91 	bl	8000230 <strcmp>
 800f70e:	b378      	cbz	r0, 800f770 <parser_1000+0xa0>
 800f710:	4925      	ldr	r1, [pc, #148]	; (800f7a8 <parser_1000+0xd8>)
 800f712:	4628      	mov	r0, r5
 800f714:	f7f0 fd8c 	bl	8000230 <strcmp>
 800f718:	b190      	cbz	r0, 800f740 <parser_1000+0x70>
 800f71a:	4924      	ldr	r1, [pc, #144]	; (800f7ac <parser_1000+0xdc>)
 800f71c:	4628      	mov	r0, r5
 800f71e:	f7f0 fd87 	bl	8000230 <strcmp>
 800f722:	b390      	cbz	r0, 800f78a <parser_1000+0xba>
 800f724:	2400      	movs	r4, #0
 800f726:	4620      	mov	r0, r4
 800f728:	b021      	add	sp, #132	; 0x84
 800f72a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f72e:	4631      	mov	r1, r6
 800f730:	2005      	movs	r0, #5
 800f732:	f7ff fefd 	bl	800f530 <copy_content_node_to_out>
 800f736:	4604      	mov	r4, r0
 800f738:	4620      	mov	r0, r4
 800f73a:	b021      	add	sp, #132	; 0x84
 800f73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f740:	4631      	mov	r1, r6
 800f742:	4620      	mov	r0, r4
 800f744:	f7ff fef4 	bl	800f530 <copy_content_node_to_out>
 800f748:	4604      	mov	r4, r0
 800f74a:	4620      	mov	r0, r4
 800f74c:	b021      	add	sp, #132	; 0x84
 800f74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f752:	4669      	mov	r1, sp
 800f754:	4648      	mov	r0, r9
 800f756:	f7ff feeb 	bl	800f530 <copy_content_node_to_out>
 800f75a:	0044      	lsls	r4, r0, #1
 800f75c:	4643      	mov	r3, r8
 800f75e:	4668      	mov	r0, sp
 800f760:	4632      	mov	r2, r6
 800f762:	4621      	mov	r1, r4
 800f764:	f7ff ff6c 	bl	800f640 <bcd_2_asc>
 800f768:	4620      	mov	r0, r4
 800f76a:	b021      	add	sp, #132	; 0x84
 800f76c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f770:	f817 0008 	ldrb.w	r0, [r7, r8]
 800f774:	f108 0801 	add.w	r8, r8, #1
 800f778:	4440      	add	r0, r8
 800f77a:	4631      	mov	r1, r6
 800f77c:	f7ff fed8 	bl	800f530 <copy_content_node_to_out>
 800f780:	4604      	mov	r4, r0
 800f782:	4620      	mov	r0, r4
 800f784:	b021      	add	sp, #132	; 0x84
 800f786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f78a:	4631      	mov	r1, r6
 800f78c:	4640      	mov	r0, r8
 800f78e:	f7ff fecf 	bl	800f530 <copy_content_node_to_out>
 800f792:	4604      	mov	r4, r0
 800f794:	e7c7      	b.n	800f726 <parser_1000+0x56>
 800f796:	bf00      	nop
 800f798:	200068ac 	.word	0x200068ac
 800f79c:	080147b4 	.word	0x080147b4
 800f7a0:	080147bc 	.word	0x080147bc
 800f7a4:	080147c4 	.word	0x080147c4
 800f7a8:	080147cc 	.word	0x080147cc
 800f7ac:	080147d8 	.word	0x080147d8

0800f7b0 <pack_1010_data>:
 800f7b0:	b570      	push	{r4, r5, r6, lr}
 800f7b2:	4b21      	ldr	r3, [pc, #132]	; (800f838 <pack_1010_data+0x88>)
 800f7b4:	4d21      	ldr	r5, [pc, #132]	; (800f83c <pack_1010_data+0x8c>)
 800f7b6:	7818      	ldrb	r0, [r3, #0]
 800f7b8:	4c21      	ldr	r4, [pc, #132]	; (800f840 <pack_1010_data+0x90>)
 800f7ba:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 800f7be:	f44f 767e 	mov.w	r6, #1016	; 0x3f8
 800f7c2:	f7ff fc65 	bl	800f090 <pack_data_u8>
 800f7c6:	f105 0110 	add.w	r1, r5, #16
 800f7ca:	4632      	mov	r2, r6
 800f7cc:	4668      	mov	r0, sp
 800f7ce:	f002 fdf1 	bl	80123b4 <memcpy>
 800f7d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f7d6:	f7ff fc83 	bl	800f0e0 <pack_data_node>
 800f7da:	4d1a      	ldr	r5, [pc, #104]	; (800f844 <pack_1010_data+0x94>)
 800f7dc:	4632      	mov	r2, r6
 800f7de:	f104 0110 	add.w	r1, r4, #16
 800f7e2:	4668      	mov	r0, sp
 800f7e4:	f002 fde6 	bl	80123b4 <memcpy>
 800f7e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f7ec:	f7ff fc78 	bl	800f0e0 <pack_data_node>
 800f7f0:	4c15      	ldr	r4, [pc, #84]	; (800f848 <pack_1010_data+0x98>)
 800f7f2:	4632      	mov	r2, r6
 800f7f4:	f105 0110 	add.w	r1, r5, #16
 800f7f8:	4668      	mov	r0, sp
 800f7fa:	f002 fddb 	bl	80123b4 <memcpy>
 800f7fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f802:	f7ff fc6d 	bl	800f0e0 <pack_data_node>
 800f806:	4622      	mov	r2, r4
 800f808:	2308      	movs	r3, #8
 800f80a:	f842 3b08 	str.w	r3, [r2], #8
 800f80e:	4b0f      	ldr	r3, [pc, #60]	; (800f84c <pack_1010_data+0x9c>)
 800f810:	480f      	ldr	r0, [pc, #60]	; (800f850 <pack_1010_data+0xa0>)
 800f812:	6819      	ldr	r1, [r3, #0]
 800f814:	2301      	movs	r3, #1
 800f816:	6063      	str	r3, [r4, #4]
 800f818:	f7ff f9ea 	bl	800ebf0 <calc_mac>
 800f81c:	4632      	mov	r2, r6
 800f81e:	f104 0110 	add.w	r1, r4, #16
 800f822:	4668      	mov	r0, sp
 800f824:	f002 fdc6 	bl	80123b4 <memcpy>
 800f828:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f82c:	f7ff fc58 	bl	800f0e0 <pack_data_node>
 800f830:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 800f834:	bd70      	pop	{r4, r5, r6, pc}
 800f836:	bf00      	nop
 800f838:	20011e5c 	.word	0x20011e5c
 800f83c:	20011e60 	.word	0x20011e60
 800f840:	20010a34 	.word	0x20010a34
 800f844:	2001164c 	.word	0x2001164c
 800f848:	20011a54 	.word	0x20011a54
 800f84c:	20007cd0 	.word	0x20007cd0
 800f850:	200078d0 	.word	0x200078d0
	...

0800f860 <parser_qf_swipe_data>:
 800f860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f864:	460f      	mov	r7, r1
 800f866:	4604      	mov	r4, r0
 800f868:	4608      	mov	r0, r1
 800f86a:	4956      	ldr	r1, [pc, #344]	; (800f9c4 <parser_qf_swipe_data+0x164>)
 800f86c:	4615      	mov	r5, r2
 800f86e:	f7f0 fcdf 	bl	8000230 <strcmp>
 800f872:	2800      	cmp	r0, #0
 800f874:	d05c      	beq.n	800f930 <parser_qf_swipe_data+0xd0>
 800f876:	4954      	ldr	r1, [pc, #336]	; (800f9c8 <parser_qf_swipe_data+0x168>)
 800f878:	4638      	mov	r0, r7
 800f87a:	f7f0 fcd9 	bl	8000230 <strcmp>
 800f87e:	2800      	cmp	r0, #0
 800f880:	d064      	beq.n	800f94c <parser_qf_swipe_data+0xec>
 800f882:	4952      	ldr	r1, [pc, #328]	; (800f9cc <parser_qf_swipe_data+0x16c>)
 800f884:	4e52      	ldr	r6, [pc, #328]	; (800f9d0 <parser_qf_swipe_data+0x170>)
 800f886:	4638      	mov	r0, r7
 800f888:	f7f0 fcd2 	bl	8000230 <strcmp>
 800f88c:	f104 0802 	add.w	r8, r4, #2
 800f890:	f816 3008 	ldrb.w	r3, [r6, r8]
 800f894:	2800      	cmp	r0, #0
 800f896:	d060      	beq.n	800f95a <parser_qf_swipe_data+0xfa>
 800f898:	3403      	adds	r4, #3
 800f89a:	494e      	ldr	r1, [pc, #312]	; (800f9d4 <parser_qf_swipe_data+0x174>)
 800f89c:	4638      	mov	r0, r7
 800f89e:	441c      	add	r4, r3
 800f8a0:	f7f0 fcc6 	bl	8000230 <strcmp>
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	d04a      	beq.n	800f93e <parser_qf_swipe_data+0xde>
 800f8a8:	494b      	ldr	r1, [pc, #300]	; (800f9d8 <parser_qf_swipe_data+0x178>)
 800f8aa:	4638      	mov	r0, r7
 800f8ac:	f7f0 fcc0 	bl	8000230 <strcmp>
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	d05f      	beq.n	800f974 <parser_qf_swipe_data+0x114>
 800f8b4:	4949      	ldr	r1, [pc, #292]	; (800f9dc <parser_qf_swipe_data+0x17c>)
 800f8b6:	4638      	mov	r0, r7
 800f8b8:	f7f0 fcba 	bl	8000230 <strcmp>
 800f8bc:	2800      	cmp	r0, #0
 800f8be:	d061      	beq.n	800f984 <parser_qf_swipe_data+0x124>
 800f8c0:	4947      	ldr	r1, [pc, #284]	; (800f9e0 <parser_qf_swipe_data+0x180>)
 800f8c2:	4638      	mov	r0, r7
 800f8c4:	f7f0 fcb4 	bl	8000230 <strcmp>
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	d063      	beq.n	800f994 <parser_qf_swipe_data+0x134>
 800f8cc:	4945      	ldr	r1, [pc, #276]	; (800f9e4 <parser_qf_swipe_data+0x184>)
 800f8ce:	4638      	mov	r0, r7
 800f8d0:	f7f0 fcae 	bl	8000230 <strcmp>
 800f8d4:	f104 0326 	add.w	r3, r4, #38	; 0x26
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	d063      	beq.n	800f9a4 <parser_qf_swipe_data+0x144>
 800f8dc:	5cf3      	ldrb	r3, [r6, r3]
 800f8de:	4942      	ldr	r1, [pc, #264]	; (800f9e8 <parser_qf_swipe_data+0x188>)
 800f8e0:	3427      	adds	r4, #39	; 0x27
 800f8e2:	4638      	mov	r0, r7
 800f8e4:	441c      	add	r4, r3
 800f8e6:	f7f0 fca3 	bl	8000230 <strcmp>
 800f8ea:	2800      	cmp	r0, #0
 800f8ec:	d03c      	beq.n	800f968 <parser_qf_swipe_data+0x108>
 800f8ee:	5d33      	ldrb	r3, [r6, r4]
 800f8f0:	493e      	ldr	r1, [pc, #248]	; (800f9ec <parser_qf_swipe_data+0x18c>)
 800f8f2:	3401      	adds	r4, #1
 800f8f4:	4638      	mov	r0, r7
 800f8f6:	441c      	add	r4, r3
 800f8f8:	f7f0 fc9a 	bl	8000230 <strcmp>
 800f8fc:	b3a0      	cbz	r0, 800f968 <parser_qf_swipe_data+0x108>
 800f8fe:	5d33      	ldrb	r3, [r6, r4]
 800f900:	493b      	ldr	r1, [pc, #236]	; (800f9f0 <parser_qf_swipe_data+0x190>)
 800f902:	3401      	adds	r4, #1
 800f904:	4638      	mov	r0, r7
 800f906:	441c      	add	r4, r3
 800f908:	f7f0 fc92 	bl	8000230 <strcmp>
 800f90c:	b360      	cbz	r0, 800f968 <parser_qf_swipe_data+0x108>
 800f90e:	5d33      	ldrb	r3, [r6, r4]
 800f910:	4938      	ldr	r1, [pc, #224]	; (800f9f4 <parser_qf_swipe_data+0x194>)
 800f912:	3401      	adds	r4, #1
 800f914:	4638      	mov	r0, r7
 800f916:	441c      	add	r4, r3
 800f918:	f7f0 fc8a 	bl	8000230 <strcmp>
 800f91c:	b320      	cbz	r0, 800f968 <parser_qf_swipe_data+0x108>
 800f91e:	4936      	ldr	r1, [pc, #216]	; (800f9f8 <parser_qf_swipe_data+0x198>)
 800f920:	4638      	mov	r0, r7
 800f922:	f7f0 fc85 	bl	8000230 <strcmp>
 800f926:	2800      	cmp	r0, #0
 800f928:	d042      	beq.n	800f9b0 <parser_qf_swipe_data+0x150>
 800f92a:	2000      	movs	r0, #0
 800f92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f930:	462a      	mov	r2, r5
 800f932:	4620      	mov	r0, r4
 800f934:	2101      	movs	r1, #1
 800f936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f93a:	f7ff bde1 	b.w	800f500 <copy_content_buf_to_out>
 800f93e:	462a      	mov	r2, r5
 800f940:	4620      	mov	r0, r4
 800f942:	210c      	movs	r1, #12
 800f944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f948:	f7ff bdda 	b.w	800f500 <copy_content_buf_to_out>
 800f94c:	462a      	mov	r2, r5
 800f94e:	1c60      	adds	r0, r4, #1
 800f950:	2101      	movs	r1, #1
 800f952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f956:	f7ff bdd3 	b.w	800f500 <copy_content_buf_to_out>
 800f95a:	462a      	mov	r2, r5
 800f95c:	4640      	mov	r0, r8
 800f95e:	1c59      	adds	r1, r3, #1
 800f960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f964:	f7ff bdcc 	b.w	800f500 <copy_content_buf_to_out>
 800f968:	4629      	mov	r1, r5
 800f96a:	4620      	mov	r0, r4
 800f96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f970:	f7ff bdde 	b.w	800f530 <copy_content_node_to_out>
 800f974:	462a      	mov	r2, r5
 800f976:	f104 000c 	add.w	r0, r4, #12
 800f97a:	2108      	movs	r1, #8
 800f97c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f980:	f7ff bdbe 	b.w	800f500 <copy_content_buf_to_out>
 800f984:	462a      	mov	r2, r5
 800f986:	f104 0014 	add.w	r0, r4, #20
 800f98a:	210a      	movs	r1, #10
 800f98c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f990:	f7ff bdb6 	b.w	800f500 <copy_content_buf_to_out>
 800f994:	462a      	mov	r2, r5
 800f996:	f104 001e 	add.w	r0, r4, #30
 800f99a:	2108      	movs	r1, #8
 800f99c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a0:	f7ff bdae 	b.w	800f500 <copy_content_buf_to_out>
 800f9a4:	4629      	mov	r1, r5
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ac:	f7ff bdc0 	b.w	800f530 <copy_content_node_to_out>
 800f9b0:	5d33      	ldrb	r3, [r6, r4]
 800f9b2:	441c      	add	r4, r3
 800f9b4:	f104 0009 	add.w	r0, r4, #9
 800f9b8:	4629      	mov	r1, r5
 800f9ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9be:	f7ff bdb7 	b.w	800f530 <copy_content_node_to_out>
 800f9c2:	bf00      	nop
 800f9c4:	080147e8 	.word	0x080147e8
 800f9c8:	080147f4 	.word	0x080147f4
 800f9cc:	08014800 	.word	0x08014800
 800f9d0:	200068ac 	.word	0x200068ac
 800f9d4:	0801480c 	.word	0x0801480c
 800f9d8:	080147b4 	.word	0x080147b4
 800f9dc:	080147bc 	.word	0x080147bc
 800f9e0:	08014818 	.word	0x08014818
 800f9e4:	08014824 	.word	0x08014824
 800f9e8:	08014830 	.word	0x08014830
 800f9ec:	0801483c 	.word	0x0801483c
 800f9f0:	08014848 	.word	0x08014848
 800f9f4:	08014854 	.word	0x08014854
 800f9f8:	08014860 	.word	0x08014860
 800f9fc:	00000000 	.word	0x00000000

0800fa00 <parser_swipe_data_18>:
 800fa00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa04:	f100 0802 	add.w	r8, r0, #2
 800fa08:	4e51      	ldr	r6, [pc, #324]	; (800fb50 <parser_swipe_data_18+0x150>)
 800fa0a:	460d      	mov	r5, r1
 800fa0c:	f816 3008 	ldrb.w	r3, [r6, r8]
 800fa10:	4950      	ldr	r1, [pc, #320]	; (800fb54 <parser_swipe_data_18+0x154>)
 800fa12:	1cc4      	adds	r4, r0, #3
 800fa14:	4628      	mov	r0, r5
 800fa16:	4617      	mov	r7, r2
 800fa18:	441c      	add	r4, r3
 800fa1a:	f7f0 fc09 	bl	8000230 <strcmp>
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	d077      	beq.n	800fb12 <parser_swipe_data_18+0x112>
 800fa22:	494d      	ldr	r1, [pc, #308]	; (800fb58 <parser_swipe_data_18+0x158>)
 800fa24:	4628      	mov	r0, r5
 800fa26:	f7f0 fc03 	bl	8000230 <strcmp>
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	d06b      	beq.n	800fb06 <parser_swipe_data_18+0x106>
 800fa2e:	5d33      	ldrb	r3, [r6, r4]
 800fa30:	494a      	ldr	r1, [pc, #296]	; (800fb5c <parser_swipe_data_18+0x15c>)
 800fa32:	3401      	adds	r4, #1
 800fa34:	4628      	mov	r0, r5
 800fa36:	441c      	add	r4, r3
 800fa38:	f7f0 fbfa 	bl	8000230 <strcmp>
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	d062      	beq.n	800fb06 <parser_swipe_data_18+0x106>
 800fa40:	5d33      	ldrb	r3, [r6, r4]
 800fa42:	4947      	ldr	r1, [pc, #284]	; (800fb60 <parser_swipe_data_18+0x160>)
 800fa44:	3401      	adds	r4, #1
 800fa46:	4628      	mov	r0, r5
 800fa48:	441c      	add	r4, r3
 800fa4a:	f7f0 fbf1 	bl	8000230 <strcmp>
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	d059      	beq.n	800fb06 <parser_swipe_data_18+0x106>
 800fa52:	5d33      	ldrb	r3, [r6, r4]
 800fa54:	4943      	ldr	r1, [pc, #268]	; (800fb64 <parser_swipe_data_18+0x164>)
 800fa56:	3401      	adds	r4, #1
 800fa58:	4628      	mov	r0, r5
 800fa5a:	441c      	add	r4, r3
 800fa5c:	f7f0 fbe8 	bl	8000230 <strcmp>
 800fa60:	2800      	cmp	r0, #0
 800fa62:	d050      	beq.n	800fb06 <parser_swipe_data_18+0x106>
 800fa64:	5d33      	ldrb	r3, [r6, r4]
 800fa66:	4940      	ldr	r1, [pc, #256]	; (800fb68 <parser_swipe_data_18+0x168>)
 800fa68:	3401      	adds	r4, #1
 800fa6a:	441c      	add	r4, r3
 800fa6c:	1c62      	adds	r2, r4, #1
 800fa6e:	5d33      	ldrb	r3, [r6, r4]
 800fa70:	18d4      	adds	r4, r2, r3
 800fa72:	f104 0801 	add.w	r8, r4, #1
 800fa76:	5d33      	ldrb	r3, [r6, r4]
 800fa78:	4498      	add	r8, r3
 800fa7a:	f108 0901 	add.w	r9, r8, #1
 800fa7e:	f816 3008 	ldrb.w	r3, [r6, r8]
 800fa82:	4499      	add	r9, r3
 800fa84:	f109 0a01 	add.w	sl, r9, #1
 800fa88:	f816 3009 	ldrb.w	r3, [r6, r9]
 800fa8c:	449a      	add	sl, r3
 800fa8e:	f10a 0301 	add.w	r3, sl, #1
 800fa92:	f816 b00a 	ldrb.w	fp, [r6, sl]
 800fa96:	449b      	add	fp, r3
 800fa98:	f10b 0201 	add.w	r2, fp, #1
 800fa9c:	f816 300b 	ldrb.w	r3, [r6, fp]
 800faa0:	4413      	add	r3, r2
 800faa2:	1c58      	adds	r0, r3, #1
 800faa4:	5cf2      	ldrb	r2, [r6, r3]
 800faa6:	4402      	add	r2, r0
 800faa8:	1c50      	adds	r0, r2, #1
 800faaa:	5cb3      	ldrb	r3, [r6, r2]
 800faac:	4403      	add	r3, r0
 800faae:	18f2      	adds	r2, r6, r3
 800fab0:	3305      	adds	r3, #5
 800fab2:	7912      	ldrb	r2, [r2, #4]
 800fab4:	4413      	add	r3, r2
 800fab6:	1c5a      	adds	r2, r3, #1
 800fab8:	5cf6      	ldrb	r6, [r6, r3]
 800faba:	4628      	mov	r0, r5
 800fabc:	4416      	add	r6, r2
 800fabe:	f7f0 fbb7 	bl	8000230 <strcmp>
 800fac2:	b360      	cbz	r0, 800fb1e <parser_swipe_data_18+0x11e>
 800fac4:	4929      	ldr	r1, [pc, #164]	; (800fb6c <parser_swipe_data_18+0x16c>)
 800fac6:	4628      	mov	r0, r5
 800fac8:	f7f0 fbb2 	bl	8000230 <strcmp>
 800facc:	b1d8      	cbz	r0, 800fb06 <parser_swipe_data_18+0x106>
 800face:	4928      	ldr	r1, [pc, #160]	; (800fb70 <parser_swipe_data_18+0x170>)
 800fad0:	4628      	mov	r0, r5
 800fad2:	f7f0 fbad 	bl	8000230 <strcmp>
 800fad6:	b1e0      	cbz	r0, 800fb12 <parser_swipe_data_18+0x112>
 800fad8:	4926      	ldr	r1, [pc, #152]	; (800fb74 <parser_swipe_data_18+0x174>)
 800fada:	4628      	mov	r0, r5
 800fadc:	f7f0 fba8 	bl	8000230 <strcmp>
 800fae0:	b318      	cbz	r0, 800fb2a <parser_swipe_data_18+0x12a>
 800fae2:	4925      	ldr	r1, [pc, #148]	; (800fb78 <parser_swipe_data_18+0x178>)
 800fae4:	4628      	mov	r0, r5
 800fae6:	f7f0 fba3 	bl	8000230 <strcmp>
 800faea:	b320      	cbz	r0, 800fb36 <parser_swipe_data_18+0x136>
 800faec:	4923      	ldr	r1, [pc, #140]	; (800fb7c <parser_swipe_data_18+0x17c>)
 800faee:	4628      	mov	r0, r5
 800faf0:	f7f0 fb9e 	bl	8000230 <strcmp>
 800faf4:	b328      	cbz	r0, 800fb42 <parser_swipe_data_18+0x142>
 800faf6:	4922      	ldr	r1, [pc, #136]	; (800fb80 <parser_swipe_data_18+0x180>)
 800faf8:	4628      	mov	r0, r5
 800fafa:	f7f0 fb99 	bl	8000230 <strcmp>
 800fafe:	b170      	cbz	r0, 800fb1e <parser_swipe_data_18+0x11e>
 800fb00:	2000      	movs	r0, #0
 800fb02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb06:	4639      	mov	r1, r7
 800fb08:	4620      	mov	r0, r4
 800fb0a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb0e:	f7ff bd0f 	b.w	800f530 <copy_content_node_to_out>
 800fb12:	4639      	mov	r1, r7
 800fb14:	4640      	mov	r0, r8
 800fb16:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1a:	f7ff bd09 	b.w	800f530 <copy_content_node_to_out>
 800fb1e:	4639      	mov	r1, r7
 800fb20:	4630      	mov	r0, r6
 800fb22:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb26:	f7ff bd03 	b.w	800f530 <copy_content_node_to_out>
 800fb2a:	4639      	mov	r1, r7
 800fb2c:	4648      	mov	r0, r9
 800fb2e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb32:	f7ff bcfd 	b.w	800f530 <copy_content_node_to_out>
 800fb36:	4639      	mov	r1, r7
 800fb38:	4650      	mov	r0, sl
 800fb3a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3e:	f7ff bcf7 	b.w	800f530 <copy_content_node_to_out>
 800fb42:	4639      	mov	r1, r7
 800fb44:	4658      	mov	r0, fp
 800fb46:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb4a:	f7ff bcf1 	b.w	800f530 <copy_content_node_to_out>
 800fb4e:	bf00      	nop
 800fb50:	200068ac 	.word	0x200068ac
 800fb54:	0801486c 	.word	0x0801486c
 800fb58:	08014874 	.word	0x08014874
 800fb5c:	0801487c 	.word	0x0801487c
 800fb60:	08014824 	.word	0x08014824
 800fb64:	08014830 	.word	0x08014830
 800fb68:	0801483c 	.word	0x0801483c
 800fb6c:	08014848 	.word	0x08014848
 800fb70:	08014854 	.word	0x08014854
 800fb74:	0801480c 	.word	0x0801480c
 800fb78:	08014884 	.word	0x08014884
 800fb7c:	08014890 	.word	0x08014890
 800fb80:	08014898 	.word	0x08014898
	...

0800fb90 <parser_1010>:
 800fb90:	460a      	mov	r2, r1
 800fb92:	4601      	mov	r1, r0
 800fb94:	2005      	movs	r0, #5
 800fb96:	f7ff be63 	b.w	800f860 <parser_qf_swipe_data>
 800fb9a:	bf00      	nop
 800fb9c:	0000      	movs	r0, r0
	...

0800fba0 <pack_1011_data>:
 800fba0:	b570      	push	{r4, r5, r6, lr}
 800fba2:	4b1b      	ldr	r3, [pc, #108]	; (800fc10 <pack_1011_data+0x70>)
 800fba4:	4d1b      	ldr	r5, [pc, #108]	; (800fc14 <pack_1011_data+0x74>)
 800fba6:	7818      	ldrb	r0, [r3, #0]
 800fba8:	4c1b      	ldr	r4, [pc, #108]	; (800fc18 <pack_1011_data+0x78>)
 800fbaa:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 800fbae:	f44f 767e 	mov.w	r6, #1016	; 0x3f8
 800fbb2:	f7ff fa6d 	bl	800f090 <pack_data_u8>
 800fbb6:	f105 0110 	add.w	r1, r5, #16
 800fbba:	4632      	mov	r2, r6
 800fbbc:	4668      	mov	r0, sp
 800fbbe:	f002 fbf9 	bl	80123b4 <memcpy>
 800fbc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fbc6:	f7ff fa8b 	bl	800f0e0 <pack_data_node>
 800fbca:	4d14      	ldr	r5, [pc, #80]	; (800fc1c <pack_1011_data+0x7c>)
 800fbcc:	4632      	mov	r2, r6
 800fbce:	f104 0110 	add.w	r1, r4, #16
 800fbd2:	4668      	mov	r0, sp
 800fbd4:	f002 fbee 	bl	80123b4 <memcpy>
 800fbd8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fbdc:	f7ff fa80 	bl	800f0e0 <pack_data_node>
 800fbe0:	4c0f      	ldr	r4, [pc, #60]	; (800fc20 <pack_1011_data+0x80>)
 800fbe2:	4632      	mov	r2, r6
 800fbe4:	f105 0110 	add.w	r1, r5, #16
 800fbe8:	4668      	mov	r0, sp
 800fbea:	f002 fbe3 	bl	80123b4 <memcpy>
 800fbee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fbf2:	f7ff fa75 	bl	800f0e0 <pack_data_node>
 800fbf6:	4632      	mov	r2, r6
 800fbf8:	f104 0110 	add.w	r1, r4, #16
 800fbfc:	4668      	mov	r0, sp
 800fbfe:	f002 fbd9 	bl	80123b4 <memcpy>
 800fc02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fc06:	f7ff fa6b 	bl	800f0e0 <pack_data_node>
 800fc0a:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 800fc0e:	bd70      	pop	{r4, r5, r6, pc}
 800fc10:	20011e5c 	.word	0x20011e5c
 800fc14:	20011e60 	.word	0x20011e60
 800fc18:	20010a34 	.word	0x20010a34
 800fc1c:	2001164c 	.word	0x2001164c
 800fc20:	20011a54 	.word	0x20011a54
	...

0800fc30 <pack_10f3_data>:
 800fc30:	b570      	push	{r4, r5, r6, lr}
 800fc32:	4c2c      	ldr	r4, [pc, #176]	; (800fce4 <pack_10f3_data+0xb4>)
 800fc34:	7825      	ldrb	r5, [r4, #0]
 800fc36:	2d01      	cmp	r5, #1
 800fc38:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 800fc3c:	f04f 0000 	mov.w	r0, #0
 800fc40:	d01d      	beq.n	800fc7e <pack_10f3_data+0x4e>
 800fc42:	f7ff fa25 	bl	800f090 <pack_data_u8>
 800fc46:	7820      	ldrb	r0, [r4, #0]
 800fc48:	f7ff fa22 	bl	800f090 <pack_data_u8>
 800fc4c:	200a      	movs	r0, #10
 800fc4e:	f7ff fa1f 	bl	800f090 <pack_data_u8>
 800fc52:	2018      	movs	r0, #24
 800fc54:	f7ff fa1c 	bl	800f090 <pack_data_u8>
 800fc58:	2000      	movs	r0, #0
 800fc5a:	f7ff fa19 	bl	800f090 <pack_data_u8>
 800fc5e:	2000      	movs	r0, #0
 800fc60:	f7ff fa16 	bl	800f090 <pack_data_u8>
 800fc64:	2000      	movs	r0, #0
 800fc66:	f7ff fa13 	bl	800f090 <pack_data_u8>
 800fc6a:	2000      	movs	r0, #0
 800fc6c:	f7ff fa10 	bl	800f090 <pack_data_u8>
 800fc70:	2000      	movs	r0, #0
 800fc72:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 800fc76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc7a:	f7ff ba09 	b.w	800f090 <pack_data_u8>
 800fc7e:	f7ff fa07 	bl	800f090 <pack_data_u8>
 800fc82:	4628      	mov	r0, r5
 800fc84:	f7ff fa04 	bl	800f090 <pack_data_u8>
 800fc88:	4e17      	ldr	r6, [pc, #92]	; (800fce8 <pack_10f3_data+0xb8>)
 800fc8a:	4d18      	ldr	r5, [pc, #96]	; (800fcec <pack_10f3_data+0xbc>)
 800fc8c:	4c18      	ldr	r4, [pc, #96]	; (800fcf0 <pack_10f3_data+0xc0>)
 800fc8e:	200a      	movs	r0, #10
 800fc90:	f7ff f9fe 	bl	800f090 <pack_data_u8>
 800fc94:	2018      	movs	r0, #24
 800fc96:	f7ff f9fb 	bl	800f090 <pack_data_u8>
 800fc9a:	f106 0110 	add.w	r1, r6, #16
 800fc9e:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 800fca2:	4668      	mov	r0, sp
 800fca4:	f002 fb86 	bl	80123b4 <memcpy>
 800fca8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800fcac:	f7ff fa18 	bl	800f0e0 <pack_data_node>
 800fcb0:	f105 0110 	add.w	r1, r5, #16
 800fcb4:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 800fcb8:	4668      	mov	r0, sp
 800fcba:	f002 fb7b 	bl	80123b4 <memcpy>
 800fcbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fcc2:	f7ff fa0d 	bl	800f0e0 <pack_data_node>
 800fcc6:	f104 0110 	add.w	r1, r4, #16
 800fcca:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 800fcce:	4668      	mov	r0, sp
 800fcd0:	f002 fb70 	bl	80123b4 <memcpy>
 800fcd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fcd8:	f7ff fa02 	bl	800f0e0 <pack_data_node>
 800fcdc:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 800fce0:	bd70      	pop	{r4, r5, r6, pc}
 800fce2:	bf00      	nop
 800fce4:	2000a946 	.word	0x2000a946
 800fce8:	2000e1cc 	.word	0x2000e1cc
 800fcec:	2000c590 	.word	0x2000c590
 800fcf0:	200088f8 	.word	0x200088f8
	...

0800fd00 <parser_10f3>:
 800fd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd02:	4d2a      	ldr	r5, [pc, #168]	; (800fdac <parser_10f3+0xac>)
 800fd04:	796b      	ldrb	r3, [r5, #5]
 800fd06:	18ec      	adds	r4, r5, r3
 800fd08:	f103 0208 	add.w	r2, r3, #8
 800fd0c:	79a6      	ldrb	r6, [r4, #6]
 800fd0e:	79e3      	ldrb	r3, [r4, #7]
 800fd10:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 800fd14:	4413      	add	r3, r2
 800fd16:	18ec      	adds	r4, r5, r3
 800fd18:	5cea      	ldrb	r2, [r5, r3]
 800fd1a:	7864      	ldrb	r4, [r4, #1]
 800fd1c:	460e      	mov	r6, r1
 800fd1e:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 800fd22:	3302      	adds	r3, #2
 800fd24:	4922      	ldr	r1, [pc, #136]	; (800fdb0 <parser_10f3+0xb0>)
 800fd26:	441c      	add	r4, r3
 800fd28:	4607      	mov	r7, r0
 800fd2a:	f7f0 fa81 	bl	8000230 <strcmp>
 800fd2e:	b328      	cbz	r0, 800fd7c <parser_10f3+0x7c>
 800fd30:	4920      	ldr	r1, [pc, #128]	; (800fdb4 <parser_10f3+0xb4>)
 800fd32:	4638      	mov	r0, r7
 800fd34:	f7f0 fa7c 	bl	8000230 <strcmp>
 800fd38:	b1d0      	cbz	r0, 800fd70 <parser_10f3+0x70>
 800fd3a:	192a      	adds	r2, r5, r4
 800fd3c:	5d2b      	ldrb	r3, [r5, r4]
 800fd3e:	7852      	ldrb	r2, [r2, #1]
 800fd40:	491d      	ldr	r1, [pc, #116]	; (800fdb8 <parser_10f3+0xb8>)
 800fd42:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 800fd46:	3402      	adds	r4, #2
 800fd48:	4638      	mov	r0, r7
 800fd4a:	4414      	add	r4, r2
 800fd4c:	f7f0 fa70 	bl	8000230 <strcmp>
 800fd50:	b1d0      	cbz	r0, 800fd88 <parser_10f3+0x88>
 800fd52:	5d2b      	ldrb	r3, [r5, r4]
 800fd54:	4919      	ldr	r1, [pc, #100]	; (800fdbc <parser_10f3+0xbc>)
 800fd56:	3401      	adds	r4, #1
 800fd58:	4638      	mov	r0, r7
 800fd5a:	441c      	add	r4, r3
 800fd5c:	f7f0 fa68 	bl	8000230 <strcmp>
 800fd60:	b130      	cbz	r0, 800fd70 <parser_10f3+0x70>
 800fd62:	4917      	ldr	r1, [pc, #92]	; (800fdc0 <parser_10f3+0xc0>)
 800fd64:	4638      	mov	r0, r7
 800fd66:	f7f0 fa63 	bl	8000230 <strcmp>
 800fd6a:	b198      	cbz	r0, 800fd94 <parser_10f3+0x94>
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd70:	4631      	mov	r1, r6
 800fd72:	4620      	mov	r0, r4
 800fd74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fd78:	f7ff bbf2 	b.w	800f560 <copy_content_double_length_node_to_out>
 800fd7c:	4631      	mov	r1, r6
 800fd7e:	2005      	movs	r0, #5
 800fd80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fd84:	f7ff bbd4 	b.w	800f530 <copy_content_node_to_out>
 800fd88:	4631      	mov	r1, r6
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fd90:	f7ff bbce 	b.w	800f530 <copy_content_node_to_out>
 800fd94:	192a      	adds	r2, r5, r4
 800fd96:	5d2b      	ldrb	r3, [r5, r4]
 800fd98:	7850      	ldrb	r0, [r2, #1]
 800fd9a:	3402      	adds	r4, #2
 800fd9c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800fda0:	4631      	mov	r1, r6
 800fda2:	4420      	add	r0, r4
 800fda4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fda8:	f7ff bbc2 	b.w	800f530 <copy_content_node_to_out>
 800fdac:	200068ac 	.word	0x200068ac
 800fdb0:	080148a4 	.word	0x080148a4
 800fdb4:	080148b4 	.word	0x080148b4
 800fdb8:	080148c0 	.word	0x080148c0
 800fdbc:	080148cc 	.word	0x080148cc
 800fdc0:	080148dc 	.word	0x080148dc
	...

0800fdd0 <parser_plain_swipe_data>:
 800fdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd4:	460d      	mov	r5, r1
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	4608      	mov	r0, r1
 800fdda:	491d      	ldr	r1, [pc, #116]	; (800fe50 <parser_plain_swipe_data+0x80>)
 800fddc:	4616      	mov	r6, r2
 800fdde:	f7f0 fa27 	bl	8000230 <strcmp>
 800fde2:	b1c0      	cbz	r0, 800fe16 <parser_plain_swipe_data+0x46>
 800fde4:	491b      	ldr	r1, [pc, #108]	; (800fe54 <parser_plain_swipe_data+0x84>)
 800fde6:	4628      	mov	r0, r5
 800fde8:	1c67      	adds	r7, r4, #1
 800fdea:	f7f0 fa21 	bl	8000230 <strcmp>
 800fdee:	b310      	cbz	r0, 800fe36 <parser_plain_swipe_data+0x66>
 800fdf0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800fe60 <parser_plain_swipe_data+0x90>
 800fdf4:	4918      	ldr	r1, [pc, #96]	; (800fe58 <parser_plain_swipe_data+0x88>)
 800fdf6:	f818 3007 	ldrb.w	r3, [r8, r7]
 800fdfa:	3402      	adds	r4, #2
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	441c      	add	r4, r3
 800fe00:	f7f0 fa16 	bl	8000230 <strcmp>
 800fe04:	b1e8      	cbz	r0, 800fe42 <parser_plain_swipe_data+0x72>
 800fe06:	4915      	ldr	r1, [pc, #84]	; (800fe5c <parser_plain_swipe_data+0x8c>)
 800fe08:	4628      	mov	r0, r5
 800fe0a:	f7f0 fa11 	bl	8000230 <strcmp>
 800fe0e:	b148      	cbz	r0, 800fe24 <parser_plain_swipe_data+0x54>
 800fe10:	2000      	movs	r0, #0
 800fe12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe16:	4632      	mov	r2, r6
 800fe18:	4620      	mov	r0, r4
 800fe1a:	2101      	movs	r1, #1
 800fe1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe20:	f7ff bb6e 	b.w	800f500 <copy_content_buf_to_out>
 800fe24:	f818 0004 	ldrb.w	r0, [r8, r4]
 800fe28:	3401      	adds	r4, #1
 800fe2a:	4420      	add	r0, r4
 800fe2c:	4631      	mov	r1, r6
 800fe2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe32:	f7ff bb7d 	b.w	800f530 <copy_content_node_to_out>
 800fe36:	4631      	mov	r1, r6
 800fe38:	4638      	mov	r0, r7
 800fe3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe3e:	f7ff bb77 	b.w	800f530 <copy_content_node_to_out>
 800fe42:	4631      	mov	r1, r6
 800fe44:	4620      	mov	r0, r4
 800fe46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe4a:	f7ff bb71 	b.w	800f530 <copy_content_node_to_out>
 800fe4e:	bf00      	nop
 800fe50:	08014788 	.word	0x08014788
 800fe54:	080148f0 	.word	0x080148f0
 800fe58:	080148f8 	.word	0x080148f8
 800fe5c:	08014900 	.word	0x08014900
 800fe60:	200068ac 	.word	0x200068ac
	...

0800fe70 <parser_1011>:
 800fe70:	2000      	movs	r0, #0
 800fe72:	4770      	bx	lr
	...

0800fe80 <parser_1030>:
 800fe80:	460a      	mov	r2, r1
 800fe82:	4601      	mov	r1, r0
 800fe84:	2005      	movs	r0, #5
 800fe86:	f7ff bfa3 	b.w	800fdd0 <parser_plain_swipe_data>
 800fe8a:	bf00      	nop
 800fe8c:	0000      	movs	r0, r0
	...

0800fe90 <parser_1040>:
 800fe90:	b510      	push	{r4, lr}
 800fe92:	460c      	mov	r4, r1
 800fe94:	4908      	ldr	r1, [pc, #32]	; (800feb8 <parser_1040+0x28>)
 800fe96:	f7f0 f9cb 	bl	8000230 <strcmp>
 800fe9a:	b108      	cbz	r0, 800fea0 <parser_1040+0x10>
 800fe9c:	2000      	movs	r0, #0
 800fe9e:	bd10      	pop	{r4, pc}
 800fea0:	4b06      	ldr	r3, [pc, #24]	; (800febc <parser_1040+0x2c>)
 800fea2:	78d9      	ldrb	r1, [r3, #3]
 800fea4:	791b      	ldrb	r3, [r3, #4]
 800fea6:	4622      	mov	r2, r4
 800fea8:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 800feac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800feb0:	2005      	movs	r0, #5
 800feb2:	f7ff bb25 	b.w	800f500 <copy_content_buf_to_out>
 800feb6:	bf00      	nop
 800feb8:	08014908 	.word	0x08014908
 800febc:	200068ac 	.word	0x200068ac

0800fec0 <parser_swipe_data>:
 800fec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fec4:	460f      	mov	r7, r1
 800fec6:	4604      	mov	r4, r0
 800fec8:	4608      	mov	r0, r1
 800feca:	4968      	ldr	r1, [pc, #416]	; (801006c <parser_swipe_data+0x1ac>)
 800fecc:	4615      	mov	r5, r2
 800fece:	f7f0 f9af 	bl	8000230 <strcmp>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	f000 80a2 	beq.w	801001c <parser_swipe_data+0x15c>
 800fed8:	4965      	ldr	r1, [pc, #404]	; (8010070 <parser_swipe_data+0x1b0>)
 800feda:	4638      	mov	r0, r7
 800fedc:	f7f0 f9a8 	bl	8000230 <strcmp>
 800fee0:	2800      	cmp	r0, #0
 800fee2:	f000 80a2 	beq.w	801002a <parser_swipe_data+0x16a>
 800fee6:	4963      	ldr	r1, [pc, #396]	; (8010074 <parser_swipe_data+0x1b4>)
 800fee8:	4638      	mov	r0, r7
 800feea:	f7f0 f9a1 	bl	8000230 <strcmp>
 800feee:	1ca3      	adds	r3, r4, #2
 800fef0:	2800      	cmp	r0, #0
 800fef2:	f000 80a1 	beq.w	8010038 <parser_swipe_data+0x178>
 800fef6:	4e60      	ldr	r6, [pc, #384]	; (8010078 <parser_swipe_data+0x1b8>)
 800fef8:	4960      	ldr	r1, [pc, #384]	; (801007c <parser_swipe_data+0x1bc>)
 800fefa:	5cf3      	ldrb	r3, [r6, r3]
 800fefc:	3403      	adds	r4, #3
 800fefe:	4638      	mov	r0, r7
 800ff00:	441c      	add	r4, r3
 800ff02:	f7f0 f995 	bl	8000230 <strcmp>
 800ff06:	2800      	cmp	r0, #0
 800ff08:	f000 8082 	beq.w	8010010 <parser_swipe_data+0x150>
 800ff0c:	5d33      	ldrb	r3, [r6, r4]
 800ff0e:	495c      	ldr	r1, [pc, #368]	; (8010080 <parser_swipe_data+0x1c0>)
 800ff10:	3401      	adds	r4, #1
 800ff12:	4638      	mov	r0, r7
 800ff14:	441c      	add	r4, r3
 800ff16:	f7f0 f98b 	bl	8000230 <strcmp>
 800ff1a:	2800      	cmp	r0, #0
 800ff1c:	d078      	beq.n	8010010 <parser_swipe_data+0x150>
 800ff1e:	5d33      	ldrb	r3, [r6, r4]
 800ff20:	4958      	ldr	r1, [pc, #352]	; (8010084 <parser_swipe_data+0x1c4>)
 800ff22:	3401      	adds	r4, #1
 800ff24:	4638      	mov	r0, r7
 800ff26:	441c      	add	r4, r3
 800ff28:	f7f0 f982 	bl	8000230 <strcmp>
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	d06f      	beq.n	8010010 <parser_swipe_data+0x150>
 800ff30:	5d33      	ldrb	r3, [r6, r4]
 800ff32:	4955      	ldr	r1, [pc, #340]	; (8010088 <parser_swipe_data+0x1c8>)
 800ff34:	3401      	adds	r4, #1
 800ff36:	4638      	mov	r0, r7
 800ff38:	441c      	add	r4, r3
 800ff3a:	f7f0 f979 	bl	8000230 <strcmp>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d066      	beq.n	8010010 <parser_swipe_data+0x150>
 800ff42:	5d33      	ldrb	r3, [r6, r4]
 800ff44:	4951      	ldr	r1, [pc, #324]	; (801008c <parser_swipe_data+0x1cc>)
 800ff46:	3401      	adds	r4, #1
 800ff48:	4638      	mov	r0, r7
 800ff4a:	441c      	add	r4, r3
 800ff4c:	f7f0 f970 	bl	8000230 <strcmp>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	d05d      	beq.n	8010010 <parser_swipe_data+0x150>
 800ff54:	5d33      	ldrb	r3, [r6, r4]
 800ff56:	494e      	ldr	r1, [pc, #312]	; (8010090 <parser_swipe_data+0x1d0>)
 800ff58:	3401      	adds	r4, #1
 800ff5a:	4638      	mov	r0, r7
 800ff5c:	441c      	add	r4, r3
 800ff5e:	f7f0 f967 	bl	8000230 <strcmp>
 800ff62:	2800      	cmp	r0, #0
 800ff64:	d054      	beq.n	8010010 <parser_swipe_data+0x150>
 800ff66:	5d33      	ldrb	r3, [r6, r4]
 800ff68:	494a      	ldr	r1, [pc, #296]	; (8010094 <parser_swipe_data+0x1d4>)
 800ff6a:	3401      	adds	r4, #1
 800ff6c:	4638      	mov	r0, r7
 800ff6e:	441c      	add	r4, r3
 800ff70:	f7f0 f95e 	bl	8000230 <strcmp>
 800ff74:	2800      	cmp	r0, #0
 800ff76:	d04b      	beq.n	8010010 <parser_swipe_data+0x150>
 800ff78:	5d33      	ldrb	r3, [r6, r4]
 800ff7a:	4947      	ldr	r1, [pc, #284]	; (8010098 <parser_swipe_data+0x1d8>)
 800ff7c:	3401      	adds	r4, #1
 800ff7e:	4638      	mov	r0, r7
 800ff80:	441c      	add	r4, r3
 800ff82:	f7f0 f955 	bl	8000230 <strcmp>
 800ff86:	2800      	cmp	r0, #0
 800ff88:	d042      	beq.n	8010010 <parser_swipe_data+0x150>
 800ff8a:	5d33      	ldrb	r3, [r6, r4]
 800ff8c:	4943      	ldr	r1, [pc, #268]	; (801009c <parser_swipe_data+0x1dc>)
 800ff8e:	3401      	adds	r4, #1
 800ff90:	4638      	mov	r0, r7
 800ff92:	441c      	add	r4, r3
 800ff94:	f7f0 f94c 	bl	8000230 <strcmp>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d039      	beq.n	8010010 <parser_swipe_data+0x150>
 800ff9c:	5d33      	ldrb	r3, [r6, r4]
 800ff9e:	4940      	ldr	r1, [pc, #256]	; (80100a0 <parser_swipe_data+0x1e0>)
 800ffa0:	3401      	adds	r4, #1
 800ffa2:	4638      	mov	r0, r7
 800ffa4:	441c      	add	r4, r3
 800ffa6:	f7f0 f943 	bl	8000230 <strcmp>
 800ffaa:	b388      	cbz	r0, 8010010 <parser_swipe_data+0x150>
 800ffac:	5d33      	ldrb	r3, [r6, r4]
 800ffae:	493d      	ldr	r1, [pc, #244]	; (80100a4 <parser_swipe_data+0x1e4>)
 800ffb0:	3401      	adds	r4, #1
 800ffb2:	4638      	mov	r0, r7
 800ffb4:	441c      	add	r4, r3
 800ffb6:	f7f0 f93b 	bl	8000230 <strcmp>
 800ffba:	b348      	cbz	r0, 8010010 <parser_swipe_data+0x150>
 800ffbc:	5d33      	ldrb	r3, [r6, r4]
 800ffbe:	493a      	ldr	r1, [pc, #232]	; (80100a8 <parser_swipe_data+0x1e8>)
 800ffc0:	3401      	adds	r4, #1
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	441c      	add	r4, r3
 800ffc6:	f7f0 f933 	bl	8000230 <strcmp>
 800ffca:	b308      	cbz	r0, 8010010 <parser_swipe_data+0x150>
 800ffcc:	5d33      	ldrb	r3, [r6, r4]
 800ffce:	4937      	ldr	r1, [pc, #220]	; (80100ac <parser_swipe_data+0x1ec>)
 800ffd0:	3401      	adds	r4, #1
 800ffd2:	4638      	mov	r0, r7
 800ffd4:	441c      	add	r4, r3
 800ffd6:	f7f0 f92b 	bl	8000230 <strcmp>
 800ffda:	b1c8      	cbz	r0, 8010010 <parser_swipe_data+0x150>
 800ffdc:	5d33      	ldrb	r3, [r6, r4]
 800ffde:	4934      	ldr	r1, [pc, #208]	; (80100b0 <parser_swipe_data+0x1f0>)
 800ffe0:	3401      	adds	r4, #1
 800ffe2:	4638      	mov	r0, r7
 800ffe4:	441c      	add	r4, r3
 800ffe6:	f7f0 f923 	bl	8000230 <strcmp>
 800ffea:	b358      	cbz	r0, 8010044 <parser_swipe_data+0x184>
 800ffec:	4931      	ldr	r1, [pc, #196]	; (80100b4 <parser_swipe_data+0x1f4>)
 800ffee:	4638      	mov	r0, r7
 800fff0:	f7f0 f91e 	bl	8000230 <strcmp>
 800fff4:	f104 0803 	add.w	r8, r4, #3
 800fff8:	b358      	cbz	r0, 8010052 <parser_swipe_data+0x192>
 800fffa:	492f      	ldr	r1, [pc, #188]	; (80100b8 <parser_swipe_data+0x1f8>)
 800fffc:	4638      	mov	r0, r7
 800fffe:	f7f0 f917 	bl	8000230 <strcmp>
 8010002:	b910      	cbnz	r0, 801000a <parser_swipe_data+0x14a>
 8010004:	f816 3008 	ldrb.w	r3, [r6, r8]
 8010008:	bb53      	cbnz	r3, 8010060 <parser_swipe_data+0x1a0>
 801000a:	2000      	movs	r0, #0
 801000c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010010:	4629      	mov	r1, r5
 8010012:	4620      	mov	r0, r4
 8010014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010018:	f7ff ba8a 	b.w	800f530 <copy_content_node_to_out>
 801001c:	462a      	mov	r2, r5
 801001e:	4620      	mov	r0, r4
 8010020:	2101      	movs	r1, #1
 8010022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010026:	f7ff ba6b 	b.w	800f500 <copy_content_buf_to_out>
 801002a:	462a      	mov	r2, r5
 801002c:	1c60      	adds	r0, r4, #1
 801002e:	2101      	movs	r1, #1
 8010030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010034:	f7ff ba64 	b.w	800f500 <copy_content_buf_to_out>
 8010038:	4629      	mov	r1, r5
 801003a:	4618      	mov	r0, r3
 801003c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010040:	f7ff ba76 	b.w	800f530 <copy_content_node_to_out>
 8010044:	462a      	mov	r2, r5
 8010046:	4620      	mov	r0, r4
 8010048:	2103      	movs	r1, #3
 801004a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801004e:	f7ff ba57 	b.w	800f500 <copy_content_buf_to_out>
 8010052:	462a      	mov	r2, r5
 8010054:	4640      	mov	r0, r8
 8010056:	2101      	movs	r1, #1
 8010058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801005c:	f7ff ba50 	b.w	800f500 <copy_content_buf_to_out>
 8010060:	4629      	mov	r1, r5
 8010062:	1d20      	adds	r0, r4, #4
 8010064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010068:	f7ff ba62 	b.w	800f530 <copy_content_node_to_out>
 801006c:	080147e8 	.word	0x080147e8
 8010070:	080147f4 	.word	0x080147f4
 8010074:	0801486c 	.word	0x0801486c
 8010078:	200068ac 	.word	0x200068ac
 801007c:	08014874 	.word	0x08014874
 8010080:	0801487c 	.word	0x0801487c
 8010084:	08014824 	.word	0x08014824
 8010088:	08014830 	.word	0x08014830
 801008c:	0801483c 	.word	0x0801483c
 8010090:	08014848 	.word	0x08014848
 8010094:	08014854 	.word	0x08014854
 8010098:	0801480c 	.word	0x0801480c
 801009c:	08014884 	.word	0x08014884
 80100a0:	08014890 	.word	0x08014890
 80100a4:	08014910 	.word	0x08014910
 80100a8:	0801491c 	.word	0x0801491c
 80100ac:	08014928 	.word	0x08014928
 80100b0:	08014930 	.word	0x08014930
 80100b4:	08014940 	.word	0x08014940
 80100b8:	08014948 	.word	0x08014948
 80100bc:	00000000 	.word	0x00000000

080100c0 <pack_1070_data>:
 80100c0:	b510      	push	{r4, lr}
 80100c2:	4c0c      	ldr	r4, [pc, #48]	; (80100f4 <pack_1070_data+0x34>)
 80100c4:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80100c8:	2006      	movs	r0, #6
 80100ca:	f7fe ffe1 	bl	800f090 <pack_data_u8>
 80100ce:	f104 0110 	add.w	r1, r4, #16
 80100d2:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80100d6:	4668      	mov	r0, sp
 80100d8:	f002 f96c 	bl	80123b4 <memcpy>
 80100dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80100e0:	f7fe fffe 	bl	800f0e0 <pack_data_node>
 80100e4:	2000      	movs	r0, #0
 80100e6:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 80100ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100ee:	f7fe bfcf 	b.w	800f090 <pack_data_u8>
 80100f2:	bf00      	nop
 80100f4:	2001164c 	.word	0x2001164c
	...

08010100 <parser_getPin_data>:
 8010100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010102:	460c      	mov	r4, r1
 8010104:	4605      	mov	r5, r0
 8010106:	4608      	mov	r0, r1
 8010108:	4913      	ldr	r1, [pc, #76]	; (8010158 <parser_getPin_data+0x58>)
 801010a:	4616      	mov	r6, r2
 801010c:	f7f0 f890 	bl	8000230 <strcmp>
 8010110:	b160      	cbz	r0, 801012c <parser_getPin_data+0x2c>
 8010112:	4912      	ldr	r1, [pc, #72]	; (801015c <parser_getPin_data+0x5c>)
 8010114:	4620      	mov	r0, r4
 8010116:	1c6f      	adds	r7, r5, #1
 8010118:	f7f0 f88a 	bl	8000230 <strcmp>
 801011c:	b168      	cbz	r0, 801013a <parser_getPin_data+0x3a>
 801011e:	4910      	ldr	r1, [pc, #64]	; (8010160 <parser_getPin_data+0x60>)
 8010120:	4620      	mov	r0, r4
 8010122:	f7f0 f885 	bl	8000230 <strcmp>
 8010126:	b170      	cbz	r0, 8010146 <parser_getPin_data+0x46>
 8010128:	2000      	movs	r0, #0
 801012a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801012c:	4632      	mov	r2, r6
 801012e:	4628      	mov	r0, r5
 8010130:	2101      	movs	r1, #1
 8010132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010136:	f7ff b9e3 	b.w	800f500 <copy_content_buf_to_out>
 801013a:	4631      	mov	r1, r6
 801013c:	4638      	mov	r0, r7
 801013e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010142:	f7ff b9f5 	b.w	800f530 <copy_content_node_to_out>
 8010146:	4b07      	ldr	r3, [pc, #28]	; (8010164 <parser_getPin_data+0x64>)
 8010148:	5dd8      	ldrb	r0, [r3, r7]
 801014a:	3502      	adds	r5, #2
 801014c:	4631      	mov	r1, r6
 801014e:	4428      	add	r0, r5
 8010150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010154:	f7ff b9ec 	b.w	800f530 <copy_content_node_to_out>
 8010158:	08014950 	.word	0x08014950
 801015c:	0801495c 	.word	0x0801495c
 8010160:	08014964 	.word	0x08014964
 8010164:	200068ac 	.word	0x200068ac
	...

08010170 <parser_1070>:
 8010170:	460a      	mov	r2, r1
 8010172:	4601      	mov	r1, r0
 8010174:	2005      	movs	r0, #5
 8010176:	f7ff bfc3 	b.w	8010100 <parser_getPin_data>
 801017a:	bf00      	nop
 801017c:	0000      	movs	r0, r0
	...

08010180 <pack_1071_data>:
 8010180:	b570      	push	{r4, r5, r6, lr}
 8010182:	2000      	movs	r0, #0
 8010184:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8010188:	f7fe ff82 	bl	800f090 <pack_data_u8>
 801018c:	2000      	movs	r0, #0
 801018e:	f7fe ff7f 	bl	800f090 <pack_data_u8>
 8010192:	4b1a      	ldr	r3, [pc, #104]	; (80101fc <pack_1071_data+0x7c>)
 8010194:	4c1a      	ldr	r4, [pc, #104]	; (8010200 <pack_1071_data+0x80>)
 8010196:	7818      	ldrb	r0, [r3, #0]
 8010198:	4d1a      	ldr	r5, [pc, #104]	; (8010204 <pack_1071_data+0x84>)
 801019a:	f7fe ff79 	bl	800f090 <pack_data_u8>
 801019e:	4b1a      	ldr	r3, [pc, #104]	; (8010208 <pack_1071_data+0x88>)
 80101a0:	7818      	ldrb	r0, [r3, #0]
 80101a2:	f7fe ff75 	bl	800f090 <pack_data_u8>
 80101a6:	4b19      	ldr	r3, [pc, #100]	; (801020c <pack_1071_data+0x8c>)
 80101a8:	f44f 767e 	mov.w	r6, #1016	; 0x3f8
 80101ac:	7818      	ldrb	r0, [r3, #0]
 80101ae:	f7fe ff6f 	bl	800f090 <pack_data_u8>
 80101b2:	f104 0110 	add.w	r1, r4, #16
 80101b6:	4632      	mov	r2, r6
 80101b8:	4668      	mov	r0, sp
 80101ba:	f002 f8fb 	bl	80123b4 <memcpy>
 80101be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80101c2:	f7fe ff8d 	bl	800f0e0 <pack_data_node>
 80101c6:	2000      	movs	r0, #0
 80101c8:	f7fe ff62 	bl	800f090 <pack_data_u8>
 80101cc:	4c10      	ldr	r4, [pc, #64]	; (8010210 <pack_1071_data+0x90>)
 80101ce:	4632      	mov	r2, r6
 80101d0:	f105 0110 	add.w	r1, r5, #16
 80101d4:	4668      	mov	r0, sp
 80101d6:	f002 f8ed 	bl	80123b4 <memcpy>
 80101da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80101de:	f7fe ff7f 	bl	800f0e0 <pack_data_node>
 80101e2:	4632      	mov	r2, r6
 80101e4:	f104 0110 	add.w	r1, r4, #16
 80101e8:	4668      	mov	r0, sp
 80101ea:	f002 f8e3 	bl	80123b4 <memcpy>
 80101ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80101f2:	f7fe ff75 	bl	800f0e0 <pack_data_node>
 80101f6:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 80101fa:	bd70      	pop	{r4, r5, r6, pc}
 80101fc:	200084ec 	.word	0x200084ec
 8010200:	20012a80 	.word	0x20012a80
 8010204:	2000609c 	.word	0x2000609c
 8010208:	2000a945 	.word	0x2000a945
 801020c:	2000b564 	.word	0x2000b564
 8010210:	2000991c 	.word	0x2000991c
	...

08010220 <parser_1071>:
 8010220:	b538      	push	{r3, r4, r5, lr}
 8010222:	460d      	mov	r5, r1
 8010224:	4912      	ldr	r1, [pc, #72]	; (8010270 <parser_1071+0x50>)
 8010226:	4604      	mov	r4, r0
 8010228:	f7f0 f802 	bl	8000230 <strcmp>
 801022c:	b158      	cbz	r0, 8010246 <parser_1071+0x26>
 801022e:	4911      	ldr	r1, [pc, #68]	; (8010274 <parser_1071+0x54>)
 8010230:	4620      	mov	r0, r4
 8010232:	f7ef fffd 	bl	8000230 <strcmp>
 8010236:	b168      	cbz	r0, 8010254 <parser_1071+0x34>
 8010238:	490f      	ldr	r1, [pc, #60]	; (8010278 <parser_1071+0x58>)
 801023a:	4620      	mov	r0, r4
 801023c:	f7ef fff8 	bl	8000230 <strcmp>
 8010240:	b170      	cbz	r0, 8010260 <parser_1071+0x40>
 8010242:	2000      	movs	r0, #0
 8010244:	bd38      	pop	{r3, r4, r5, pc}
 8010246:	462a      	mov	r2, r5
 8010248:	2102      	movs	r1, #2
 801024a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801024e:	2007      	movs	r0, #7
 8010250:	f7ff b956 	b.w	800f500 <copy_content_buf_to_out>
 8010254:	4629      	mov	r1, r5
 8010256:	2009      	movs	r0, #9
 8010258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801025c:	f7ff b968 	b.w	800f530 <copy_content_node_to_out>
 8010260:	4b06      	ldr	r3, [pc, #24]	; (801027c <parser_1071+0x5c>)
 8010262:	7a58      	ldrb	r0, [r3, #9]
 8010264:	4629      	mov	r1, r5
 8010266:	300a      	adds	r0, #10
 8010268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801026c:	f7ff b960 	b.w	800f530 <copy_content_node_to_out>
 8010270:	08014950 	.word	0x08014950
 8010274:	0801495c 	.word	0x0801495c
 8010278:	08014964 	.word	0x08014964
 801027c:	200068ac 	.word	0x200068ac

08010280 <pack_10c0_data>:
 8010280:	b510      	push	{r4, lr}
 8010282:	2000      	movs	r0, #0
 8010284:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8010288:	f7fe ff02 	bl	800f090 <pack_data_u8>
 801028c:	2000      	movs	r0, #0
 801028e:	f7fe feff 	bl	800f090 <pack_data_u8>
 8010292:	4b0f      	ldr	r3, [pc, #60]	; (80102d0 <pack_10c0_data+0x50>)
 8010294:	4c0f      	ldr	r4, [pc, #60]	; (80102d4 <pack_10c0_data+0x54>)
 8010296:	7818      	ldrb	r0, [r3, #0]
 8010298:	f7fe fefa 	bl	800f090 <pack_data_u8>
 801029c:	4b0e      	ldr	r3, [pc, #56]	; (80102d8 <pack_10c0_data+0x58>)
 801029e:	7818      	ldrb	r0, [r3, #0]
 80102a0:	f7fe fef6 	bl	800f090 <pack_data_u8>
 80102a4:	4b0d      	ldr	r3, [pc, #52]	; (80102dc <pack_10c0_data+0x5c>)
 80102a6:	7818      	ldrb	r0, [r3, #0]
 80102a8:	f7fe fef2 	bl	800f090 <pack_data_u8>
 80102ac:	f104 0110 	add.w	r1, r4, #16
 80102b0:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80102b4:	4668      	mov	r0, sp
 80102b6:	f002 f87d 	bl	80123b4 <memcpy>
 80102ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80102be:	f7fe ff0f 	bl	800f0e0 <pack_data_node>
 80102c2:	2000      	movs	r0, #0
 80102c4:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 80102c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102cc:	f7fe bee0 	b.w	800f090 <pack_data_u8>
 80102d0:	2000c998 	.word	0x2000c998
 80102d4:	20003438 	.word	0x20003438
 80102d8:	20007cd5 	.word	0x20007cd5
 80102dc:	2000b564 	.word	0x2000b564

080102e0 <parser_10c0>:
 80102e0:	b510      	push	{r4, lr}
 80102e2:	460c      	mov	r4, r1
 80102e4:	4905      	ldr	r1, [pc, #20]	; (80102fc <parser_10c0+0x1c>)
 80102e6:	f7ef ffa3 	bl	8000230 <strcmp>
 80102ea:	b108      	cbz	r0, 80102f0 <parser_10c0+0x10>
 80102ec:	2000      	movs	r0, #0
 80102ee:	bd10      	pop	{r4, pc}
 80102f0:	4621      	mov	r1, r4
 80102f2:	2007      	movs	r0, #7
 80102f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102f8:	f7ff b91a 	b.w	800f530 <copy_content_node_to_out>
 80102fc:	08014970 	.word	0x08014970

08010300 <pack_1620_data>:
 8010300:	b570      	push	{r4, r5, r6, lr}
 8010302:	4d51      	ldr	r5, [pc, #324]	; (8010448 <pack_1620_data+0x148>)
 8010304:	4e51      	ldr	r6, [pc, #324]	; (801044c <pack_1620_data+0x14c>)
 8010306:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 801030a:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
 801030e:	f105 0110 	add.w	r1, r5, #16
 8010312:	4622      	mov	r2, r4
 8010314:	4668      	mov	r0, sp
 8010316:	f002 f84d 	bl	80123b4 <memcpy>
 801031a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801031e:	f7fe fedf 	bl	800f0e0 <pack_data_node>
 8010322:	4b4b      	ldr	r3, [pc, #300]	; (8010450 <pack_1620_data+0x150>)
 8010324:	4d4b      	ldr	r5, [pc, #300]	; (8010454 <pack_1620_data+0x154>)
 8010326:	7818      	ldrb	r0, [r3, #0]
 8010328:	f7fe feb2 	bl	800f090 <pack_data_u8>
 801032c:	4622      	mov	r2, r4
 801032e:	f106 0110 	add.w	r1, r6, #16
 8010332:	4668      	mov	r0, sp
 8010334:	f002 f83e 	bl	80123b4 <memcpy>
 8010338:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801033c:	f7fe fed0 	bl	800f0e0 <pack_data_node>
 8010340:	4b45      	ldr	r3, [pc, #276]	; (8010458 <pack_1620_data+0x158>)
 8010342:	4e46      	ldr	r6, [pc, #280]	; (801045c <pack_1620_data+0x15c>)
 8010344:	7818      	ldrb	r0, [r3, #0]
 8010346:	f7fe fea3 	bl	800f090 <pack_data_u8>
 801034a:	4b45      	ldr	r3, [pc, #276]	; (8010460 <pack_1620_data+0x160>)
 801034c:	7818      	ldrb	r0, [r3, #0]
 801034e:	f7fe fe9f 	bl	800f090 <pack_data_u8>
 8010352:	4622      	mov	r2, r4
 8010354:	f105 0110 	add.w	r1, r5, #16
 8010358:	4668      	mov	r0, sp
 801035a:	f002 f82b 	bl	80123b4 <memcpy>
 801035e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010362:	f7fe febd 	bl	800f0e0 <pack_data_node>
 8010366:	4d3f      	ldr	r5, [pc, #252]	; (8010464 <pack_1620_data+0x164>)
 8010368:	4622      	mov	r2, r4
 801036a:	f106 0110 	add.w	r1, r6, #16
 801036e:	4668      	mov	r0, sp
 8010370:	f002 f820 	bl	80123b4 <memcpy>
 8010374:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8010378:	f7fe feb2 	bl	800f0e0 <pack_data_node>
 801037c:	4622      	mov	r2, r4
 801037e:	f105 0110 	add.w	r1, r5, #16
 8010382:	4668      	mov	r0, sp
 8010384:	f002 f816 	bl	80123b4 <memcpy>
 8010388:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801038c:	f7fe fea8 	bl	800f0e0 <pack_data_node>
 8010390:	4b35      	ldr	r3, [pc, #212]	; (8010468 <pack_1620_data+0x168>)
 8010392:	4e36      	ldr	r6, [pc, #216]	; (801046c <pack_1620_data+0x16c>)
 8010394:	7818      	ldrb	r0, [r3, #0]
 8010396:	4d36      	ldr	r5, [pc, #216]	; (8010470 <pack_1620_data+0x170>)
 8010398:	f7fe fe7a 	bl	800f090 <pack_data_u8>
 801039c:	2000      	movs	r0, #0
 801039e:	f7fe fe77 	bl	800f090 <pack_data_u8>
 80103a2:	2001      	movs	r0, #1
 80103a4:	f7fe fe74 	bl	800f090 <pack_data_u8>
 80103a8:	4b32      	ldr	r3, [pc, #200]	; (8010474 <pack_1620_data+0x174>)
 80103aa:	7818      	ldrb	r0, [r3, #0]
 80103ac:	f7fe fe70 	bl	800f090 <pack_data_u8>
 80103b0:	4622      	mov	r2, r4
 80103b2:	f106 0110 	add.w	r1, r6, #16
 80103b6:	4668      	mov	r0, sp
 80103b8:	f001 fffc 	bl	80123b4 <memcpy>
 80103bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80103c0:	f7fe fe8e 	bl	800f0e0 <pack_data_node>
 80103c4:	2000      	movs	r0, #0
 80103c6:	f7fe fe63 	bl	800f090 <pack_data_u8>
 80103ca:	2000      	movs	r0, #0
 80103cc:	f7fe fe60 	bl	800f090 <pack_data_u8>
 80103d0:	4622      	mov	r2, r4
 80103d2:	f105 0110 	add.w	r1, r5, #16
 80103d6:	4668      	mov	r0, sp
 80103d8:	f001 ffec 	bl	80123b4 <memcpy>
 80103dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80103e0:	f7fe fe7e 	bl	800f0e0 <pack_data_node>
 80103e4:	2000      	movs	r0, #0
 80103e6:	f7fe fe53 	bl	800f090 <pack_data_u8>
 80103ea:	2000      	movs	r0, #0
 80103ec:	f7fe fe50 	bl	800f090 <pack_data_u8>
 80103f0:	2000      	movs	r0, #0
 80103f2:	f7fe fe4d 	bl	800f090 <pack_data_u8>
 80103f6:	2000      	movs	r0, #0
 80103f8:	f7fe fe4a 	bl	800f090 <pack_data_u8>
 80103fc:	2000      	movs	r0, #0
 80103fe:	f7fe fe47 	bl	800f090 <pack_data_u8>
 8010402:	2000      	movs	r0, #0
 8010404:	f7fe fe44 	bl	800f090 <pack_data_u8>
 8010408:	2000      	movs	r0, #0
 801040a:	f7fe fe41 	bl	800f090 <pack_data_u8>
 801040e:	2028      	movs	r0, #40	; 0x28
 8010410:	f7fe fe3e 	bl	800f090 <pack_data_u8>
 8010414:	200d      	movs	r0, #13
 8010416:	f7fe fe3b 	bl	800f090 <pack_data_u8>
 801041a:	201f      	movs	r0, #31
 801041c:	f7fe fe38 	bl	800f090 <pack_data_u8>
 8010420:	20a0      	movs	r0, #160	; 0xa0
 8010422:	f7fe fe35 	bl	800f090 <pack_data_u8>
 8010426:	2009      	movs	r0, #9
 8010428:	f7fe fe32 	bl	800f090 <pack_data_u8>
 801042c:	207b      	movs	r0, #123	; 0x7b
 801042e:	f7fe fe2f 	bl	800f090 <pack_data_u8>
 8010432:	2009      	movs	r0, #9
 8010434:	f7fe fe2c 	bl	800f090 <pack_data_u8>
 8010438:	2085      	movs	r0, #133	; 0x85
 801043a:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 801043e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010442:	f7fe be25 	b.w	800f090 <pack_data_u8>
 8010446:	bf00      	nop
 8010448:	20010a34 	.word	0x20010a34
 801044c:	20010e3c 	.word	0x20010e3c
 8010450:	20011e5c 	.word	0x20011e5c
 8010454:	2001226c 	.word	0x2001226c
 8010458:	2000d9b9 	.word	0x2000d9b9
 801045c:	20011e60 	.word	0x20011e60
 8010460:	200078cf 	.word	0x200078cf
 8010464:	2001164c 	.word	0x2001164c
 8010468:	2000609a 	.word	0x2000609a
 801046c:	20011244 	.word	0x20011244
 8010470:	20008d00 	.word	0x20008d00
 8010474:	20012674 	.word	0x20012674
	...

08010480 <parser_1620>:
 8010480:	b570      	push	{r4, r5, r6, lr}
 8010482:	4d14      	ldr	r5, [pc, #80]	; (80104d4 <parser_1620+0x54>)
 8010484:	78ab      	ldrb	r3, [r5, #2]
 8010486:	3b31      	subs	r3, #49	; 0x31
 8010488:	2b01      	cmp	r3, #1
 801048a:	460e      	mov	r6, r1
 801048c:	4604      	mov	r4, r0
 801048e:	d809      	bhi.n	80104a4 <parser_1620+0x24>
 8010490:	4911      	ldr	r1, [pc, #68]	; (80104d8 <parser_1620+0x58>)
 8010492:	f7ef fecd 	bl	8000230 <strcmp>
 8010496:	b198      	cbz	r0, 80104c0 <parser_1620+0x40>
 8010498:	4910      	ldr	r1, [pc, #64]	; (80104dc <parser_1620+0x5c>)
 801049a:	4620      	mov	r0, r4
 801049c:	f7ef fec8 	bl	8000230 <strcmp>
 80104a0:	b138      	cbz	r0, 80104b2 <parser_1620+0x32>
 80104a2:	bd70      	pop	{r4, r5, r6, pc}
 80104a4:	460a      	mov	r2, r1
 80104a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104aa:	4601      	mov	r1, r0
 80104ac:	2005      	movs	r0, #5
 80104ae:	f7ff bd07 	b.w	800fec0 <parser_swipe_data>
 80104b2:	4632      	mov	r2, r6
 80104b4:	2101      	movs	r1, #1
 80104b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104ba:	2002      	movs	r0, #2
 80104bc:	f7ff b820 	b.w	800f500 <copy_content_buf_to_out>
 80104c0:	7969      	ldrb	r1, [r5, #5]
 80104c2:	79ab      	ldrb	r3, [r5, #6]
 80104c4:	4632      	mov	r2, r6
 80104c6:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80104ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104ce:	2007      	movs	r0, #7
 80104d0:	f7ff b816 	b.w	800f500 <copy_content_buf_to_out>
 80104d4:	200068ac 	.word	0x200068ac
 80104d8:	08014978 	.word	0x08014978
 80104dc:	08014984 	.word	0x08014984

080104e0 <pack_1630_data>:
 80104e0:	b570      	push	{r4, r5, r6, lr}
 80104e2:	4b29      	ldr	r3, [pc, #164]	; (8010588 <pack_1630_data+0xa8>)
 80104e4:	4e29      	ldr	r6, [pc, #164]	; (801058c <pack_1630_data+0xac>)
 80104e6:	7818      	ldrb	r0, [r3, #0]
 80104e8:	4c29      	ldr	r4, [pc, #164]	; (8010590 <pack_1630_data+0xb0>)
 80104ea:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80104ee:	f7fe fdcf 	bl	800f090 <pack_data_u8>
 80104f2:	4b28      	ldr	r3, [pc, #160]	; (8010594 <pack_1630_data+0xb4>)
 80104f4:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
 80104f8:	7818      	ldrb	r0, [r3, #0]
 80104fa:	f7fe fdc9 	bl	800f090 <pack_data_u8>
 80104fe:	f106 0110 	add.w	r1, r6, #16
 8010502:	462a      	mov	r2, r5
 8010504:	4668      	mov	r0, sp
 8010506:	f001 ff55 	bl	80123b4 <memcpy>
 801050a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801050e:	f7fe fde7 	bl	800f0e0 <pack_data_node>
 8010512:	462a      	mov	r2, r5
 8010514:	f104 0110 	add.w	r1, r4, #16
 8010518:	4668      	mov	r0, sp
 801051a:	f001 ff4b 	bl	80123b4 <memcpy>
 801051e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010522:	f7fe fddd 	bl	800f0e0 <pack_data_node>
 8010526:	4e1c      	ldr	r6, [pc, #112]	; (8010598 <pack_1630_data+0xb8>)
 8010528:	4c1c      	ldr	r4, [pc, #112]	; (801059c <pack_1630_data+0xbc>)
 801052a:	2000      	movs	r0, #0
 801052c:	f7fe fdb0 	bl	800f090 <pack_data_u8>
 8010530:	2000      	movs	r0, #0
 8010532:	f7fe fdad 	bl	800f090 <pack_data_u8>
 8010536:	462a      	mov	r2, r5
 8010538:	f106 0110 	add.w	r1, r6, #16
 801053c:	4668      	mov	r0, sp
 801053e:	f001 ff39 	bl	80123b4 <memcpy>
 8010542:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8010546:	f7fe fdcb 	bl	800f0e0 <pack_data_node>
 801054a:	462a      	mov	r2, r5
 801054c:	f104 0110 	add.w	r1, r4, #16
 8010550:	4668      	mov	r0, sp
 8010552:	f001 ff2f 	bl	80123b4 <memcpy>
 8010556:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801055a:	4c11      	ldr	r4, [pc, #68]	; (80105a0 <pack_1630_data+0xc0>)
 801055c:	f7fe fdc0 	bl	800f0e0 <pack_data_node>
 8010560:	2000      	movs	r0, #0
 8010562:	f7fe fd95 	bl	800f090 <pack_data_u8>
 8010566:	462a      	mov	r2, r5
 8010568:	f104 0110 	add.w	r1, r4, #16
 801056c:	4668      	mov	r0, sp
 801056e:	f001 ff21 	bl	80123b4 <memcpy>
 8010572:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010576:	f7fe fdb3 	bl	800f0e0 <pack_data_node>
 801057a:	2014      	movs	r0, #20
 801057c:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8010580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010584:	f7fe bd84 	b.w	800f090 <pack_data_u8>
 8010588:	2000a12c 	.word	0x2000a12c
 801058c:	2001226c 	.word	0x2001226c
 8010590:	20009d24 	.word	0x20009d24
 8010594:	2000a538 	.word	0x2000a538
 8010598:	20011244 	.word	0x20011244
 801059c:	20003844 	.word	0x20003844
 80105a0:	200064a4 	.word	0x200064a4
	...

080105b0 <parse_icc_trade_data>:
 80105b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105b4:	460e      	mov	r6, r1
 80105b6:	4940      	ldr	r1, [pc, #256]	; (80106b8 <parse_icc_trade_data+0x108>)
 80105b8:	4615      	mov	r5, r2
 80105ba:	4604      	mov	r4, r0
 80105bc:	f7ef fe38 	bl	8000230 <strcmp>
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d049      	beq.n	8010658 <parse_icc_trade_data+0xa8>
 80105c4:	493d      	ldr	r1, [pc, #244]	; (80106bc <parse_icc_trade_data+0x10c>)
 80105c6:	4620      	mov	r0, r4
 80105c8:	f7ef fe32 	bl	8000230 <strcmp>
 80105cc:	2800      	cmp	r0, #0
 80105ce:	d03d      	beq.n	801064c <parse_icc_trade_data+0x9c>
 80105d0:	493b      	ldr	r1, [pc, #236]	; (80106c0 <parse_icc_trade_data+0x110>)
 80105d2:	4620      	mov	r0, r4
 80105d4:	f7ef fe2c 	bl	8000230 <strcmp>
 80105d8:	2800      	cmp	r0, #0
 80105da:	d048      	beq.n	801066e <parse_icc_trade_data+0xbe>
 80105dc:	4939      	ldr	r1, [pc, #228]	; (80106c4 <parse_icc_trade_data+0x114>)
 80105de:	4620      	mov	r0, r4
 80105e0:	f7ef fe26 	bl	8000230 <strcmp>
 80105e4:	2800      	cmp	r0, #0
 80105e6:	d03d      	beq.n	8010664 <parse_icc_trade_data+0xb4>
 80105e8:	4937      	ldr	r1, [pc, #220]	; (80106c8 <parse_icc_trade_data+0x118>)
 80105ea:	4620      	mov	r0, r4
 80105ec:	f7ef fe20 	bl	8000230 <strcmp>
 80105f0:	2800      	cmp	r0, #0
 80105f2:	d042      	beq.n	801067a <parse_icc_trade_data+0xca>
 80105f4:	4f35      	ldr	r7, [pc, #212]	; (80106cc <parse_icc_trade_data+0x11c>)
 80105f6:	4936      	ldr	r1, [pc, #216]	; (80106d0 <parse_icc_trade_data+0x120>)
 80105f8:	f897 8009 	ldrb.w	r8, [r7, #9]
 80105fc:	4620      	mov	r0, r4
 80105fe:	f7ef fe17 	bl	8000230 <strcmp>
 8010602:	f108 030a 	add.w	r3, r8, #10
 8010606:	2800      	cmp	r0, #0
 8010608:	d040      	beq.n	801068c <parse_icc_trade_data+0xdc>
 801060a:	5cfa      	ldrb	r2, [r7, r3]
 801060c:	4931      	ldr	r1, [pc, #196]	; (80106d4 <parse_icc_trade_data+0x124>)
 801060e:	f108 080b 	add.w	r8, r8, #11
 8010612:	4442      	add	r2, r8
 8010614:	442a      	add	r2, r5
 8010616:	18bb      	adds	r3, r7, r2
 8010618:	5cbd      	ldrb	r5, [r7, r2]
 801061a:	f893 8001 	ldrb.w	r8, [r3, #1]
 801061e:	4620      	mov	r0, r4
 8010620:	eb08 2805 	add.w	r8, r8, r5, lsl #8
 8010624:	1c95      	adds	r5, r2, #2
 8010626:	f7ef fe03 	bl	8000230 <strcmp>
 801062a:	2800      	cmp	r0, #0
 801062c:	d036      	beq.n	801069c <parse_icc_trade_data+0xec>
 801062e:	79bb      	ldrb	r3, [r7, #6]
 8010630:	2b11      	cmp	r3, #17
 8010632:	eb05 0008 	add.w	r0, r5, r8
 8010636:	d038      	beq.n	80106aa <parse_icc_trade_data+0xfa>
 8010638:	2b28      	cmp	r3, #40	; 0x28
 801063a:	bf18      	it	ne
 801063c:	2000      	movne	r0, #0
 801063e:	d109      	bne.n	8010654 <parse_icc_trade_data+0xa4>
 8010640:	4632      	mov	r2, r6
 8010642:	4621      	mov	r1, r4
 8010644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010648:	f7ff b9da 	b.w	800fa00 <parser_swipe_data_18>
 801064c:	4b1f      	ldr	r3, [pc, #124]	; (80106cc <parse_icc_trade_data+0x11c>)
 801064e:	799b      	ldrb	r3, [r3, #6]
 8010650:	7033      	strb	r3, [r6, #0]
 8010652:	2001      	movs	r0, #1
 8010654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010658:	4b1c      	ldr	r3, [pc, #112]	; (80106cc <parse_icc_trade_data+0x11c>)
 801065a:	789b      	ldrb	r3, [r3, #2]
 801065c:	7033      	strb	r3, [r6, #0]
 801065e:	2001      	movs	r0, #1
 8010660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010664:	4b19      	ldr	r3, [pc, #100]	; (80106cc <parse_icc_trade_data+0x11c>)
 8010666:	7a1b      	ldrb	r3, [r3, #8]
 8010668:	7033      	strb	r3, [r6, #0]
 801066a:	2001      	movs	r0, #1
 801066c:	e7f2      	b.n	8010654 <parse_icc_trade_data+0xa4>
 801066e:	4b17      	ldr	r3, [pc, #92]	; (80106cc <parse_icc_trade_data+0x11c>)
 8010670:	79db      	ldrb	r3, [r3, #7]
 8010672:	7033      	strb	r3, [r6, #0]
 8010674:	2001      	movs	r0, #1
 8010676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801067a:	4b14      	ldr	r3, [pc, #80]	; (80106cc <parse_icc_trade_data+0x11c>)
 801067c:	789b      	ldrb	r3, [r3, #2]
 801067e:	7033      	strb	r3, [r6, #0]
 8010680:	4631      	mov	r1, r6
 8010682:	2009      	movs	r0, #9
 8010684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010688:	f7fe bf52 	b.w	800f530 <copy_content_node_to_out>
 801068c:	78ba      	ldrb	r2, [r7, #2]
 801068e:	7032      	strb	r2, [r6, #0]
 8010690:	4631      	mov	r1, r6
 8010692:	4618      	mov	r0, r3
 8010694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010698:	f7fe bf4a 	b.w	800f530 <copy_content_node_to_out>
 801069c:	4632      	mov	r2, r6
 801069e:	4641      	mov	r1, r8
 80106a0:	4628      	mov	r0, r5
 80106a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106a6:	f7fe bf2b 	b.w	800f500 <copy_content_buf_to_out>
 80106aa:	4632      	mov	r2, r6
 80106ac:	4621      	mov	r1, r4
 80106ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106b2:	f7ff b8d5 	b.w	800f860 <parser_qf_swipe_data>
 80106b6:	bf00      	nop
 80106b8:	080147f8 	.word	0x080147f8
 80106bc:	080145f4 	.word	0x080145f4
 80106c0:	08014990 	.word	0x08014990
 80106c4:	0801499c 	.word	0x0801499c
 80106c8:	080149a8 	.word	0x080149a8
 80106cc:	200068ac 	.word	0x200068ac
 80106d0:	080149b8 	.word	0x080149b8
 80106d4:	080149cc 	.word	0x080149cc
	...

080106e0 <parser_1630>:
 80106e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e2:	4d1d      	ldr	r5, [pc, #116]	; (8010758 <parser_1630+0x78>)
 80106e4:	78ab      	ldrb	r3, [r5, #2]
 80106e6:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80106ea:	2e01      	cmp	r6, #1
 80106ec:	4604      	mov	r4, r0
 80106ee:	460f      	mov	r7, r1
 80106f0:	d90b      	bls.n	801070a <parser_1630+0x2a>
 80106f2:	2b02      	cmp	r3, #2
 80106f4:	d118      	bne.n	8010728 <parser_1630+0x48>
 80106f6:	4919      	ldr	r1, [pc, #100]	; (801075c <parser_1630+0x7c>)
 80106f8:	f7ef fd9a 	bl	8000230 <strcmp>
 80106fc:	b300      	cbz	r0, 8010740 <parser_1630+0x60>
 80106fe:	4918      	ldr	r1, [pc, #96]	; (8010760 <parser_1630+0x80>)
 8010700:	4620      	mov	r0, r4
 8010702:	f7ef fd95 	bl	8000230 <strcmp>
 8010706:	b1a0      	cbz	r0, 8010732 <parser_1630+0x52>
 8010708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801070a:	4916      	ldr	r1, [pc, #88]	; (8010764 <parser_1630+0x84>)
 801070c:	f7ef fd90 	bl	8000230 <strcmp>
 8010710:	2800      	cmp	r0, #0
 8010712:	d1f4      	bne.n	80106fe <parser_1630+0x1e>
 8010714:	7969      	ldrb	r1, [r5, #5]
 8010716:	79ab      	ldrb	r3, [r5, #6]
 8010718:	463a      	mov	r2, r7
 801071a:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 801071e:	2007      	movs	r0, #7
 8010720:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010724:	f7fe beec 	b.w	800f500 <copy_content_buf_to_out>
 8010728:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801072c:	2200      	movs	r2, #0
 801072e:	f7ff bf3f 	b.w	80105b0 <parse_icc_trade_data>
 8010732:	463a      	mov	r2, r7
 8010734:	2101      	movs	r1, #1
 8010736:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801073a:	2002      	movs	r0, #2
 801073c:	f7fe bee0 	b.w	800f500 <copy_content_buf_to_out>
 8010740:	78eb      	ldrb	r3, [r5, #3]
 8010742:	7929      	ldrb	r1, [r5, #4]
 8010744:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010748:	463a      	mov	r2, r7
 801074a:	3901      	subs	r1, #1
 801074c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010750:	2006      	movs	r0, #6
 8010752:	f7fe bed5 	b.w	800f500 <copy_content_buf_to_out>
 8010756:	bf00      	nop
 8010758:	200068ac 	.word	0x200068ac
 801075c:	080149d4 	.word	0x080149d4
 8010760:	08014984 	.word	0x08014984
 8010764:	08014978 	.word	0x08014978
	...

08010770 <pack_1634_data>:
 8010770:	b530      	push	{r4, r5, lr}
 8010772:	4c1e      	ldr	r4, [pc, #120]	; (80107ec <pack_1634_data+0x7c>)
 8010774:	4b1e      	ldr	r3, [pc, #120]	; (80107f0 <pack_1634_data+0x80>)
 8010776:	6825      	ldr	r5, [r4, #0]
 8010778:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 801077c:	b9c5      	cbnz	r5, 80107b0 <pack_1634_data+0x40>
 801077e:	4c1d      	ldr	r4, [pc, #116]	; (80107f4 <pack_1634_data+0x84>)
 8010780:	7818      	ldrb	r0, [r3, #0]
 8010782:	f7fe fc85 	bl	800f090 <pack_data_u8>
 8010786:	f104 0110 	add.w	r1, r4, #16
 801078a:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 801078e:	4668      	mov	r0, sp
 8010790:	f001 fe10 	bl	80123b4 <memcpy>
 8010794:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010798:	f7fe fca2 	bl	800f0e0 <pack_data_node>
 801079c:	2001      	movs	r0, #1
 801079e:	f7fe fc77 	bl	800f090 <pack_data_u8>
 80107a2:	4628      	mov	r0, r5
 80107a4:	f50d 7d7f 	add.w	sp, sp, #1020	; 0x3fc
 80107a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80107ac:	f7fe bc70 	b.w	800f090 <pack_data_u8>
 80107b0:	4d10      	ldr	r5, [pc, #64]	; (80107f4 <pack_1634_data+0x84>)
 80107b2:	7818      	ldrb	r0, [r3, #0]
 80107b4:	f7fe fc6c 	bl	800f090 <pack_data_u8>
 80107b8:	f105 0110 	add.w	r1, r5, #16
 80107bc:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80107c0:	4668      	mov	r0, sp
 80107c2:	f001 fdf7 	bl	80123b4 <memcpy>
 80107c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80107ca:	f7fe fc89 	bl	800f0e0 <pack_data_node>
 80107ce:	f104 0110 	add.w	r1, r4, #16
 80107d2:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80107d6:	4668      	mov	r0, sp
 80107d8:	f001 fdec 	bl	80123b4 <memcpy>
 80107dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80107e0:	f7fe fc7e 	bl	800f0e0 <pack_data_node>
 80107e4:	f50d 7d7f 	add.w	sp, sp, #1020	; 0x3fc
 80107e8:	bd30      	pop	{r4, r5, pc}
 80107ea:	bf00      	nop
 80107ec:	2000d5b0 	.word	0x2000d5b0
 80107f0:	20004864 	.word	0x20004864
 80107f4:	2000d1a8 	.word	0x2000d1a8
	...

08010800 <pack_1640_data>:
 8010800:	b510      	push	{r4, lr}
 8010802:	4c08      	ldr	r4, [pc, #32]	; (8010824 <pack_1640_data+0x24>)
 8010804:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8010808:	f104 0110 	add.w	r1, r4, #16
 801080c:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8010810:	4668      	mov	r0, sp
 8010812:	f001 fdcf 	bl	80123b4 <memcpy>
 8010816:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801081a:	f7fe fc61 	bl	800f0e0 <pack_data_node>
 801081e:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8010822:	bd10      	pop	{r4, pc}
 8010824:	2000a130 	.word	0x2000a130
	...

08010830 <parser_1634>:
 8010830:	b430      	push	{r4, r5}
 8010832:	4c0a      	ldr	r4, [pc, #40]	; (801085c <parser_1634+0x2c>)
 8010834:	7825      	ldrb	r5, [r4, #0]
 8010836:	2d16      	cmp	r5, #22
 8010838:	d001      	beq.n	801083e <parser_1634+0xe>
 801083a:	bc30      	pop	{r4, r5}
 801083c:	4770      	bx	lr
 801083e:	7864      	ldrb	r4, [r4, #1]
 8010840:	2c20      	cmp	r4, #32
 8010842:	d005      	beq.n	8010850 <parser_1634+0x20>
 8010844:	2c30      	cmp	r4, #48	; 0x30
 8010846:	d1f8      	bne.n	801083a <parser_1634+0xa>
 8010848:	bc30      	pop	{r4, r5}
 801084a:	2200      	movs	r2, #0
 801084c:	f7ff beb0 	b.w	80105b0 <parse_icc_trade_data>
 8010850:	460a      	mov	r2, r1
 8010852:	bc30      	pop	{r4, r5}
 8010854:	4601      	mov	r1, r0
 8010856:	2005      	movs	r0, #5
 8010858:	f7ff bb32 	b.w	800fec0 <parser_swipe_data>
 801085c:	200068ac 	.word	0x200068ac

08010860 <parser_1640>:
 8010860:	4b0c      	ldr	r3, [pc, #48]	; (8010894 <parser_1640+0x34>)
 8010862:	78db      	ldrb	r3, [r3, #3]
 8010864:	2b34      	cmp	r3, #52	; 0x34
 8010866:	d106      	bne.n	8010876 <parser_1640+0x16>
 8010868:	b510      	push	{r4, lr}
 801086a:	460c      	mov	r4, r1
 801086c:	490a      	ldr	r1, [pc, #40]	; (8010898 <parser_1640+0x38>)
 801086e:	f7ef fcdf 	bl	8000230 <strcmp>
 8010872:	b118      	cbz	r0, 801087c <parser_1640+0x1c>
 8010874:	bd10      	pop	{r4, pc}
 8010876:	2200      	movs	r2, #0
 8010878:	f7ff be9a 	b.w	80105b0 <parse_icc_trade_data>
 801087c:	4b07      	ldr	r3, [pc, #28]	; (801089c <parser_1640+0x3c>)
 801087e:	78d9      	ldrb	r1, [r3, #3]
 8010880:	791b      	ldrb	r3, [r3, #4]
 8010882:	4622      	mov	r2, r4
 8010884:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8010888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801088c:	2005      	movs	r0, #5
 801088e:	f7fe be37 	b.w	800f500 <copy_content_buf_to_out>
 8010892:	bf00      	nop
 8010894:	2000c99c 	.word	0x2000c99c
 8010898:	080149cc 	.word	0x080149cc
 801089c:	200068ac 	.word	0x200068ac

080108a0 <parser_1650>:
 80108a0:	2000      	movs	r0, #0
 80108a2:	4770      	bx	lr
	...

080108b0 <pack_1651_data>:
 80108b0:	b510      	push	{r4, lr}
 80108b2:	4b10      	ldr	r3, [pc, #64]	; (80108f4 <pack_1651_data+0x44>)
 80108b4:	4c10      	ldr	r4, [pc, #64]	; (80108f8 <pack_1651_data+0x48>)
 80108b6:	7818      	ldrb	r0, [r3, #0]
 80108b8:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80108bc:	f7fe fbe8 	bl	800f090 <pack_data_u8>
 80108c0:	4b0e      	ldr	r3, [pc, #56]	; (80108fc <pack_1651_data+0x4c>)
 80108c2:	7818      	ldrb	r0, [r3, #0]
 80108c4:	f7fe fbe4 	bl	800f090 <pack_data_u8>
 80108c8:	4b0d      	ldr	r3, [pc, #52]	; (8010900 <pack_1651_data+0x50>)
 80108ca:	7818      	ldrb	r0, [r3, #0]
 80108cc:	f7fe fbe0 	bl	800f090 <pack_data_u8>
 80108d0:	4b0c      	ldr	r3, [pc, #48]	; (8010904 <pack_1651_data+0x54>)
 80108d2:	7818      	ldrb	r0, [r3, #0]
 80108d4:	f7fe fbdc 	bl	800f090 <pack_data_u8>
 80108d8:	f104 0110 	add.w	r1, r4, #16
 80108dc:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80108e0:	4668      	mov	r0, sp
 80108e2:	f001 fd67 	bl	80123b4 <memcpy>
 80108e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80108ea:	f7fe fbf9 	bl	800f0e0 <pack_data_node>
 80108ee:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 80108f2:	bd10      	pop	{r4, pc}
 80108f4:	200084ec 	.word	0x200084ec
 80108f8:	20011e60 	.word	0x20011e60
 80108fc:	20011e5c 	.word	0x20011e5c
 8010900:	2000a538 	.word	0x2000a538
 8010904:	2000b564 	.word	0x2000b564
	...

08010910 <parser_1651>:
 8010910:	b510      	push	{r4, lr}
 8010912:	460c      	mov	r4, r1
 8010914:	490b      	ldr	r1, [pc, #44]	; (8010944 <parser_1651+0x34>)
 8010916:	f7ef fc8b 	bl	8000230 <strcmp>
 801091a:	b110      	cbz	r0, 8010922 <parser_1651+0x12>
 801091c:	2400      	movs	r4, #0
 801091e:	4620      	mov	r0, r4
 8010920:	bd10      	pop	{r4, pc}
 8010922:	4b09      	ldr	r3, [pc, #36]	; (8010948 <parser_1651+0x38>)
 8010924:	78d9      	ldrb	r1, [r3, #3]
 8010926:	791b      	ldrb	r3, [r3, #4]
 8010928:	4622      	mov	r2, r4
 801092a:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 801092e:	2005      	movs	r0, #5
 8010930:	f7fe fde6 	bl	800f500 <copy_content_buf_to_out>
 8010934:	4603      	mov	r3, r0
 8010936:	4621      	mov	r1, r4
 8010938:	4804      	ldr	r0, [pc, #16]	; (801094c <parser_1651+0x3c>)
 801093a:	461c      	mov	r4, r3
 801093c:	f002 f92e 	bl	8012b9c <iprintf>
 8010940:	4620      	mov	r0, r4
 8010942:	bd10      	pop	{r4, pc}
 8010944:	080149e0 	.word	0x080149e0
 8010948:	200068ac 	.word	0x200068ac
 801094c:	080149f0 	.word	0x080149f0

08010950 <pack_1660_data>:
 8010950:	4b01      	ldr	r3, [pc, #4]	; (8010958 <pack_1660_data+0x8>)
 8010952:	7818      	ldrb	r0, [r3, #0]
 8010954:	f7fe bb9c 	b.w	800f090 <pack_data_u8>
 8010958:	20003840 	.word	0x20003840
 801095c:	00000000 	.word	0x00000000

08010960 <parser_1660>:
 8010960:	b538      	push	{r3, r4, r5, lr}
 8010962:	460d      	mov	r5, r1
 8010964:	4914      	ldr	r1, [pc, #80]	; (80109b8 <parser_1660+0x58>)
 8010966:	4604      	mov	r4, r0
 8010968:	f7ef fc62 	bl	8000230 <strcmp>
 801096c:	b158      	cbz	r0, 8010986 <parser_1660+0x26>
 801096e:	4913      	ldr	r1, [pc, #76]	; (80109bc <parser_1660+0x5c>)
 8010970:	4620      	mov	r0, r4
 8010972:	f7ef fc5d 	bl	8000230 <strcmp>
 8010976:	b1b8      	cbz	r0, 80109a8 <parser_1660+0x48>
 8010978:	4911      	ldr	r1, [pc, #68]	; (80109c0 <parser_1660+0x60>)
 801097a:	4620      	mov	r0, r4
 801097c:	f7ef fc58 	bl	8000230 <strcmp>
 8010980:	b130      	cbz	r0, 8010990 <parser_1660+0x30>
 8010982:	2000      	movs	r0, #0
 8010984:	bd38      	pop	{r3, r4, r5, pc}
 8010986:	4b0f      	ldr	r3, [pc, #60]	; (80109c4 <parser_1660+0x64>)
 8010988:	795b      	ldrb	r3, [r3, #5]
 801098a:	702b      	strb	r3, [r5, #0]
 801098c:	2001      	movs	r0, #1
 801098e:	bd38      	pop	{r3, r4, r5, pc}
 8010990:	4b0c      	ldr	r3, [pc, #48]	; (80109c4 <parser_1660+0x64>)
 8010992:	7c18      	ldrb	r0, [r3, #16]
 8010994:	7c59      	ldrb	r1, [r3, #17]
 8010996:	462a      	mov	r2, r5
 8010998:	2900      	cmp	r1, #0
 801099a:	bf08      	it	eq
 801099c:	4601      	moveq	r1, r0
 801099e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109a2:	2012      	movs	r0, #18
 80109a4:	f7fe bdac 	b.w	800f500 <copy_content_buf_to_out>
 80109a8:	462a      	mov	r2, r5
 80109aa:	210a      	movs	r1, #10
 80109ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109b0:	2006      	movs	r0, #6
 80109b2:	f7fe bda5 	b.w	800f500 <copy_content_buf_to_out>
 80109b6:	bf00      	nop
 80109b8:	08014a04 	.word	0x08014a04
 80109bc:	08014a0c 	.word	0x08014a0c
 80109c0:	08014a10 	.word	0x08014a10
 80109c4:	200068ac 	.word	0x200068ac
	...

080109d0 <pack_1670_data>:
 80109d0:	b510      	push	{r4, lr}
 80109d2:	4c08      	ldr	r4, [pc, #32]	; (80109f4 <pack_1670_data+0x24>)
 80109d4:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80109d8:	f104 0110 	add.w	r1, r4, #16
 80109dc:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80109e0:	4668      	mov	r0, sp
 80109e2:	f001 fce7 	bl	80123b4 <memcpy>
 80109e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80109ea:	f7fe fb79 	bl	800f0e0 <pack_data_node>
 80109ee:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 80109f2:	bd10      	pop	{r4, pc}
 80109f4:	20005c90 	.word	0x20005c90
	...

08010a00 <parser_1670>:
 8010a00:	b538      	push	{r3, r4, r5, lr}
 8010a02:	460d      	mov	r5, r1
 8010a04:	4911      	ldr	r1, [pc, #68]	; (8010a4c <parser_1670+0x4c>)
 8010a06:	4604      	mov	r4, r0
 8010a08:	f7ef fc12 	bl	8000230 <strcmp>
 8010a0c:	b180      	cbz	r0, 8010a30 <parser_1670+0x30>
 8010a0e:	4910      	ldr	r1, [pc, #64]	; (8010a50 <parser_1670+0x50>)
 8010a10:	4620      	mov	r0, r4
 8010a12:	f7ef fc0d 	bl	8000230 <strcmp>
 8010a16:	b130      	cbz	r0, 8010a26 <parser_1670+0x26>
 8010a18:	490e      	ldr	r1, [pc, #56]	; (8010a54 <parser_1670+0x54>)
 8010a1a:	4620      	mov	r0, r4
 8010a1c:	f7ef fc08 	bl	8000230 <strcmp>
 8010a20:	b158      	cbz	r0, 8010a3a <parser_1670+0x3a>
 8010a22:	2000      	movs	r0, #0
 8010a24:	bd38      	pop	{r3, r4, r5, pc}
 8010a26:	4b0c      	ldr	r3, [pc, #48]	; (8010a58 <parser_1670+0x58>)
 8010a28:	799b      	ldrb	r3, [r3, #6]
 8010a2a:	702b      	strb	r3, [r5, #0]
 8010a2c:	2001      	movs	r0, #1
 8010a2e:	bd38      	pop	{r3, r4, r5, pc}
 8010a30:	4b09      	ldr	r3, [pc, #36]	; (8010a58 <parser_1670+0x58>)
 8010a32:	795b      	ldrb	r3, [r3, #5]
 8010a34:	702b      	strb	r3, [r5, #0]
 8010a36:	2001      	movs	r0, #1
 8010a38:	bd38      	pop	{r3, r4, r5, pc}
 8010a3a:	4b07      	ldr	r3, [pc, #28]	; (8010a58 <parser_1670+0x58>)
 8010a3c:	462a      	mov	r2, r5
 8010a3e:	79d9      	ldrb	r1, [r3, #7]
 8010a40:	2008      	movs	r0, #8
 8010a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a46:	f7fe bd5b 	b.w	800f500 <copy_content_buf_to_out>
 8010a4a:	bf00      	nop
 8010a4c:	08014a14 	.word	0x08014a14
 8010a50:	08014a20 	.word	0x08014a20
 8010a54:	08014a28 	.word	0x08014a28
 8010a58:	200068ac 	.word	0x200068ac
 8010a5c:	00000000 	.word	0x00000000

08010a60 <pack_16b0_data>:
 8010a60:	b510      	push	{r4, lr}
 8010a62:	4b0c      	ldr	r3, [pc, #48]	; (8010a94 <pack_16b0_data+0x34>)
 8010a64:	4c0c      	ldr	r4, [pc, #48]	; (8010a98 <pack_16b0_data+0x38>)
 8010a66:	7818      	ldrb	r0, [r3, #0]
 8010a68:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8010a6c:	f7fe fb10 	bl	800f090 <pack_data_u8>
 8010a70:	2005      	movs	r0, #5
 8010a72:	f7fe fb0d 	bl	800f090 <pack_data_u8>
 8010a76:	f104 0110 	add.w	r1, r4, #16
 8010a7a:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8010a7e:	4668      	mov	r0, sp
 8010a80:	f001 fc98 	bl	80123b4 <memcpy>
 8010a84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010a88:	f7fe fb2a 	bl	800f0e0 <pack_data_node>
 8010a8c:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8010a90:	bd10      	pop	{r4, pc}
 8010a92:	bf00      	nop
 8010a94:	2000e9dc 	.word	0x2000e9dc
 8010a98:	2001226c 	.word	0x2001226c
 8010a9c:	00000000 	.word	0x00000000

08010aa0 <parser_16b0>:
 8010aa0:	b510      	push	{r4, lr}
 8010aa2:	460c      	mov	r4, r1
 8010aa4:	4908      	ldr	r1, [pc, #32]	; (8010ac8 <parser_16b0+0x28>)
 8010aa6:	f7ef fbc3 	bl	8000230 <strcmp>
 8010aaa:	b108      	cbz	r0, 8010ab0 <parser_16b0+0x10>
 8010aac:	2000      	movs	r0, #0
 8010aae:	bd10      	pop	{r4, pc}
 8010ab0:	4b06      	ldr	r3, [pc, #24]	; (8010acc <parser_16b0+0x2c>)
 8010ab2:	78d9      	ldrb	r1, [r3, #3]
 8010ab4:	791b      	ldrb	r3, [r3, #4]
 8010ab6:	4622      	mov	r2, r4
 8010ab8:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8010abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ac0:	2005      	movs	r0, #5
 8010ac2:	f7fe bd1d 	b.w	800f500 <copy_content_buf_to_out>
 8010ac6:	bf00      	nop
 8010ac8:	08014a34 	.word	0x08014a34
 8010acc:	200068ac 	.word	0x200068ac

08010ad0 <pack_16F1_data>:
 8010ad0:	b510      	push	{r4, lr}
 8010ad2:	4c0b      	ldr	r4, [pc, #44]	; (8010b00 <pack_16F1_data+0x30>)
 8010ad4:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8010ad8:	f104 0110 	add.w	r1, r4, #16
 8010adc:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8010ae0:	4668      	mov	r0, sp
 8010ae2:	f001 fc67 	bl	80123b4 <memcpy>
 8010ae6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010aea:	f7fe faf9 	bl	800f0e0 <pack_data_node>
 8010aee:	4b05      	ldr	r3, [pc, #20]	; (8010b04 <pack_16F1_data+0x34>)
 8010af0:	7818      	ldrb	r0, [r3, #0]
 8010af2:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8010af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010afa:	f7fe bac9 	b.w	800f090 <pack_data_u8>
 8010afe:	bf00      	nop
 8010b00:	200080e4 	.word	0x200080e4
 8010b04:	20004865 	.word	0x20004865
	...

08010b10 <parser_16F1>:
 8010b10:	b510      	push	{r4, lr}
 8010b12:	460c      	mov	r4, r1
 8010b14:	4906      	ldr	r1, [pc, #24]	; (8010b30 <parser_16F1+0x20>)
 8010b16:	f7ef fb8b 	bl	8000230 <strcmp>
 8010b1a:	b108      	cbz	r0, 8010b20 <parser_16F1+0x10>
 8010b1c:	2000      	movs	r0, #0
 8010b1e:	bd10      	pop	{r4, pc}
 8010b20:	4b04      	ldr	r3, [pc, #16]	; (8010b34 <parser_16F1+0x24>)
 8010b22:	78d8      	ldrb	r0, [r3, #3]
 8010b24:	4621      	mov	r1, r4
 8010b26:	3004      	adds	r0, #4
 8010b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b2c:	f7fe bd00 	b.w	800f530 <copy_content_node_to_out>
 8010b30:	08014a3c 	.word	0x08014a3c
 8010b34:	200068ac 	.word	0x200068ac
	...

08010b40 <pack_17a0_data>:
 8010b40:	b510      	push	{r4, lr}
 8010b42:	4c0e      	ldr	r4, [pc, #56]	; (8010b7c <pack_17a0_data+0x3c>)
 8010b44:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8010b48:	7820      	ldrb	r0, [r4, #0]
 8010b4a:	f7fe faa1 	bl	800f090 <pack_data_u8>
 8010b4e:	7823      	ldrb	r3, [r4, #0]
 8010b50:	2b04      	cmp	r3, #4
 8010b52:	d001      	beq.n	8010b58 <pack_17a0_data+0x18>
 8010b54:	2b01      	cmp	r3, #1
 8010b56:	d102      	bne.n	8010b5e <pack_17a0_data+0x1e>
 8010b58:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8010b5c:	bd10      	pop	{r4, pc}
 8010b5e:	4c08      	ldr	r4, [pc, #32]	; (8010b80 <pack_17a0_data+0x40>)
 8010b60:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8010b64:	f104 0110 	add.w	r1, r4, #16
 8010b68:	4668      	mov	r0, sp
 8010b6a:	f001 fc23 	bl	80123b4 <memcpy>
 8010b6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010b72:	f7fe fab5 	bl	800f0e0 <pack_data_node>
 8010b76:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8010b7a:	bd10      	pop	{r4, pc}
 8010b7c:	20007cd4 	.word	0x20007cd4
 8010b80:	20010220 	.word	0x20010220
	...

08010b90 <parser_17a0>:
 8010b90:	b510      	push	{r4, lr}
 8010b92:	460c      	mov	r4, r1
 8010b94:	4907      	ldr	r1, [pc, #28]	; (8010bb4 <parser_17a0+0x24>)
 8010b96:	f7ef fb4b 	bl	8000230 <strcmp>
 8010b9a:	b100      	cbz	r0, 8010b9e <parser_17a0+0xe>
 8010b9c:	bd10      	pop	{r4, pc}
 8010b9e:	4b06      	ldr	r3, [pc, #24]	; (8010bb8 <parser_17a0+0x28>)
 8010ba0:	78d9      	ldrb	r1, [r3, #3]
 8010ba2:	791b      	ldrb	r3, [r3, #4]
 8010ba4:	4622      	mov	r2, r4
 8010ba6:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8010baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bae:	2005      	movs	r0, #5
 8010bb0:	f7fe bca6 	b.w	800f500 <copy_content_buf_to_out>
 8010bb4:	080149e8 	.word	0x080149e8
 8010bb8:	200068ac 	.word	0x200068ac
 8010bbc:	00000000 	.word	0x00000000

08010bc0 <pack_17a1_data>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	4c0e      	ldr	r4, [pc, #56]	; (8010bfc <pack_17a1_data+0x3c>)
 8010bc4:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8010bc8:	7820      	ldrb	r0, [r4, #0]
 8010bca:	f7fe fa61 	bl	800f090 <pack_data_u8>
 8010bce:	7823      	ldrb	r3, [r4, #0]
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d001      	beq.n	8010bd8 <pack_17a1_data+0x18>
 8010bd4:	2b04      	cmp	r3, #4
 8010bd6:	d102      	bne.n	8010bde <pack_17a1_data+0x1e>
 8010bd8:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8010bdc:	bd10      	pop	{r4, pc}
 8010bde:	4c08      	ldr	r4, [pc, #32]	; (8010c00 <pack_17a1_data+0x40>)
 8010be0:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8010be4:	f104 0110 	add.w	r1, r4, #16
 8010be8:	4668      	mov	r0, sp
 8010bea:	f001 fbe3 	bl	80123b4 <memcpy>
 8010bee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010bf2:	f7fe fa75 	bl	800f0e0 <pack_data_node>
 8010bf6:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8010bfa:	bd10      	pop	{r4, pc}
 8010bfc:	20007cd4 	.word	0x20007cd4
 8010c00:	20010220 	.word	0x20010220
	...

08010c10 <parser_17a1>:
 8010c10:	f7ff bfbe 	b.w	8010b90 <parser_17a0>
	...

08010c20 <pack_4000_data>:
 8010c20:	b510      	push	{r4, lr}
 8010c22:	4c0a      	ldr	r4, [pc, #40]	; (8010c4c <pack_4000_data+0x2c>)
 8010c24:	480a      	ldr	r0, [pc, #40]	; (8010c50 <pack_4000_data+0x30>)
 8010c26:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8010c2a:	f7fe fa41 	bl	800f0b0 <pack_data_u16>
 8010c2e:	f104 0110 	add.w	r1, r4, #16
 8010c32:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8010c36:	4668      	mov	r0, sp
 8010c38:	f001 fbbc 	bl	80123b4 <memcpy>
 8010c3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010c40:	f7fe fa4e 	bl	800f0e0 <pack_data_node>
 8010c44:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8010c48:	bd10      	pop	{r4, pc}
 8010c4a:	bf00      	nop
 8010c4c:	200084f0 	.word	0x200084f0
 8010c50:	20012e88 	.word	0x20012e88
	...

08010c60 <parser_4000>:
 8010c60:	2000      	movs	r0, #0
 8010c62:	4770      	bx	lr
	...

08010c70 <parser_4010>:
 8010c70:	2000      	movs	r0, #0
 8010c72:	4770      	bx	lr
	...

08010c80 <pack_4110_data>:
 8010c80:	b510      	push	{r4, lr}
 8010c82:	4c0c      	ldr	r4, [pc, #48]	; (8010cb4 <pack_4110_data+0x34>)
 8010c84:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8010c88:	2040      	movs	r0, #64	; 0x40
 8010c8a:	f7fe fa01 	bl	800f090 <pack_data_u8>
 8010c8e:	f104 0110 	add.w	r1, r4, #16
 8010c92:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8010c96:	4668      	mov	r0, sp
 8010c98:	f001 fb8c 	bl	80123b4 <memcpy>
 8010c9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010ca0:	f7fe fa1e 	bl	800f0e0 <pack_data_node>
 8010ca4:	2000      	movs	r0, #0
 8010ca6:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8010caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cae:	f7fe b9ef 	b.w	800f090 <pack_data_u8>
 8010cb2:	bf00      	nop
 8010cb4:	20005888 	.word	0x20005888
	...

08010cc0 <parser_4110>:
 8010cc0:	2000      	movs	r0, #0
 8010cc2:	4770      	bx	lr
	...

08010cd0 <parser_1130>:
 8010cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cd4:	4e3a      	ldr	r6, [pc, #232]	; (8010dc0 <parser_1130+0xf0>)
 8010cd6:	460f      	mov	r7, r1
 8010cd8:	493a      	ldr	r1, [pc, #232]	; (8010dc4 <parser_1130+0xf4>)
 8010cda:	7974      	ldrb	r4, [r6, #5]
 8010cdc:	4605      	mov	r5, r0
 8010cde:	f7ef faa7 	bl	8000230 <strcmp>
 8010ce2:	2800      	cmp	r0, #0
 8010ce4:	d058      	beq.n	8010d98 <parser_1130+0xc8>
 8010ce6:	4938      	ldr	r1, [pc, #224]	; (8010dc8 <parser_1130+0xf8>)
 8010ce8:	4628      	mov	r0, r5
 8010cea:	f104 0806 	add.w	r8, r4, #6
 8010cee:	f7ef fa9f 	bl	8000230 <strcmp>
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	d056      	beq.n	8010da4 <parser_1130+0xd4>
 8010cf6:	f816 3008 	ldrb.w	r3, [r6, r8]
 8010cfa:	4934      	ldr	r1, [pc, #208]	; (8010dcc <parser_1130+0xfc>)
 8010cfc:	3407      	adds	r4, #7
 8010cfe:	4628      	mov	r0, r5
 8010d00:	441c      	add	r4, r3
 8010d02:	f7ef fa95 	bl	8000230 <strcmp>
 8010d06:	2800      	cmp	r0, #0
 8010d08:	d040      	beq.n	8010d8c <parser_1130+0xbc>
 8010d0a:	5d33      	ldrb	r3, [r6, r4]
 8010d0c:	4930      	ldr	r1, [pc, #192]	; (8010dd0 <parser_1130+0x100>)
 8010d0e:	3401      	adds	r4, #1
 8010d10:	4628      	mov	r0, r5
 8010d12:	441c      	add	r4, r3
 8010d14:	f7ef fa8c 	bl	8000230 <strcmp>
 8010d18:	2800      	cmp	r0, #0
 8010d1a:	d037      	beq.n	8010d8c <parser_1130+0xbc>
 8010d1c:	5d33      	ldrb	r3, [r6, r4]
 8010d1e:	492d      	ldr	r1, [pc, #180]	; (8010dd4 <parser_1130+0x104>)
 8010d20:	3401      	adds	r4, #1
 8010d22:	4628      	mov	r0, r5
 8010d24:	441c      	add	r4, r3
 8010d26:	f7ef fa83 	bl	8000230 <strcmp>
 8010d2a:	b378      	cbz	r0, 8010d8c <parser_1130+0xbc>
 8010d2c:	5d33      	ldrb	r3, [r6, r4]
 8010d2e:	492a      	ldr	r1, [pc, #168]	; (8010dd8 <parser_1130+0x108>)
 8010d30:	3401      	adds	r4, #1
 8010d32:	4628      	mov	r0, r5
 8010d34:	441c      	add	r4, r3
 8010d36:	f7ef fa7b 	bl	8000230 <strcmp>
 8010d3a:	b338      	cbz	r0, 8010d8c <parser_1130+0xbc>
 8010d3c:	5d33      	ldrb	r3, [r6, r4]
 8010d3e:	4927      	ldr	r1, [pc, #156]	; (8010ddc <parser_1130+0x10c>)
 8010d40:	3401      	adds	r4, #1
 8010d42:	4628      	mov	r0, r5
 8010d44:	441c      	add	r4, r3
 8010d46:	f7ef fa73 	bl	8000230 <strcmp>
 8010d4a:	b1f8      	cbz	r0, 8010d8c <parser_1130+0xbc>
 8010d4c:	5d33      	ldrb	r3, [r6, r4]
 8010d4e:	4924      	ldr	r1, [pc, #144]	; (8010de0 <parser_1130+0x110>)
 8010d50:	3401      	adds	r4, #1
 8010d52:	4628      	mov	r0, r5
 8010d54:	441c      	add	r4, r3
 8010d56:	f7ef fa6b 	bl	8000230 <strcmp>
 8010d5a:	b1b8      	cbz	r0, 8010d8c <parser_1130+0xbc>
 8010d5c:	5d33      	ldrb	r3, [r6, r4]
 8010d5e:	4921      	ldr	r1, [pc, #132]	; (8010de4 <parser_1130+0x114>)
 8010d60:	3401      	adds	r4, #1
 8010d62:	4628      	mov	r0, r5
 8010d64:	441c      	add	r4, r3
 8010d66:	f7ef fa63 	bl	8000230 <strcmp>
 8010d6a:	b178      	cbz	r0, 8010d8c <parser_1130+0xbc>
 8010d6c:	5d33      	ldrb	r3, [r6, r4]
 8010d6e:	491e      	ldr	r1, [pc, #120]	; (8010de8 <parser_1130+0x118>)
 8010d70:	3401      	adds	r4, #1
 8010d72:	4628      	mov	r0, r5
 8010d74:	441c      	add	r4, r3
 8010d76:	f7ef fa5b 	bl	8000230 <strcmp>
 8010d7a:	b138      	cbz	r0, 8010d8c <parser_1130+0xbc>
 8010d7c:	491b      	ldr	r1, [pc, #108]	; (8010dec <parser_1130+0x11c>)
 8010d7e:	4628      	mov	r0, r5
 8010d80:	f7ef fa56 	bl	8000230 <strcmp>
 8010d84:	b1a0      	cbz	r0, 8010db0 <parser_1130+0xe0>
 8010d86:	2000      	movs	r0, #0
 8010d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d8c:	4639      	mov	r1, r7
 8010d8e:	4620      	mov	r0, r4
 8010d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d94:	f7fe bbcc 	b.w	800f530 <copy_content_node_to_out>
 8010d98:	4639      	mov	r1, r7
 8010d9a:	2005      	movs	r0, #5
 8010d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010da0:	f7fe bbc6 	b.w	800f530 <copy_content_node_to_out>
 8010da4:	4639      	mov	r1, r7
 8010da6:	4640      	mov	r0, r8
 8010da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dac:	f7fe bbc0 	b.w	800f530 <copy_content_node_to_out>
 8010db0:	5d30      	ldrb	r0, [r6, r4]
 8010db2:	3401      	adds	r4, #1
 8010db4:	4420      	add	r0, r4
 8010db6:	4639      	mov	r1, r7
 8010db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dbc:	f7fe bbb8 	b.w	800f530 <copy_content_node_to_out>
 8010dc0:	200068ac 	.word	0x200068ac
 8010dc4:	08014a48 	.word	0x08014a48
 8010dc8:	08014a5c 	.word	0x08014a5c
 8010dcc:	08014a6c 	.word	0x08014a6c
 8010dd0:	08014a7c 	.word	0x08014a7c
 8010dd4:	08014a8c 	.word	0x08014a8c
 8010dd8:	08014a98 	.word	0x08014a98
 8010ddc:	08014aa8 	.word	0x08014aa8
 8010de0:	08014abc 	.word	0x08014abc
 8010de4:	08014ad0 	.word	0x08014ad0
 8010de8:	08014ae4 	.word	0x08014ae4
 8010dec:	08014af0 	.word	0x08014af0

08010df0 <pack_10f0_data>:
 8010df0:	b570      	push	{r4, r5, r6, lr}
 8010df2:	4c16      	ldr	r4, [pc, #88]	; (8010e4c <pack_10f0_data+0x5c>)
 8010df4:	4d16      	ldr	r5, [pc, #88]	; (8010e50 <pack_10f0_data+0x60>)
 8010df6:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8010dfa:	f44f 767e 	mov.w	r6, #1016	; 0x3f8
 8010dfe:	f104 0110 	add.w	r1, r4, #16
 8010e02:	4632      	mov	r2, r6
 8010e04:	4668      	mov	r0, sp
 8010e06:	f001 fad5 	bl	80123b4 <memcpy>
 8010e0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010e0e:	f7fe f967 	bl	800f0e0 <pack_data_node>
 8010e12:	4c10      	ldr	r4, [pc, #64]	; (8010e54 <pack_10f0_data+0x64>)
 8010e14:	4632      	mov	r2, r6
 8010e16:	f105 0110 	add.w	r1, r5, #16
 8010e1a:	4668      	mov	r0, sp
 8010e1c:	f001 faca 	bl	80123b4 <memcpy>
 8010e20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010e24:	f7fe f95c 	bl	800f0e0 <pack_data_node>
 8010e28:	4632      	mov	r2, r6
 8010e2a:	f104 0110 	add.w	r1, r4, #16
 8010e2e:	4668      	mov	r0, sp
 8010e30:	f001 fac0 	bl	80123b4 <memcpy>
 8010e34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010e38:	f7fe f952 	bl	800f0e0 <pack_data_node>
 8010e3c:	4b06      	ldr	r3, [pc, #24]	; (8010e58 <pack_10f0_data+0x68>)
 8010e3e:	7818      	ldrb	r0, [r3, #0]
 8010e40:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8010e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e48:	f7fe b922 	b.w	800f090 <pack_data_u8>
 8010e4c:	2000cda0 	.word	0x2000cda0
 8010e50:	2000f604 	.word	0x2000f604
 8010e54:	2000b15c 	.word	0x2000b15c
 8010e58:	20010628 	.word	0x20010628
 8010e5c:	00000000 	.word	0x00000000

08010e60 <parser_10f0>:
 8010e60:	4770      	bx	lr
 8010e62:	bf00      	nop
	...

08010e70 <pack_10f1_data>:
 8010e70:	b510      	push	{r4, lr}
 8010e72:	4c08      	ldr	r4, [pc, #32]	; (8010e94 <pack_10f1_data+0x24>)
 8010e74:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8010e78:	f104 0110 	add.w	r1, r4, #16
 8010e7c:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8010e80:	4668      	mov	r0, sp
 8010e82:	f001 fa97 	bl	80123b4 <memcpy>
 8010e86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010e8a:	f7fe f929 	bl	800f0e0 <pack_data_node>
 8010e8e:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8010e92:	bd10      	pop	{r4, pc}
 8010e94:	20012678 	.word	0x20012678
	...

08010ea0 <parser_10f1>:
 8010ea0:	2000      	movs	r0, #0
 8010ea2:	4770      	bx	lr
	...

08010eb0 <pack_mac_data>:
 8010eb0:	b510      	push	{r4, lr}
 8010eb2:	4c08      	ldr	r4, [pc, #32]	; (8010ed4 <pack_mac_data+0x24>)
 8010eb4:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8010eb8:	f104 0110 	add.w	r1, r4, #16
 8010ebc:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8010ec0:	4668      	mov	r0, sp
 8010ec2:	f001 fa77 	bl	80123b4 <memcpy>
 8010ec6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010eca:	f7fe f909 	bl	800f0e0 <pack_data_node>
 8010ece:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8010ed2:	bd10      	pop	{r4, pc}
 8010ed4:	2000a94c 	.word	0x2000a94c
	...

08010ee0 <parser_mac>:
 8010ee0:	b510      	push	{r4, lr}
 8010ee2:	460c      	mov	r4, r1
 8010ee4:	4906      	ldr	r1, [pc, #24]	; (8010f00 <parser_mac+0x20>)
 8010ee6:	f7ef f9a3 	bl	8000230 <strcmp>
 8010eea:	b108      	cbz	r0, 8010ef0 <parser_mac+0x10>
 8010eec:	2000      	movs	r0, #0
 8010eee:	bd10      	pop	{r4, pc}
 8010ef0:	4622      	mov	r2, r4
 8010ef2:	2108      	movs	r1, #8
 8010ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ef8:	2005      	movs	r0, #5
 8010efa:	f7fe bb01 	b.w	800f500 <copy_content_buf_to_out>
 8010efe:	bf00      	nop
 8010f00:	08014b04 	.word	0x08014b04
	...

08010f10 <pack_1110_data>:
 8010f10:	f7ff bfce 	b.w	8010eb0 <pack_mac_data>
	...

08010f20 <parser_1110>:
 8010f20:	f7ff bfde 	b.w	8010ee0 <parser_mac>
	...

08010f30 <pack_1111_data>:
 8010f30:	f7ff bfbe 	b.w	8010eb0 <pack_mac_data>
	...

08010f40 <parser_1111>:
 8010f40:	f7ff bfce 	b.w	8010ee0 <parser_mac>
	...

08010f50 <pack_1112_data>:
 8010f50:	f7ff bfae 	b.w	8010eb0 <pack_mac_data>
	...

08010f60 <parser_1112>:
 8010f60:	f7ff bfbe 	b.w	8010ee0 <parser_mac>
	...

08010f70 <pack_1113_data>:
 8010f70:	f7ff bf9e 	b.w	8010eb0 <pack_mac_data>
	...

08010f80 <parser_1113>:
 8010f80:	f7ff bfae 	b.w	8010ee0 <parser_mac>
	...

08010f90 <pack_custom_param_data>:
 8010f90:	b530      	push	{r4, r5, lr}
 8010f92:	4c0e      	ldr	r4, [pc, #56]	; (8010fcc <pack_custom_param_data+0x3c>)
 8010f94:	6825      	ldr	r5, [r4, #0]
 8010f96:	2d00      	cmp	r5, #0
 8010f98:	bfb4      	ite	lt
 8010f9a:	f105 00ff 	addlt.w	r0, r5, #255	; 0xff
 8010f9e:	4628      	movge	r0, r5
 8010fa0:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 8010fa4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8010fa8:	f7fe f872 	bl	800f090 <pack_data_u8>
 8010fac:	b2e8      	uxtb	r0, r5
 8010fae:	f7fe f86f 	bl	800f090 <pack_data_u8>
 8010fb2:	4907      	ldr	r1, [pc, #28]	; (8010fd0 <pack_custom_param_data+0x40>)
 8010fb4:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8010fb8:	4668      	mov	r0, sp
 8010fba:	f001 f9fb 	bl	80123b4 <memcpy>
 8010fbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010fc2:	f7fe f88d 	bl	800f0e0 <pack_data_node>
 8010fc6:	f50d 7d7f 	add.w	sp, sp, #1020	; 0x3fc
 8010fca:	bd30      	pop	{r4, r5, pc}
 8010fcc:	20006cb4 	.word	0x20006cb4
 8010fd0:	20006cc4 	.word	0x20006cc4
	...

08010fe0 <pack_1121_data>:
 8010fe0:	b508      	push	{r3, lr}
 8010fe2:	2000      	movs	r0, #0
 8010fe4:	f7fe f854 	bl	800f090 <pack_data_u8>
 8010fe8:	2000      	movs	r0, #0
 8010fea:	f7fe f851 	bl	800f090 <pack_data_u8>
 8010fee:	2000      	movs	r0, #0
 8010ff0:	f7fe f84e 	bl	800f090 <pack_data_u8>
 8010ff4:	2000      	movs	r0, #0
 8010ff6:	f7fe f84b 	bl	800f090 <pack_data_u8>
 8010ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010ffe:	f7ff bfc7 	b.w	8010f90 <pack_custom_param_data>
 8011002:	bf00      	nop
	...

08011010 <parser_1121>:
 8011010:	b538      	push	{r3, r4, r5, lr}
 8011012:	460d      	mov	r5, r1
 8011014:	490f      	ldr	r1, [pc, #60]	; (8011054 <parser_1121+0x44>)
 8011016:	4604      	mov	r4, r0
 8011018:	f7ef f90a 	bl	8000230 <strcmp>
 801101c:	b130      	cbz	r0, 801102c <parser_1121+0x1c>
 801101e:	490e      	ldr	r1, [pc, #56]	; (8011058 <parser_1121+0x48>)
 8011020:	4620      	mov	r0, r4
 8011022:	f7ef f905 	bl	8000230 <strcmp>
 8011026:	b140      	cbz	r0, 801103a <parser_1121+0x2a>
 8011028:	2000      	movs	r0, #0
 801102a:	bd38      	pop	{r3, r4, r5, pc}
 801102c:	462a      	mov	r2, r5
 801102e:	210a      	movs	r1, #10
 8011030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011034:	2005      	movs	r0, #5
 8011036:	f7fe ba63 	b.w	800f500 <copy_content_buf_to_out>
 801103a:	4b08      	ldr	r3, [pc, #32]	; (801105c <parser_1121+0x4c>)
 801103c:	78da      	ldrb	r2, [r3, #3]
 801103e:	7919      	ldrb	r1, [r3, #4]
 8011040:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 8011044:	390a      	subs	r1, #10
 8011046:	462a      	mov	r2, r5
 8011048:	200f      	movs	r0, #15
 801104a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801104e:	f7fe ba57 	b.w	800f500 <copy_content_buf_to_out>
 8011052:	bf00      	nop
 8011054:	08014b08 	.word	0x08014b08
 8011058:	08014b10 	.word	0x08014b10
 801105c:	200068ac 	.word	0x200068ac

08011060 <parser_1140>:
 8011060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011064:	4f1c      	ldr	r7, [pc, #112]	; (80110d8 <parser_1140+0x78>)
 8011066:	460e      	mov	r6, r1
 8011068:	491c      	ldr	r1, [pc, #112]	; (80110dc <parser_1140+0x7c>)
 801106a:	797c      	ldrb	r4, [r7, #5]
 801106c:	4605      	mov	r5, r0
 801106e:	f7ef f8df 	bl	8000230 <strcmp>
 8011072:	b1b8      	cbz	r0, 80110a4 <parser_1140+0x44>
 8011074:	491a      	ldr	r1, [pc, #104]	; (80110e0 <parser_1140+0x80>)
 8011076:	4628      	mov	r0, r5
 8011078:	f104 0806 	add.w	r8, r4, #6
 801107c:	f7ef f8d8 	bl	8000230 <strcmp>
 8011080:	b1f0      	cbz	r0, 80110c0 <parser_1140+0x60>
 8011082:	f817 3008 	ldrb.w	r3, [r7, r8]
 8011086:	4917      	ldr	r1, [pc, #92]	; (80110e4 <parser_1140+0x84>)
 8011088:	3407      	adds	r4, #7
 801108a:	4628      	mov	r0, r5
 801108c:	441c      	add	r4, r3
 801108e:	f7ef f8cf 	bl	8000230 <strcmp>
 8011092:	b1d8      	cbz	r0, 80110cc <parser_1140+0x6c>
 8011094:	4914      	ldr	r1, [pc, #80]	; (80110e8 <parser_1140+0x88>)
 8011096:	4628      	mov	r0, r5
 8011098:	f7ef f8ca 	bl	8000230 <strcmp>
 801109c:	b140      	cbz	r0, 80110b0 <parser_1140+0x50>
 801109e:	2000      	movs	r0, #0
 80110a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110a4:	4631      	mov	r1, r6
 80110a6:	2005      	movs	r0, #5
 80110a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110ac:	f7fe ba40 	b.w	800f530 <copy_content_node_to_out>
 80110b0:	5d38      	ldrb	r0, [r7, r4]
 80110b2:	3401      	adds	r4, #1
 80110b4:	4420      	add	r0, r4
 80110b6:	4631      	mov	r1, r6
 80110b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110bc:	f7fe ba38 	b.w	800f530 <copy_content_node_to_out>
 80110c0:	4631      	mov	r1, r6
 80110c2:	4640      	mov	r0, r8
 80110c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110c8:	f7fe ba32 	b.w	800f530 <copy_content_node_to_out>
 80110cc:	4631      	mov	r1, r6
 80110ce:	4620      	mov	r0, r4
 80110d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110d4:	f7fe ba2c 	b.w	800f530 <copy_content_node_to_out>
 80110d8:	200068ac 	.word	0x200068ac
 80110dc:	08014b1c 	.word	0x08014b1c
 80110e0:	08014884 	.word	0x08014884
 80110e4:	08014b20 	.word	0x08014b20
 80110e8:	08014890 	.word	0x08014890
 80110ec:	00000000 	.word	0x00000000

080110f0 <pack_1141_data>:
 80110f0:	4b01      	ldr	r3, [pc, #4]	; (80110f8 <pack_1141_data+0x8>)
 80110f2:	7818      	ldrb	r0, [r3, #0]
 80110f4:	f7fd bfcc 	b.w	800f090 <pack_data_u8>
 80110f8:	2000a947 	.word	0x2000a947
 80110fc:	00000000 	.word	0x00000000

08011100 <parser_1141>:
 8011100:	2000      	movs	r0, #0
 8011102:	4770      	bx	lr
	...

08011110 <parser_1150>:
 8011110:	2000      	movs	r0, #0
 8011112:	4770      	bx	lr
	...

08011120 <pack_1631_data>:
 8011120:	4b01      	ldr	r3, [pc, #4]	; (8011128 <pack_1631_data+0x8>)
 8011122:	7818      	ldrb	r0, [r3, #0]
 8011124:	f7fd bfb4 	b.w	800f090 <pack_data_u8>
 8011128:	20007cd6 	.word	0x20007cd6
 801112c:	00000000 	.word	0x00000000

08011130 <parser_1631>:
 8011130:	f7ff bad6 	b.w	80106e0 <parser_1630>
	...

08011140 <pack_1632_data>:
 8011140:	b510      	push	{r4, lr}
 8011142:	4b0a      	ldr	r3, [pc, #40]	; (801116c <pack_1632_data+0x2c>)
 8011144:	4c0a      	ldr	r4, [pc, #40]	; (8011170 <pack_1632_data+0x30>)
 8011146:	7818      	ldrb	r0, [r3, #0]
 8011148:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 801114c:	f7fd ffa0 	bl	800f090 <pack_data_u8>
 8011150:	f104 0110 	add.w	r1, r4, #16
 8011154:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8011158:	4668      	mov	r0, sp
 801115a:	f001 f92b 	bl	80123b4 <memcpy>
 801115e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011162:	f7fd ffbd 	bl	800f0e0 <pack_data_node>
 8011166:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 801116a:	bd10      	pop	{r4, pc}
 801116c:	200080e0 	.word	0x200080e0
 8011170:	20007cd8 	.word	0x20007cd8
	...

08011180 <parser_1632>:
 8011180:	f7ff baae 	b.w	80106e0 <parser_1630>
	...

08011190 <parser_1680>:
 8011190:	2000      	movs	r0, #0
 8011192:	4770      	bx	lr
	...

080111a0 <pack_1690_data>:
 80111a0:	b510      	push	{r4, lr}
 80111a2:	4b0f      	ldr	r3, [pc, #60]	; (80111e0 <pack_1690_data+0x40>)
 80111a4:	4c0f      	ldr	r4, [pc, #60]	; (80111e4 <pack_1690_data+0x44>)
 80111a6:	7818      	ldrb	r0, [r3, #0]
 80111a8:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80111ac:	f7fd ff70 	bl	800f090 <pack_data_u8>
 80111b0:	4b0d      	ldr	r3, [pc, #52]	; (80111e8 <pack_1690_data+0x48>)
 80111b2:	7818      	ldrb	r0, [r3, #0]
 80111b4:	f7fd ff6c 	bl	800f090 <pack_data_u8>
 80111b8:	f104 0110 	add.w	r1, r4, #16
 80111bc:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80111c0:	4668      	mov	r0, sp
 80111c2:	f001 f8f7 	bl	80123b4 <memcpy>
 80111c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80111ca:	f7fd ff89 	bl	800f0e0 <pack_data_node>
 80111ce:	4b07      	ldr	r3, [pc, #28]	; (80111ec <pack_1690_data+0x4c>)
 80111d0:	7818      	ldrb	r0, [r3, #0]
 80111d2:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 80111d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111da:	f7fd bf59 	b.w	800f090 <pack_data_u8>
 80111de:	bf00      	nop
 80111e0:	200078cc 	.word	0x200078cc
 80111e4:	200070bc 	.word	0x200070bc
 80111e8:	200078cd 	.word	0x200078cd
 80111ec:	200078ce 	.word	0x200078ce

080111f0 <parser_1690>:
 80111f0:	2000      	movs	r0, #0
 80111f2:	4770      	bx	lr
	...

08011200 <pack_1691_data>:
 8011200:	b508      	push	{r3, lr}
 8011202:	4b05      	ldr	r3, [pc, #20]	; (8011218 <pack_1691_data+0x18>)
 8011204:	7818      	ldrb	r0, [r3, #0]
 8011206:	f7fd ff43 	bl	800f090 <pack_data_u8>
 801120a:	4b04      	ldr	r3, [pc, #16]	; (801121c <pack_1691_data+0x1c>)
 801120c:	7818      	ldrb	r0, [r3, #0]
 801120e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011212:	f7fd bf3d 	b.w	800f090 <pack_data_u8>
 8011216:	bf00      	nop
 8011218:	200078cc 	.word	0x200078cc
 801121c:	200078cd 	.word	0x200078cd

08011220 <parser_1691>:
 8011220:	2000      	movs	r0, #0
 8011222:	4770      	bx	lr
	...

08011230 <pack_16a0_data>:
 8011230:	b510      	push	{r4, lr}
 8011232:	4c0a      	ldr	r4, [pc, #40]	; (801125c <pack_16a0_data+0x2c>)
 8011234:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8011238:	f104 0110 	add.w	r1, r4, #16
 801123c:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8011240:	4668      	mov	r0, sp
 8011242:	f001 f8b7 	bl	80123b4 <memcpy>
 8011246:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801124a:	f7fd ff49 	bl	800f0e0 <pack_data_node>
 801124e:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8011252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011256:	f7ff be9b 	b.w	8010f90 <pack_custom_param_data>
 801125a:	bf00      	nop
 801125c:	200074c4 	.word	0x200074c4

08011260 <parser_16a0>:
 8011260:	2000      	movs	r0, #0
 8011262:	4770      	bx	lr
	...

08011270 <pack_16a1_data>:
 8011270:	b570      	push	{r4, r5, r6, lr}
 8011272:	4d0e      	ldr	r5, [pc, #56]	; (80112ac <pack_16a1_data+0x3c>)
 8011274:	4c0e      	ldr	r4, [pc, #56]	; (80112b0 <pack_16a1_data+0x40>)
 8011276:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 801127a:	f44f 767e 	mov.w	r6, #1016	; 0x3f8
 801127e:	f105 0110 	add.w	r1, r5, #16
 8011282:	4632      	mov	r2, r6
 8011284:	4668      	mov	r0, sp
 8011286:	f001 f895 	bl	80123b4 <memcpy>
 801128a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801128e:	f7fd ff27 	bl	800f0e0 <pack_data_node>
 8011292:	4632      	mov	r2, r6
 8011294:	f104 0110 	add.w	r1, r4, #16
 8011298:	4668      	mov	r0, sp
 801129a:	f001 f88b 	bl	80123b4 <memcpy>
 801129e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80112a2:	f7fd ff1d 	bl	800f0e0 <pack_data_node>
 80112a6:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 80112aa:	bd70      	pop	{r4, r5, r6, pc}
 80112ac:	200074c4 	.word	0x200074c4
 80112b0:	200070bc 	.word	0x200070bc
	...

080112c0 <parser_16a1>:
 80112c0:	b510      	push	{r4, lr}
 80112c2:	460c      	mov	r4, r1
 80112c4:	4908      	ldr	r1, [pc, #32]	; (80112e8 <parser_16a1+0x28>)
 80112c6:	f7ee ffb3 	bl	8000230 <strcmp>
 80112ca:	b108      	cbz	r0, 80112d0 <parser_16a1+0x10>
 80112cc:	2000      	movs	r0, #0
 80112ce:	bd10      	pop	{r4, pc}
 80112d0:	4b06      	ldr	r3, [pc, #24]	; (80112ec <parser_16a1+0x2c>)
 80112d2:	78d9      	ldrb	r1, [r3, #3]
 80112d4:	791b      	ldrb	r3, [r3, #4]
 80112d6:	4622      	mov	r2, r4
 80112d8:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80112dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112e0:	2005      	movs	r0, #5
 80112e2:	f7fe b90d 	b.w	800f500 <copy_content_buf_to_out>
 80112e6:	bf00      	nop
 80112e8:	08014b28 	.word	0x08014b28
 80112ec:	200068ac 	.word	0x200068ac

080112f0 <pack_16c0_data>:
 80112f0:	b570      	push	{r4, r5, r6, lr}
 80112f2:	4b10      	ldr	r3, [pc, #64]	; (8011334 <pack_16c0_data+0x44>)
 80112f4:	4d10      	ldr	r5, [pc, #64]	; (8011338 <pack_16c0_data+0x48>)
 80112f6:	7818      	ldrb	r0, [r3, #0]
 80112f8:	4c10      	ldr	r4, [pc, #64]	; (801133c <pack_16c0_data+0x4c>)
 80112fa:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80112fe:	f44f 767e 	mov.w	r6, #1016	; 0x3f8
 8011302:	f7fd fec5 	bl	800f090 <pack_data_u8>
 8011306:	f105 0110 	add.w	r1, r5, #16
 801130a:	4632      	mov	r2, r6
 801130c:	4668      	mov	r0, sp
 801130e:	f001 f851 	bl	80123b4 <memcpy>
 8011312:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011316:	f7fd fee3 	bl	800f0e0 <pack_data_node>
 801131a:	4632      	mov	r2, r6
 801131c:	f104 0110 	add.w	r1, r4, #16
 8011320:	4668      	mov	r0, sp
 8011322:	f001 f847 	bl	80123b4 <memcpy>
 8011326:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801132a:	f7fd fed9 	bl	800f0e0 <pack_data_node>
 801132e:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8011332:	bd70      	pop	{r4, r5, r6, pc}
 8011334:	20012e8a 	.word	0x20012e8a
 8011338:	20012e8c 	.word	0x20012e8c
 801133c:	20005c90 	.word	0x20005c90

08011340 <parser_16c0>:
 8011340:	b510      	push	{r4, lr}
 8011342:	460c      	mov	r4, r1
 8011344:	4908      	ldr	r1, [pc, #32]	; (8011368 <parser_16c0+0x28>)
 8011346:	f7ee ff73 	bl	8000230 <strcmp>
 801134a:	b108      	cbz	r0, 8011350 <parser_16c0+0x10>
 801134c:	2000      	movs	r0, #0
 801134e:	bd10      	pop	{r4, pc}
 8011350:	4b06      	ldr	r3, [pc, #24]	; (801136c <parser_16c0+0x2c>)
 8011352:	78d9      	ldrb	r1, [r3, #3]
 8011354:	791b      	ldrb	r3, [r3, #4]
 8011356:	4622      	mov	r2, r4
 8011358:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 801135c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011360:	2005      	movs	r0, #5
 8011362:	f7fe b8cd 	b.w	800f500 <copy_content_buf_to_out>
 8011366:	bf00      	nop
 8011368:	08014b38 	.word	0x08014b38
 801136c:	200068ac 	.word	0x200068ac

08011370 <pack_16d0_data>:
 8011370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011374:	4d33      	ldr	r5, [pc, #204]	; (8011444 <pack_16d0_data+0xd4>)
 8011376:	4c34      	ldr	r4, [pc, #208]	; (8011448 <pack_16d0_data+0xd8>)
 8011378:	682e      	ldr	r6, [r5, #0]
 801137a:	6823      	ldr	r3, [r4, #0]
 801137c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801145c <pack_16d0_data+0xec>
 8011380:	4f32      	ldr	r7, [pc, #200]	; (801144c <pack_16d0_data+0xdc>)
 8011382:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8011386:	2000      	movs	r0, #0
 8011388:	441e      	add	r6, r3
 801138a:	f7fd fe81 	bl	800f090 <pack_data_u8>
 801138e:	2000      	movs	r0, #0
 8011390:	f7fd fe7e 	bl	800f090 <pack_data_u8>
 8011394:	4b2e      	ldr	r3, [pc, #184]	; (8011450 <pack_16d0_data+0xe0>)
 8011396:	7818      	ldrb	r0, [r3, #0]
 8011398:	f7fd fe7a 	bl	800f090 <pack_data_u8>
 801139c:	f108 0110 	add.w	r1, r8, #16
 80113a0:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80113a4:	4668      	mov	r0, sp
 80113a6:	f001 f805 	bl	80123b4 <memcpy>
 80113aa:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80113ae:	f7fd fe97 	bl	800f0e0 <pack_data_node>
 80113b2:	f107 0110 	add.w	r1, r7, #16
 80113b6:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80113ba:	4668      	mov	r0, sp
 80113bc:	f000 fffa 	bl	80123b4 <memcpy>
 80113c0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80113c4:	f7fd fe8c 	bl	800f0e0 <pack_data_node>
 80113c8:	2e00      	cmp	r6, #0
 80113ca:	bfb4      	ite	lt
 80113cc:	f106 00ff 	addlt.w	r0, r6, #255	; 0xff
 80113d0:	4630      	movge	r0, r6
 80113d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80113d6:	f7fd fe5b 	bl	800f090 <pack_data_u8>
 80113da:	b2f0      	uxtb	r0, r6
 80113dc:	f7fd fe58 	bl	800f090 <pack_data_u8>
 80113e0:	682e      	ldr	r6, [r5, #0]
 80113e2:	2e00      	cmp	r6, #0
 80113e4:	4630      	mov	r0, r6
 80113e6:	bfb8      	it	lt
 80113e8:	f106 00ff 	addlt.w	r0, r6, #255	; 0xff
 80113ec:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80113f0:	f7fd fe4e 	bl	800f090 <pack_data_u8>
 80113f4:	b2f0      	uxtb	r0, r6
 80113f6:	f7fd fe4b 	bl	800f090 <pack_data_u8>
 80113fa:	4916      	ldr	r1, [pc, #88]	; (8011454 <pack_16d0_data+0xe4>)
 80113fc:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8011400:	4668      	mov	r0, sp
 8011402:	f000 ffd7 	bl	80123b4 <memcpy>
 8011406:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801140a:	f7fd fe69 	bl	800f0e0 <pack_data_node>
 801140e:	6825      	ldr	r5, [r4, #0]
 8011410:	2d00      	cmp	r5, #0
 8011412:	4628      	mov	r0, r5
 8011414:	bfb8      	it	lt
 8011416:	f105 00ff 	addlt.w	r0, r5, #255	; 0xff
 801141a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801141e:	f7fd fe37 	bl	800f090 <pack_data_u8>
 8011422:	b2e8      	uxtb	r0, r5
 8011424:	f7fd fe34 	bl	800f090 <pack_data_u8>
 8011428:	490b      	ldr	r1, [pc, #44]	; (8011458 <pack_16d0_data+0xe8>)
 801142a:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 801142e:	4668      	mov	r0, sp
 8011430:	f000 ffc0 	bl	80123b4 <memcpy>
 8011434:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011438:	f7fd fe52 	bl	800f0e0 <pack_data_node>
 801143c:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8011440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011444:	2000ede8 	.word	0x2000ede8
 8011448:	2000e9e0 	.word	0x2000e9e0
 801144c:	2000ddc4 	.word	0x2000ddc4
 8011450:	2000e9de 	.word	0x2000e9de
 8011454:	2000edf8 	.word	0x2000edf8
 8011458:	2000e9f0 	.word	0x2000e9f0
 801145c:	2000d9bc 	.word	0x2000d9bc

08011460 <parser_16d0>:
 8011460:	2000      	movs	r0, #0
 8011462:	4770      	bx	lr
	...

08011470 <parser_16e0>:
 8011470:	f7ff bf66 	b.w	8011340 <parser_16c0>
	...

08011480 <pack_16e1_data>:
 8011480:	b570      	push	{r4, r5, r6, lr}
 8011482:	4d0e      	ldr	r5, [pc, #56]	; (80114bc <pack_16e1_data+0x3c>)
 8011484:	4c0e      	ldr	r4, [pc, #56]	; (80114c0 <pack_16e1_data+0x40>)
 8011486:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 801148a:	f44f 767e 	mov.w	r6, #1016	; 0x3f8
 801148e:	f105 0110 	add.w	r1, r5, #16
 8011492:	4632      	mov	r2, r6
 8011494:	4668      	mov	r0, sp
 8011496:	f000 ff8d 	bl	80123b4 <memcpy>
 801149a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801149e:	f7fd fe1f 	bl	800f0e0 <pack_data_node>
 80114a2:	4632      	mov	r2, r6
 80114a4:	f104 0110 	add.w	r1, r4, #16
 80114a8:	4668      	mov	r0, sp
 80114aa:	f000 ff83 	bl	80123b4 <memcpy>
 80114ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80114b2:	f7fd fe15 	bl	800f0e0 <pack_data_node>
 80114b6:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 80114ba:	bd70      	pop	{r4, r5, r6, pc}
 80114bc:	20004868 	.word	0x20004868
 80114c0:	20004c70 	.word	0x20004c70
	...

080114d0 <parser_16e1>:
 80114d0:	2000      	movs	r0, #0
 80114d2:	4770      	bx	lr
	...

080114e0 <pack_16e2_data>:
 80114e0:	b570      	push	{r4, r5, r6, lr}
 80114e2:	4d11      	ldr	r5, [pc, #68]	; (8011528 <pack_16e2_data+0x48>)
 80114e4:	4c11      	ldr	r4, [pc, #68]	; (801152c <pack_16e2_data+0x4c>)
 80114e6:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80114ea:	f44f 767e 	mov.w	r6, #1016	; 0x3f8
 80114ee:	f105 0110 	add.w	r1, r5, #16
 80114f2:	4632      	mov	r2, r6
 80114f4:	4668      	mov	r0, sp
 80114f6:	f000 ff5d 	bl	80123b4 <memcpy>
 80114fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80114fe:	f7fd fdef 	bl	800f0e0 <pack_data_node>
 8011502:	4632      	mov	r2, r6
 8011504:	f104 0110 	add.w	r1, r4, #16
 8011508:	4668      	mov	r0, sp
 801150a:	f000 ff53 	bl	80123b4 <memcpy>
 801150e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011512:	f7fd fde5 	bl	800f0e0 <pack_data_node>
 8011516:	4b06      	ldr	r3, [pc, #24]	; (8011530 <pack_16e2_data+0x50>)
 8011518:	7818      	ldrb	r0, [r3, #0]
 801151a:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 801151e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011522:	f7fd bdb5 	b.w	800f090 <pack_data_u8>
 8011526:	bf00      	nop
 8011528:	20004868 	.word	0x20004868
 801152c:	20004c70 	.word	0x20004c70
 8011530:	20010628 	.word	0x20010628
	...

08011540 <parser_16e2>:
 8011540:	2000      	movs	r0, #0
 8011542:	4770      	bx	lr
	...

08011550 <pack_1740_data>:
 8011550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011552:	2000      	movs	r0, #0
 8011554:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 8011558:	f7fd fd9a 	bl	800f090 <pack_data_u8>
 801155c:	2000      	movs	r0, #0
 801155e:	f7fd fd97 	bl	800f090 <pack_data_u8>
 8011562:	4b1e      	ldr	r3, [pc, #120]	; (80115dc <pack_1740_data+0x8c>)
 8011564:	4d1e      	ldr	r5, [pc, #120]	; (80115e0 <pack_1740_data+0x90>)
 8011566:	7818      	ldrb	r0, [r3, #0]
 8011568:	4c1e      	ldr	r4, [pc, #120]	; (80115e4 <pack_1740_data+0x94>)
 801156a:	f7fd fd91 	bl	800f090 <pack_data_u8>
 801156e:	f44f 767e 	mov.w	r6, #1016	; 0x3f8
 8011572:	2002      	movs	r0, #2
 8011574:	f7fd fd8c 	bl	800f090 <pack_data_u8>
 8011578:	4627      	mov	r7, r4
 801157a:	f105 0110 	add.w	r1, r5, #16
 801157e:	4632      	mov	r2, r6
 8011580:	4668      	mov	r0, sp
 8011582:	f000 ff17 	bl	80123b4 <memcpy>
 8011586:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801158a:	f7fd fda9 	bl	800f0e0 <pack_data_node>
 801158e:	f857 0b10 	ldr.w	r0, [r7], #16
 8011592:	4d15      	ldr	r5, [pc, #84]	; (80115e8 <pack_1740_data+0x98>)
 8011594:	f7fd fd7c 	bl	800f090 <pack_data_u8>
 8011598:	4632      	mov	r2, r6
 801159a:	4639      	mov	r1, r7
 801159c:	4668      	mov	r0, sp
 801159e:	f000 ff09 	bl	80123b4 <memcpy>
 80115a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80115a6:	f7fd fd9b 	bl	800f0e0 <pack_data_node>
 80115aa:	4c10      	ldr	r4, [pc, #64]	; (80115ec <pack_1740_data+0x9c>)
 80115ac:	4632      	mov	r2, r6
 80115ae:	f105 0110 	add.w	r1, r5, #16
 80115b2:	4668      	mov	r0, sp
 80115b4:	f000 fefe 	bl	80123b4 <memcpy>
 80115b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80115bc:	f7fd fd90 	bl	800f0e0 <pack_data_node>
 80115c0:	4632      	mov	r2, r6
 80115c2:	f104 0110 	add.w	r1, r4, #16
 80115c6:	4668      	mov	r0, sp
 80115c8:	f000 fef4 	bl	80123b4 <memcpy>
 80115cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80115d0:	f7fd fd86 	bl	800f0e0 <pack_data_node>
 80115d4:	f50d 7d7f 	add.w	sp, sp, #1020	; 0x3fc
 80115d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115da:	bf00      	nop
 80115dc:	20006098 	.word	0x20006098
 80115e0:	20003030 	.word	0x20003030
 80115e4:	20002c28 	.word	0x20002c28
 80115e8:	20002010 	.word	0x20002010
 80115ec:	20002820 	.word	0x20002820

080115f0 <parser_1740>:
 80115f0:	2000      	movs	r0, #0
 80115f2:	4770      	bx	lr
	...

08011600 <pack_1750_data>:
 8011600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011602:	2000      	movs	r0, #0
 8011604:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 8011608:	f7fd fd42 	bl	800f090 <pack_data_u8>
 801160c:	2000      	movs	r0, #0
 801160e:	f7fd fd3f 	bl	800f090 <pack_data_u8>
 8011612:	4b25      	ldr	r3, [pc, #148]	; (80116a8 <pack_1750_data+0xa8>)
 8011614:	4c25      	ldr	r4, [pc, #148]	; (80116ac <pack_1750_data+0xac>)
 8011616:	7818      	ldrb	r0, [r3, #0]
 8011618:	4e25      	ldr	r6, [pc, #148]	; (80116b0 <pack_1750_data+0xb0>)
 801161a:	f7fd fd39 	bl	800f090 <pack_data_u8>
 801161e:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
 8011622:	2002      	movs	r0, #2
 8011624:	f7fd fd34 	bl	800f090 <pack_data_u8>
 8011628:	4637      	mov	r7, r6
 801162a:	f104 0110 	add.w	r1, r4, #16
 801162e:	462a      	mov	r2, r5
 8011630:	4668      	mov	r0, sp
 8011632:	f000 febf 	bl	80123b4 <memcpy>
 8011636:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801163a:	f7fd fd51 	bl	800f0e0 <pack_data_node>
 801163e:	f857 0b10 	ldr.w	r0, [r7], #16
 8011642:	4c1c      	ldr	r4, [pc, #112]	; (80116b4 <pack_1750_data+0xb4>)
 8011644:	f7fd fd24 	bl	800f090 <pack_data_u8>
 8011648:	462a      	mov	r2, r5
 801164a:	4639      	mov	r1, r7
 801164c:	4668      	mov	r0, sp
 801164e:	f000 feb1 	bl	80123b4 <memcpy>
 8011652:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8011656:	f7fd fd43 	bl	800f0e0 <pack_data_node>
 801165a:	4b17      	ldr	r3, [pc, #92]	; (80116b8 <pack_1750_data+0xb8>)
 801165c:	4e17      	ldr	r6, [pc, #92]	; (80116bc <pack_1750_data+0xbc>)
 801165e:	7818      	ldrb	r0, [r3, #0]
 8011660:	f7fd fd16 	bl	800f090 <pack_data_u8>
 8011664:	462a      	mov	r2, r5
 8011666:	f104 0110 	add.w	r1, r4, #16
 801166a:	4668      	mov	r0, sp
 801166c:	f000 fea2 	bl	80123b4 <memcpy>
 8011670:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011674:	f7fd fd34 	bl	800f0e0 <pack_data_node>
 8011678:	4c11      	ldr	r4, [pc, #68]	; (80116c0 <pack_1750_data+0xc0>)
 801167a:	462a      	mov	r2, r5
 801167c:	f106 0110 	add.w	r1, r6, #16
 8011680:	4668      	mov	r0, sp
 8011682:	f000 fe97 	bl	80123b4 <memcpy>
 8011686:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801168a:	f7fd fd29 	bl	800f0e0 <pack_data_node>
 801168e:	462a      	mov	r2, r5
 8011690:	f104 0110 	add.w	r1, r4, #16
 8011694:	4668      	mov	r0, sp
 8011696:	f000 fe8d 	bl	80123b4 <memcpy>
 801169a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801169e:	f7fd fd1f 	bl	800f0e0 <pack_data_node>
 80116a2:	f50d 7d7f 	add.w	sp, sp, #1020	; 0x3fc
 80116a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116a8:	20006098 	.word	0x20006098
 80116ac:	20003030 	.word	0x20003030
 80116b0:	20002c28 	.word	0x20002c28
 80116b4:	20002010 	.word	0x20002010
 80116b8:	20006099 	.word	0x20006099
 80116bc:	20002820 	.word	0x20002820
 80116c0:	20002418 	.word	0x20002418
	...

080116d0 <parser_1750>:
 80116d0:	2000      	movs	r0, #0
 80116d2:	4770      	bx	lr
	...

080116e0 <parser_1760>:
 80116e0:	2000      	movs	r0, #0
 80116e2:	4770      	bx	lr
	...

080116f0 <pack_1761_data>:
 80116f0:	b570      	push	{r4, r5, r6, lr}
 80116f2:	2000      	movs	r0, #0
 80116f4:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80116f8:	4d0f      	ldr	r5, [pc, #60]	; (8011738 <pack_1761_data+0x48>)
 80116fa:	4c10      	ldr	r4, [pc, #64]	; (801173c <pack_1761_data+0x4c>)
 80116fc:	f7fd fcc8 	bl	800f090 <pack_data_u8>
 8011700:	f44f 767e 	mov.w	r6, #1016	; 0x3f8
 8011704:	2000      	movs	r0, #0
 8011706:	f7fd fcc3 	bl	800f090 <pack_data_u8>
 801170a:	f105 0110 	add.w	r1, r5, #16
 801170e:	4632      	mov	r2, r6
 8011710:	4668      	mov	r0, sp
 8011712:	f000 fe4f 	bl	80123b4 <memcpy>
 8011716:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801171a:	f7fd fce1 	bl	800f0e0 <pack_data_node>
 801171e:	4632      	mov	r2, r6
 8011720:	f104 0110 	add.w	r1, r4, #16
 8011724:	4668      	mov	r0, sp
 8011726:	f000 fe45 	bl	80123b4 <memcpy>
 801172a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801172e:	f7fd fcd7 	bl	800f0e0 <pack_data_node>
 8011732:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8011736:	bd70      	pop	{r4, r5, r6, pc}
 8011738:	20009514 	.word	0x20009514
 801173c:	2000fa0c 	.word	0x2000fa0c

08011740 <parser_1761>:
 8011740:	2000      	movs	r0, #0
 8011742:	4770      	bx	lr
	...

08011750 <pack_1762_data>:
 8011750:	b570      	push	{r4, r5, r6, lr}
 8011752:	2000      	movs	r0, #0
 8011754:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8011758:	4c15      	ldr	r4, [pc, #84]	; (80117b0 <pack_1762_data+0x60>)
 801175a:	4d16      	ldr	r5, [pc, #88]	; (80117b4 <pack_1762_data+0x64>)
 801175c:	f7fd fc98 	bl	800f090 <pack_data_u8>
 8011760:	f44f 767e 	mov.w	r6, #1016	; 0x3f8
 8011764:	2000      	movs	r0, #0
 8011766:	f7fd fc93 	bl	800f090 <pack_data_u8>
 801176a:	f104 0110 	add.w	r1, r4, #16
 801176e:	4632      	mov	r2, r6
 8011770:	4668      	mov	r0, sp
 8011772:	f000 fe1f 	bl	80123b4 <memcpy>
 8011776:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801177a:	f7fd fcb1 	bl	800f0e0 <pack_data_node>
 801177e:	4c0e      	ldr	r4, [pc, #56]	; (80117b8 <pack_1762_data+0x68>)
 8011780:	4632      	mov	r2, r6
 8011782:	f105 0110 	add.w	r1, r5, #16
 8011786:	4668      	mov	r0, sp
 8011788:	f000 fe14 	bl	80123b4 <memcpy>
 801178c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011790:	f7fd fca6 	bl	800f0e0 <pack_data_node>
 8011794:	4632      	mov	r2, r6
 8011796:	f104 0110 	add.w	r1, r4, #16
 801179a:	4668      	mov	r0, sp
 801179c:	f000 fe0a 	bl	80123b4 <memcpy>
 80117a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80117a4:	f7fd fc9c 	bl	800f0e0 <pack_data_node>
 80117a8:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 80117ac:	bd70      	pop	{r4, r5, r6, pc}
 80117ae:	bf00      	nop
 80117b0:	2001062c 	.word	0x2001062c
 80117b4:	2000ad54 	.word	0x2000ad54
 80117b8:	2000e5d4 	.word	0x2000e5d4
 80117bc:	00000000 	.word	0x00000000

080117c0 <parser_1762>:
 80117c0:	2000      	movs	r0, #0
 80117c2:	4770      	bx	lr
	...

080117d0 <pack_1763_data>:
 80117d0:	b510      	push	{r4, lr}
 80117d2:	2000      	movs	r0, #0
 80117d4:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80117d8:	4c0c      	ldr	r4, [pc, #48]	; (801180c <pack_1763_data+0x3c>)
 80117da:	f7fd fc59 	bl	800f090 <pack_data_u8>
 80117de:	2000      	movs	r0, #0
 80117e0:	f7fd fc56 	bl	800f090 <pack_data_u8>
 80117e4:	f104 0110 	add.w	r1, r4, #16
 80117e8:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80117ec:	4668      	mov	r0, sp
 80117ee:	f000 fde1 	bl	80123b4 <memcpy>
 80117f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80117f6:	f7fd fc73 	bl	800f0e0 <pack_data_node>
 80117fa:	4b05      	ldr	r3, [pc, #20]	; (8011810 <pack_1763_data+0x40>)
 80117fc:	7818      	ldrb	r0, [r3, #0]
 80117fe:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8011802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011806:	f7fd bc43 	b.w	800f090 <pack_data_u8>
 801180a:	bf00      	nop
 801180c:	20003030 	.word	0x20003030
 8011810:	20006098 	.word	0x20006098
	...

08011820 <parser_1763>:
 8011820:	2000      	movs	r0, #0
 8011822:	4770      	bx	lr
	...

08011830 <pack_1764_data>:
 8011830:	f7ff bfce 	b.w	80117d0 <pack_1763_data>
	...

08011840 <parser_1764>:
 8011840:	2000      	movs	r0, #0
 8011842:	4770      	bx	lr
	...

08011850 <pack_1780_data>:
 8011850:	b570      	push	{r4, r5, r6, lr}
 8011852:	4c67      	ldr	r4, [pc, #412]	; (80119f0 <pack_1780_data+0x1a0>)
 8011854:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8011858:	7820      	ldrb	r0, [r4, #0]
 801185a:	f7fd fc19 	bl	800f090 <pack_data_u8>
 801185e:	7823      	ldrb	r3, [r4, #0]
 8011860:	2b02      	cmp	r3, #2
 8011862:	d017      	beq.n	8011894 <pack_1780_data+0x44>
 8011864:	2b03      	cmp	r3, #3
 8011866:	d038      	beq.n	80118da <pack_1780_data+0x8a>
 8011868:	2b04      	cmp	r3, #4
 801186a:	d03d      	beq.n	80118e8 <pack_1780_data+0x98>
 801186c:	2b05      	cmp	r3, #5
 801186e:	d04e      	beq.n	801190e <pack_1780_data+0xbe>
 8011870:	2b07      	cmp	r3, #7
 8011872:	d063      	beq.n	801193c <pack_1780_data+0xec>
 8011874:	2b08      	cmp	r3, #8
 8011876:	d068      	beq.n	801194a <pack_1780_data+0xfa>
 8011878:	2b0b      	cmp	r3, #11
 801187a:	d071      	beq.n	8011960 <pack_1780_data+0x110>
 801187c:	2b0c      	cmp	r3, #12
 801187e:	f000 8083 	beq.w	8011988 <pack_1780_data+0x138>
 8011882:	2b0d      	cmp	r3, #13
 8011884:	f000 8094 	beq.w	80119b0 <pack_1780_data+0x160>
 8011888:	2b0f      	cmp	r3, #15
 801188a:	f000 80a1 	beq.w	80119d0 <pack_1780_data+0x180>
 801188e:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8011892:	bd70      	pop	{r4, r5, r6, pc}
 8011894:	4b57      	ldr	r3, [pc, #348]	; (80119f4 <pack_1780_data+0x1a4>)
 8011896:	4e58      	ldr	r6, [pc, #352]	; (80119f8 <pack_1780_data+0x1a8>)
 8011898:	7818      	ldrb	r0, [r3, #0]
 801189a:	4d58      	ldr	r5, [pc, #352]	; (80119fc <pack_1780_data+0x1ac>)
 801189c:	f7fd fbf8 	bl	800f090 <pack_data_u8>
 80118a0:	4b57      	ldr	r3, [pc, #348]	; (8011a00 <pack_1780_data+0x1b0>)
 80118a2:	7818      	ldrb	r0, [r3, #0]
 80118a4:	f7fd fbf4 	bl	800f090 <pack_data_u8>
 80118a8:	f106 0110 	add.w	r1, r6, #16
 80118ac:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80118b0:	4668      	mov	r0, sp
 80118b2:	f000 fd7f 	bl	80123b4 <memcpy>
 80118b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80118ba:	f7fd fc11 	bl	800f0e0 <pack_data_node>
 80118be:	f105 0110 	add.w	r1, r5, #16
 80118c2:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80118c6:	4668      	mov	r0, sp
 80118c8:	f000 fd74 	bl	80123b4 <memcpy>
 80118cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80118d0:	f7fd fc06 	bl	800f0e0 <pack_data_node>
 80118d4:	7823      	ldrb	r3, [r4, #0]
 80118d6:	2b03      	cmp	r3, #3
 80118d8:	d1c6      	bne.n	8011868 <pack_1780_data+0x18>
 80118da:	4b49      	ldr	r3, [pc, #292]	; (8011a00 <pack_1780_data+0x1b0>)
 80118dc:	7818      	ldrb	r0, [r3, #0]
 80118de:	f7fd fbd7 	bl	800f090 <pack_data_u8>
 80118e2:	7823      	ldrb	r3, [r4, #0]
 80118e4:	2b04      	cmp	r3, #4
 80118e6:	d1c1      	bne.n	801186c <pack_1780_data+0x1c>
 80118e8:	4b45      	ldr	r3, [pc, #276]	; (8011a00 <pack_1780_data+0x1b0>)
 80118ea:	4d46      	ldr	r5, [pc, #280]	; (8011a04 <pack_1780_data+0x1b4>)
 80118ec:	7818      	ldrb	r0, [r3, #0]
 80118ee:	f7fd fbcf 	bl	800f090 <pack_data_u8>
 80118f2:	f105 0110 	add.w	r1, r5, #16
 80118f6:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80118fa:	4668      	mov	r0, sp
 80118fc:	f000 fd5a 	bl	80123b4 <memcpy>
 8011900:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011904:	f7fd fbec 	bl	800f0e0 <pack_data_node>
 8011908:	7823      	ldrb	r3, [r4, #0]
 801190a:	2b05      	cmp	r3, #5
 801190c:	d1b0      	bne.n	8011870 <pack_1780_data+0x20>
 801190e:	4b3e      	ldr	r3, [pc, #248]	; (8011a08 <pack_1780_data+0x1b8>)
 8011910:	4d3c      	ldr	r5, [pc, #240]	; (8011a04 <pack_1780_data+0x1b4>)
 8011912:	7818      	ldrb	r0, [r3, #0]
 8011914:	f7fd fbbc 	bl	800f090 <pack_data_u8>
 8011918:	4b39      	ldr	r3, [pc, #228]	; (8011a00 <pack_1780_data+0x1b0>)
 801191a:	7818      	ldrb	r0, [r3, #0]
 801191c:	f7fd fbb8 	bl	800f090 <pack_data_u8>
 8011920:	f105 0110 	add.w	r1, r5, #16
 8011924:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8011928:	4668      	mov	r0, sp
 801192a:	f000 fd43 	bl	80123b4 <memcpy>
 801192e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011932:	f7fd fbd5 	bl	800f0e0 <pack_data_node>
 8011936:	7823      	ldrb	r3, [r4, #0]
 8011938:	2b07      	cmp	r3, #7
 801193a:	d19b      	bne.n	8011874 <pack_1780_data+0x24>
 801193c:	4b30      	ldr	r3, [pc, #192]	; (8011a00 <pack_1780_data+0x1b0>)
 801193e:	7818      	ldrb	r0, [r3, #0]
 8011940:	f7fd fba6 	bl	800f090 <pack_data_u8>
 8011944:	7823      	ldrb	r3, [r4, #0]
 8011946:	2b08      	cmp	r3, #8
 8011948:	d196      	bne.n	8011878 <pack_1780_data+0x28>
 801194a:	4b30      	ldr	r3, [pc, #192]	; (8011a0c <pack_1780_data+0x1bc>)
 801194c:	7818      	ldrb	r0, [r3, #0]
 801194e:	f7fd fb9f 	bl	800f090 <pack_data_u8>
 8011952:	4b2f      	ldr	r3, [pc, #188]	; (8011a10 <pack_1780_data+0x1c0>)
 8011954:	7818      	ldrb	r0, [r3, #0]
 8011956:	f7fd fb9b 	bl	800f090 <pack_data_u8>
 801195a:	7823      	ldrb	r3, [r4, #0]
 801195c:	2b0b      	cmp	r3, #11
 801195e:	d18d      	bne.n	801187c <pack_1780_data+0x2c>
 8011960:	4b27      	ldr	r3, [pc, #156]	; (8011a00 <pack_1780_data+0x1b0>)
 8011962:	4d28      	ldr	r5, [pc, #160]	; (8011a04 <pack_1780_data+0x1b4>)
 8011964:	7818      	ldrb	r0, [r3, #0]
 8011966:	f7fd fb93 	bl	800f090 <pack_data_u8>
 801196a:	f105 0110 	add.w	r1, r5, #16
 801196e:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8011972:	4668      	mov	r0, sp
 8011974:	f000 fd1e 	bl	80123b4 <memcpy>
 8011978:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801197c:	f7fd fbb0 	bl	800f0e0 <pack_data_node>
 8011980:	7823      	ldrb	r3, [r4, #0]
 8011982:	2b0c      	cmp	r3, #12
 8011984:	f47f af7d 	bne.w	8011882 <pack_1780_data+0x32>
 8011988:	4b1d      	ldr	r3, [pc, #116]	; (8011a00 <pack_1780_data+0x1b0>)
 801198a:	4d1e      	ldr	r5, [pc, #120]	; (8011a04 <pack_1780_data+0x1b4>)
 801198c:	7818      	ldrb	r0, [r3, #0]
 801198e:	f7fd fb7f 	bl	800f090 <pack_data_u8>
 8011992:	f105 0110 	add.w	r1, r5, #16
 8011996:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 801199a:	4668      	mov	r0, sp
 801199c:	f000 fd0a 	bl	80123b4 <memcpy>
 80119a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80119a4:	f7fd fb9c 	bl	800f0e0 <pack_data_node>
 80119a8:	7823      	ldrb	r3, [r4, #0]
 80119aa:	2b0d      	cmp	r3, #13
 80119ac:	f47f af6c 	bne.w	8011888 <pack_1780_data+0x38>
 80119b0:	4d12      	ldr	r5, [pc, #72]	; (80119fc <pack_1780_data+0x1ac>)
 80119b2:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80119b6:	f105 0110 	add.w	r1, r5, #16
 80119ba:	4668      	mov	r0, sp
 80119bc:	f000 fcfa 	bl	80123b4 <memcpy>
 80119c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80119c4:	f7fd fb8c 	bl	800f0e0 <pack_data_node>
 80119c8:	7823      	ldrb	r3, [r4, #0]
 80119ca:	2b0f      	cmp	r3, #15
 80119cc:	f47f af5f 	bne.w	801188e <pack_1780_data+0x3e>
 80119d0:	4c10      	ldr	r4, [pc, #64]	; (8011a14 <pack_1780_data+0x1c4>)
 80119d2:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80119d6:	f104 0110 	add.w	r1, r4, #16
 80119da:	4668      	mov	r0, sp
 80119dc:	f000 fcea 	bl	80123b4 <memcpy>
 80119e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80119e4:	f7fd fb7c 	bl	800f0e0 <pack_data_node>
 80119e8:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 80119ec:	bd70      	pop	{r4, r5, r6, pc}
 80119ee:	bf00      	nop
 80119f0:	2000bd78 	.word	0x2000bd78
 80119f4:	2000bd7a 	.word	0x2000bd7a
 80119f8:	2000b970 	.word	0x2000b970
 80119fc:	2000bd7c 	.word	0x2000bd7c
 8011a00:	2000b565 	.word	0x2000b565
 8011a04:	2000b568 	.word	0x2000b568
 8011a08:	2000c184 	.word	0x2000c184
 8011a0c:	2000c185 	.word	0x2000c185
 8011a10:	2000bd79 	.word	0x2000bd79
 8011a14:	2000c188 	.word	0x2000c188
	...

08011a20 <parser_1780>:
 8011a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a22:	460e      	mov	r6, r1
 8011a24:	497e      	ldr	r1, [pc, #504]	; (8011c20 <parser_1780+0x200>)
 8011a26:	4604      	mov	r4, r0
 8011a28:	f7ee fc02 	bl	8000230 <strcmp>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d05e      	beq.n	8011aee <parser_1780+0xce>
 8011a30:	497c      	ldr	r1, [pc, #496]	; (8011c24 <parser_1780+0x204>)
 8011a32:	4620      	mov	r0, r4
 8011a34:	f7ee fbfc 	bl	8000230 <strcmp>
 8011a38:	2800      	cmp	r0, #0
 8011a3a:	f000 80b2 	beq.w	8011ba2 <parser_1780+0x182>
 8011a3e:	4f7a      	ldr	r7, [pc, #488]	; (8011c28 <parser_1780+0x208>)
 8011a40:	797d      	ldrb	r5, [r7, #5]
 8011a42:	2d01      	cmp	r5, #1
 8011a44:	d01d      	beq.n	8011a82 <parser_1780+0x62>
 8011a46:	2d03      	cmp	r5, #3
 8011a48:	f000 80a4 	beq.w	8011b94 <parser_1780+0x174>
 8011a4c:	2d04      	cmp	r5, #4
 8011a4e:	d055      	beq.n	8011afc <parser_1780+0xdc>
 8011a50:	2d05      	cmp	r5, #5
 8011a52:	d05b      	beq.n	8011b0c <parser_1780+0xec>
 8011a54:	2d06      	cmp	r5, #6
 8011a56:	d06c      	beq.n	8011b32 <parser_1780+0x112>
 8011a58:	2d07      	cmp	r5, #7
 8011a5a:	d071      	beq.n	8011b40 <parser_1780+0x120>
 8011a5c:	2d08      	cmp	r5, #8
 8011a5e:	f000 8081 	beq.w	8011b64 <parser_1780+0x144>
 8011a62:	2d09      	cmp	r5, #9
 8011a64:	f000 80ac 	beq.w	8011bc0 <parser_1780+0x1a0>
 8011a68:	2d0a      	cmp	r5, #10
 8011a6a:	d12d      	bne.n	8011ac8 <parser_1780+0xa8>
 8011a6c:	496f      	ldr	r1, [pc, #444]	; (8011c2c <parser_1780+0x20c>)
 8011a6e:	4620      	mov	r0, r4
 8011a70:	f7ee fbde 	bl	8000230 <strcmp>
 8011a74:	bb30      	cbnz	r0, 8011ac4 <parser_1780+0xa4>
 8011a76:	4631      	mov	r1, r6
 8011a78:	2007      	movs	r0, #7
 8011a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011a7e:	f7fd bd57 	b.w	800f530 <copy_content_node_to_out>
 8011a82:	496b      	ldr	r1, [pc, #428]	; (8011c30 <parser_1780+0x210>)
 8011a84:	4620      	mov	r0, r4
 8011a86:	f7ee fbd3 	bl	8000230 <strcmp>
 8011a8a:	b348      	cbz	r0, 8011ae0 <parser_1780+0xc0>
 8011a8c:	4969      	ldr	r1, [pc, #420]	; (8011c34 <parser_1780+0x214>)
 8011a8e:	4620      	mov	r0, r4
 8011a90:	f7ee fbce 	bl	8000230 <strcmp>
 8011a94:	2800      	cmp	r0, #0
 8011a96:	f000 80a6 	beq.w	8011be6 <parser_1780+0x1c6>
 8011a9a:	4967      	ldr	r1, [pc, #412]	; (8011c38 <parser_1780+0x218>)
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	f7ee fbc7 	bl	8000230 <strcmp>
 8011aa2:	2800      	cmp	r0, #0
 8011aa4:	f000 80a6 	beq.w	8011bf4 <parser_1780+0x1d4>
 8011aa8:	4964      	ldr	r1, [pc, #400]	; (8011c3c <parser_1780+0x21c>)
 8011aaa:	4620      	mov	r0, r4
 8011aac:	f7ee fbc0 	bl	8000230 <strcmp>
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	f000 80a6 	beq.w	8011c02 <parser_1780+0x1e2>
 8011ab6:	4962      	ldr	r1, [pc, #392]	; (8011c40 <parser_1780+0x220>)
 8011ab8:	4620      	mov	r0, r4
 8011aba:	f7ee fbb9 	bl	8000230 <strcmp>
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	f000 80a5 	beq.w	8011c0e <parser_1780+0x1ee>
 8011ac4:	2000      	movs	r0, #0
 8011ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ac8:	f1a5 030b 	sub.w	r3, r5, #11
 8011acc:	2b01      	cmp	r3, #1
 8011ace:	d96f      	bls.n	8011bb0 <parser_1780+0x190>
 8011ad0:	2d0d      	cmp	r5, #13
 8011ad2:	d17d      	bne.n	8011bd0 <parser_1780+0x1b0>
 8011ad4:	495b      	ldr	r1, [pc, #364]	; (8011c44 <parser_1780+0x224>)
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	f7ee fbaa 	bl	8000230 <strcmp>
 8011adc:	2800      	cmp	r0, #0
 8011ade:	d1f1      	bne.n	8011ac4 <parser_1780+0xa4>
 8011ae0:	4632      	mov	r2, r6
 8011ae2:	2101      	movs	r1, #1
 8011ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011ae8:	2007      	movs	r0, #7
 8011aea:	f7fd bd09 	b.w	800f500 <copy_content_buf_to_out>
 8011aee:	4632      	mov	r2, r6
 8011af0:	2101      	movs	r1, #1
 8011af2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011af6:	2005      	movs	r0, #5
 8011af8:	f7fd bd02 	b.w	800f500 <copy_content_buf_to_out>
 8011afc:	4952      	ldr	r1, [pc, #328]	; (8011c48 <parser_1780+0x228>)
 8011afe:	4620      	mov	r0, r4
 8011b00:	f7ee fb96 	bl	8000230 <strcmp>
 8011b04:	2800      	cmp	r0, #0
 8011b06:	d0eb      	beq.n	8011ae0 <parser_1780+0xc0>
 8011b08:	2000      	movs	r0, #0
 8011b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b0c:	494f      	ldr	r1, [pc, #316]	; (8011c4c <parser_1780+0x22c>)
 8011b0e:	4620      	mov	r0, r4
 8011b10:	f7ee fb8e 	bl	8000230 <strcmp>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	d0e3      	beq.n	8011ae0 <parser_1780+0xc0>
 8011b18:	494b      	ldr	r1, [pc, #300]	; (8011c48 <parser_1780+0x228>)
 8011b1a:	4620      	mov	r0, r4
 8011b1c:	f7ee fb88 	bl	8000230 <strcmp>
 8011b20:	2800      	cmp	r0, #0
 8011b22:	d1cf      	bne.n	8011ac4 <parser_1780+0xa4>
 8011b24:	4632      	mov	r2, r6
 8011b26:	2101      	movs	r1, #1
 8011b28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011b2c:	2008      	movs	r0, #8
 8011b2e:	f7fd bce7 	b.w	800f500 <copy_content_buf_to_out>
 8011b32:	4947      	ldr	r1, [pc, #284]	; (8011c50 <parser_1780+0x230>)
 8011b34:	4620      	mov	r0, r4
 8011b36:	f7ee fb7b 	bl	8000230 <strcmp>
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	d1c2      	bne.n	8011ac4 <parser_1780+0xa4>
 8011b3e:	e79a      	b.n	8011a76 <parser_1780+0x56>
 8011b40:	4944      	ldr	r1, [pc, #272]	; (8011c54 <parser_1780+0x234>)
 8011b42:	4620      	mov	r0, r4
 8011b44:	f7ee fb74 	bl	8000230 <strcmp>
 8011b48:	2800      	cmp	r0, #0
 8011b4a:	d0c9      	beq.n	8011ae0 <parser_1780+0xc0>
 8011b4c:	4942      	ldr	r1, [pc, #264]	; (8011c58 <parser_1780+0x238>)
 8011b4e:	4620      	mov	r0, r4
 8011b50:	f7ee fb6e 	bl	8000230 <strcmp>
 8011b54:	2800      	cmp	r0, #0
 8011b56:	d1b5      	bne.n	8011ac4 <parser_1780+0xa4>
 8011b58:	4631      	mov	r1, r6
 8011b5a:	2008      	movs	r0, #8
 8011b5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011b60:	f7fd bce6 	b.w	800f530 <copy_content_node_to_out>
 8011b64:	493d      	ldr	r1, [pc, #244]	; (8011c5c <parser_1780+0x23c>)
 8011b66:	4620      	mov	r0, r4
 8011b68:	f7ee fb62 	bl	8000230 <strcmp>
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	d0b7      	beq.n	8011ae0 <parser_1780+0xc0>
 8011b70:	493b      	ldr	r1, [pc, #236]	; (8011c60 <parser_1780+0x240>)
 8011b72:	4620      	mov	r0, r4
 8011b74:	f7ee fb5c 	bl	8000230 <strcmp>
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	d0d3      	beq.n	8011b24 <parser_1780+0x104>
 8011b7c:	4936      	ldr	r1, [pc, #216]	; (8011c58 <parser_1780+0x238>)
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f7ee fb56 	bl	8000230 <strcmp>
 8011b84:	2800      	cmp	r0, #0
 8011b86:	d19d      	bne.n	8011ac4 <parser_1780+0xa4>
 8011b88:	4631      	mov	r1, r6
 8011b8a:	2009      	movs	r0, #9
 8011b8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011b90:	f7fd bcce 	b.w	800f530 <copy_content_node_to_out>
 8011b94:	492c      	ldr	r1, [pc, #176]	; (8011c48 <parser_1780+0x228>)
 8011b96:	4620      	mov	r0, r4
 8011b98:	f7ee fb4a 	bl	8000230 <strcmp>
 8011b9c:	2800      	cmp	r0, #0
 8011b9e:	d1d5      	bne.n	8011b4c <parser_1780+0x12c>
 8011ba0:	e79e      	b.n	8011ae0 <parser_1780+0xc0>
 8011ba2:	4632      	mov	r2, r6
 8011ba4:	2101      	movs	r1, #1
 8011ba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011baa:	2006      	movs	r0, #6
 8011bac:	f7fd bca8 	b.w	800f500 <copy_content_buf_to_out>
 8011bb0:	4928      	ldr	r1, [pc, #160]	; (8011c54 <parser_1780+0x234>)
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f7ee fb3c 	bl	8000230 <strcmp>
 8011bb8:	2800      	cmp	r0, #0
 8011bba:	d091      	beq.n	8011ae0 <parser_1780+0xc0>
 8011bbc:	2000      	movs	r0, #0
 8011bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bc0:	4925      	ldr	r1, [pc, #148]	; (8011c58 <parser_1780+0x238>)
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	f7ee fb34 	bl	8000230 <strcmp>
 8011bc8:	2800      	cmp	r0, #0
 8011bca:	f47f af7b 	bne.w	8011ac4 <parser_1780+0xa4>
 8011bce:	e752      	b.n	8011a76 <parser_1780+0x56>
 8011bd0:	2d0f      	cmp	r5, #15
 8011bd2:	f47f af77 	bne.w	8011ac4 <parser_1780+0xa4>
 8011bd6:	4923      	ldr	r1, [pc, #140]	; (8011c64 <parser_1780+0x244>)
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f7ee fb29 	bl	8000230 <strcmp>
 8011bde:	2800      	cmp	r0, #0
 8011be0:	f47f af70 	bne.w	8011ac4 <parser_1780+0xa4>
 8011be4:	e747      	b.n	8011a76 <parser_1780+0x56>
 8011be6:	4632      	mov	r2, r6
 8011be8:	2102      	movs	r1, #2
 8011bea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011bee:	2008      	movs	r0, #8
 8011bf0:	f7fd bc86 	b.w	800f500 <copy_content_buf_to_out>
 8011bf4:	4632      	mov	r2, r6
 8011bf6:	4629      	mov	r1, r5
 8011bf8:	200a      	movs	r0, #10
 8011bfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011bfe:	f7fd bc7f 	b.w	800f500 <copy_content_buf_to_out>
 8011c02:	4631      	mov	r1, r6
 8011c04:	200b      	movs	r0, #11
 8011c06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011c0a:	f7fd bc91 	b.w	800f530 <copy_content_node_to_out>
 8011c0e:	7af8      	ldrb	r0, [r7, #11]
 8011c10:	4632      	mov	r2, r6
 8011c12:	4629      	mov	r1, r5
 8011c14:	300c      	adds	r0, #12
 8011c16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011c1a:	f7fd bc89 	b.w	800f530 <copy_content_node_to_out>
 8011c1e:	bf00      	nop
 8011c20:	08014b40 	.word	0x08014b40
 8011c24:	08014b4c 	.word	0x08014b4c
 8011c28:	200068ac 	.word	0x200068ac
 8011c2c:	08014be0 	.word	0x08014be0
 8011c30:	08014b5c 	.word	0x08014b5c
 8011c34:	08014b6c 	.word	0x08014b6c
 8011c38:	08014b78 	.word	0x08014b78
 8011c3c:	08014b84 	.word	0x08014b84
 8011c40:	08014b94 	.word	0x08014b94
 8011c44:	08014bf8 	.word	0x08014bf8
 8011c48:	08014ba4 	.word	0x08014ba4
 8011c4c:	08014724 	.word	0x08014724
 8011c50:	08014bc0 	.word	0x08014bc0
 8011c54:	08014bd4 	.word	0x08014bd4
 8011c58:	08014bb0 	.word	0x08014bb0
 8011c5c:	08014738 	.word	0x08014738
 8011c60:	0801474c 	.word	0x0801474c
 8011c64:	08014c04 	.word	0x08014c04
	...

08011c70 <pack_20d0_data>:
 8011c70:	4801      	ldr	r0, [pc, #4]	; (8011c78 <pack_20d0_data+0x8>)
 8011c72:	f7fd ba1d 	b.w	800f0b0 <pack_data_u16>
 8011c76:	bf00      	nop
 8011c78:	20012e88 	.word	0x20012e88
 8011c7c:	00000000 	.word	0x00000000

08011c80 <parser_20d0>:
 8011c80:	2000      	movs	r0, #0
 8011c82:	4770      	bx	lr
	...

08011c90 <pack_2100_data>:
 8011c90:	b510      	push	{r4, lr}
 8011c92:	4c08      	ldr	r4, [pc, #32]	; (8011cb4 <pack_2100_data+0x24>)
 8011c94:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8011c98:	f104 0110 	add.w	r1, r4, #16
 8011c9c:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8011ca0:	4668      	mov	r0, sp
 8011ca2:	f000 fb87 	bl	80123b4 <memcpy>
 8011ca6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011caa:	f7fd fa19 	bl	800f0e0 <pack_data_node>
 8011cae:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8011cb2:	bd10      	pop	{r4, pc}
 8011cb4:	2000445c 	.word	0x2000445c
	...

08011cc0 <parser_2100>:
 8011cc0:	2000      	movs	r0, #0
 8011cc2:	4770      	bx	lr
	...

08011cd0 <pack_2110_data>:
 8011cd0:	b510      	push	{r4, lr}
 8011cd2:	4c08      	ldr	r4, [pc, #32]	; (8011cf4 <pack_2110_data+0x24>)
 8011cd4:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8011cd8:	f104 0110 	add.w	r1, r4, #16
 8011cdc:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8011ce0:	4668      	mov	r0, sp
 8011ce2:	f000 fb67 	bl	80123b4 <memcpy>
 8011ce6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011cea:	f7fd f9f9 	bl	800f0e0 <pack_data_node>
 8011cee:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8011cf2:	bd10      	pop	{r4, pc}
 8011cf4:	20004054 	.word	0x20004054
	...

08011d00 <parser_2110>:
 8011d00:	2000      	movs	r0, #0
 8011d02:	4770      	bx	lr
	...

08011d10 <pack_2140_data>:
 8011d10:	b510      	push	{r4, lr}
 8011d12:	4c08      	ldr	r4, [pc, #32]	; (8011d34 <pack_2140_data+0x24>)
 8011d14:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8011d18:	f104 0110 	add.w	r1, r4, #16
 8011d1c:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8011d20:	4668      	mov	r0, sp
 8011d22:	f000 fb47 	bl	80123b4 <memcpy>
 8011d26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011d2a:	f7fd f9d9 	bl	800f0e0 <pack_data_node>
 8011d2e:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8011d32:	bd10      	pop	{r4, pc}
 8011d34:	20003c4c 	.word	0x20003c4c
	...

08011d40 <parser_2140>:
 8011d40:	2000      	movs	r0, #0
 8011d42:	4770      	bx	lr
	...

08011d50 <pack_21a0_data>:
 8011d50:	b508      	push	{r3, lr}
 8011d52:	2000      	movs	r0, #0
 8011d54:	f7fd f99c 	bl	800f090 <pack_data_u8>
 8011d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011d5c:	2087      	movs	r0, #135	; 0x87
 8011d5e:	f7fd b997 	b.w	800f090 <pack_data_u8>
 8011d62:	bf00      	nop
	...

08011d70 <parser_21a0>:
 8011d70:	b510      	push	{r4, lr}
 8011d72:	460c      	mov	r4, r1
 8011d74:	4905      	ldr	r1, [pc, #20]	; (8011d8c <parser_21a0+0x1c>)
 8011d76:	f7ee fa5b 	bl	8000230 <strcmp>
 8011d7a:	b100      	cbz	r0, 8011d7e <parser_21a0+0xe>
 8011d7c:	bd10      	pop	{r4, pc}
 8011d7e:	4622      	mov	r2, r4
 8011d80:	2180      	movs	r1, #128	; 0x80
 8011d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d86:	2007      	movs	r0, #7
 8011d88:	f7fd bbba 	b.w	800f500 <copy_content_buf_to_out>
 8011d8c:	08014c14 	.word	0x08014c14

08011d90 <pack_2200_data>:
 8011d90:	b510      	push	{r4, lr}
 8011d92:	4c08      	ldr	r4, [pc, #32]	; (8011db4 <pack_2200_data+0x24>)
 8011d94:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8011d98:	f104 0110 	add.w	r1, r4, #16
 8011d9c:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8011da0:	4668      	mov	r0, sp
 8011da2:	f000 fb07 	bl	80123b4 <memcpy>
 8011da6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011daa:	f7fd f999 	bl	800f0e0 <pack_data_node>
 8011dae:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
 8011db2:	bd10      	pop	{r4, pc}
 8011db4:	20012e8c 	.word	0x20012e8c
	...

08011dc0 <parser_2200>:
 8011dc0:	2000      	movs	r0, #0
 8011dc2:	4770      	bx	lr
	...

08011dd0 <pack_3060_data>:
 8011dd0:	f7ff bfde 	b.w	8011d90 <pack_2200_data>
	...

08011de0 <parser_3060>:
 8011de0:	2001      	movs	r0, #1
 8011de2:	4770      	bx	lr
	...

08011df0 <pack_2310_data>:
 8011df0:	4b01      	ldr	r3, [pc, #4]	; (8011df8 <pack_2310_data+0x8>)
 8011df2:	7818      	ldrb	r0, [r3, #0]
 8011df4:	f7fd b94c 	b.w	800f090 <pack_data_u8>
 8011df8:	2000a944 	.word	0x2000a944
 8011dfc:	00000000 	.word	0x00000000

08011e00 <Ks>:
 8011e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e04:	4b43      	ldr	r3, [pc, #268]	; (8011f14 <Ks+0x114>)
 8011e06:	b09f      	sub	sp, #124	; 0x7c
 8011e08:	468c      	mov	ip, r1
 8011e0a:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8011e0e:	f10d 0203 	add.w	r2, sp, #3
 8011e12:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8011e16:	5c41      	ldrb	r1, [r0, r1]
 8011e18:	f802 1f01 	strb.w	r1, [r2, #1]!
 8011e1c:	42a3      	cmp	r3, r4
 8011e1e:	d1f8      	bne.n	8011e12 <Ks+0x12>
 8011e20:	f8df e100 	ldr.w	lr, [pc, #256]	; 8011f24 <Ks+0x124>
 8011e24:	4c3c      	ldr	r4, [pc, #240]	; (8011f18 <Ks+0x118>)
 8011e26:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8011e2a:	f10d 0936 	add.w	r9, sp, #54	; 0x36
 8011e2e:	f10d 0835 	add.w	r8, sp, #53	; 0x35
 8011e32:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d142      	bne.n	8011ec0 <Ks+0xc0>
 8011e3a:	f89d a004 	ldrb.w	sl, [sp, #4]
 8011e3e:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8011e42:	f10d 0505 	add.w	r5, sp, #5
 8011e46:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 8011e4a:	6828      	ldr	r0, [r5, #0]
 8011e4c:	6869      	ldr	r1, [r5, #4]
 8011e4e:	68aa      	ldr	r2, [r5, #8]
 8011e50:	68eb      	ldr	r3, [r5, #12]
 8011e52:	465e      	mov	r6, fp
 8011e54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011e56:	3510      	adds	r5, #16
 8011e58:	4545      	cmp	r5, r8
 8011e5a:	46b3      	mov	fp, r6
 8011e5c:	d1f5      	bne.n	8011e4a <Ks+0x4a>
 8011e5e:	f8d8 0000 	ldr.w	r0, [r8]
 8011e62:	6030      	str	r0, [r6, #0]
 8011e64:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8011e68:	f898 2006 	ldrb.w	r2, [r8, #6]
 8011e6c:	71b2      	strb	r2, [r6, #6]
 8011e6e:	80b3      	strh	r3, [r6, #4]
 8011e70:	ae0f      	add	r6, sp, #60	; 0x3c
 8011e72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011e74:	ad01      	add	r5, sp, #4
 8011e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011e78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011e7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011e80:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011e84:	f845 0b04 	str.w	r0, [r5], #4
 8011e88:	f825 1b02 	strh.w	r1, [r5], #2
 8011e8c:	0c09      	lsrs	r1, r1, #16
 8011e8e:	7029      	strb	r1, [r5, #0]
 8011e90:	f88d a01f 	strb.w	sl, [sp, #31]
 8011e94:	f88d 703b 	strb.w	r7, [sp, #59]	; 0x3b
 8011e98:	4a20      	ldr	r2, [pc, #128]	; (8011f1c <Ks+0x11c>)
 8011e9a:	4661      	mov	r1, ip
 8011e9c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8011ea0:	a81e      	add	r0, sp, #120	; 0x78
 8011ea2:	4403      	add	r3, r0
 8011ea4:	42a2      	cmp	r2, r4
 8011ea6:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8011eaa:	f801 3f01 	strb.w	r3, [r1, #1]!
 8011eae:	d1f5      	bne.n	8011e9c <Ks+0x9c>
 8011eb0:	4b1b      	ldr	r3, [pc, #108]	; (8011f20 <Ks+0x120>)
 8011eb2:	459e      	cmp	lr, r3
 8011eb4:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8011eb8:	d1bb      	bne.n	8011e32 <Ks+0x32>
 8011eba:	b01f      	add	sp, #124	; 0x7c
 8011ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec0:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8011ec4:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8011ec8:	f10d 0506 	add.w	r5, sp, #6
 8011ecc:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 8011ed0:	6828      	ldr	r0, [r5, #0]
 8011ed2:	6869      	ldr	r1, [r5, #4]
 8011ed4:	68aa      	ldr	r2, [r5, #8]
 8011ed6:	68eb      	ldr	r3, [r5, #12]
 8011ed8:	465e      	mov	r6, fp
 8011eda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011edc:	3510      	adds	r5, #16
 8011ede:	454d      	cmp	r5, r9
 8011ee0:	46b3      	mov	fp, r6
 8011ee2:	d1f5      	bne.n	8011ed0 <Ks+0xd0>
 8011ee4:	f8d9 0000 	ldr.w	r0, [r9]
 8011ee8:	6030      	str	r0, [r6, #0]
 8011eea:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8011eee:	80b3      	strh	r3, [r6, #4]
 8011ef0:	ae0f      	add	r6, sp, #60	; 0x3c
 8011ef2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011ef4:	ad01      	add	r5, sp, #4
 8011ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011ef8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011efc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011f00:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011f04:	f845 0b04 	str.w	r0, [r5], #4
 8011f08:	8029      	strh	r1, [r5, #0]
 8011f0a:	f8ad a01e 	strh.w	sl, [sp, #30]
 8011f0e:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
 8011f12:	e7c1      	b.n	8011e98 <Ks+0x98>
 8011f14:	2000095f 	.word	0x2000095f
 8011f18:	200009d7 	.word	0x200009d7
 8011f1c:	200009a7 	.word	0x200009a7
 8011f20:	200009a7 	.word	0x200009a7
 8011f24:	20000997 	.word	0x20000997
	...

08011f30 <fonction>:
 8011f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f34:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8012004 <fonction+0xd4>
 8011f38:	4c2f      	ldr	r4, [pc, #188]	; (8011ff8 <fonction+0xc8>)
 8011f3a:	4f30      	ldr	r7, [pc, #192]	; (8011ffc <fonction+0xcc>)
 8011f3c:	b089      	sub	sp, #36	; 0x24
 8011f3e:	2500      	movs	r5, #0
 8011f40:	466e      	mov	r6, sp
 8011f42:	f894 8001 	ldrb.w	r8, [r4, #1]
 8011f46:	f894 e004 	ldrb.w	lr, [r4, #4]
 8011f4a:	7823      	ldrb	r3, [r4, #0]
 8011f4c:	f890 b000 	ldrb.w	fp, [r0]
 8011f50:	f811 9008 	ldrb.w	r9, [r1, r8]
 8011f54:	f811 a00e 	ldrb.w	sl, [r1, lr]
 8011f58:	f890 8001 	ldrb.w	r8, [r0, #1]
 8011f5c:	f894 e002 	ldrb.w	lr, [r4, #2]
 8011f60:	5ccb      	ldrb	r3, [r1, r3]
 8011f62:	ea89 0908 	eor.w	r9, r9, r8
 8011f66:	ea83 030b 	eor.w	r3, r3, fp
 8011f6a:	f890 8004 	ldrb.w	r8, [r0, #4]
 8011f6e:	f811 b00e 	ldrb.w	fp, [r1, lr]
 8011f72:	f894 e003 	ldrb.w	lr, [r4, #3]
 8011f76:	015b      	lsls	r3, r3, #5
 8011f78:	ea8a 0a08 	eor.w	sl, sl, r8
 8011f7c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011f80:	f811 800e 	ldrb.w	r8, [r1, lr]
 8011f84:	f890 9002 	ldrb.w	r9, [r0, #2]
 8011f88:	f894 e005 	ldrb.w	lr, [r4, #5]
 8011f8c:	4453      	add	r3, sl
 8011f8e:	f890 a003 	ldrb.w	sl, [r0, #3]
 8011f92:	f811 e00e 	ldrb.w	lr, [r1, lr]
 8011f96:	ea8b 0b09 	eor.w	fp, fp, r9
 8011f9a:	f890 9005 	ldrb.w	r9, [r0, #5]
 8011f9e:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8011fa2:	ea88 080a 	eor.w	r8, r8, sl
 8011fa6:	ea8e 0e09 	eor.w	lr, lr, r9
 8011faa:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 8011fae:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8011fb2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8011fb6:	eb0c 1e85 	add.w	lr, ip, r5, lsl #6
 8011fba:	3501      	adds	r5, #1
 8011fbc:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8011fc0:	2d08      	cmp	r5, #8
 8011fc2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8011fc6:	f846 3b04 	str.w	r3, [r6], #4
 8011fca:	f104 0406 	add.w	r4, r4, #6
 8011fce:	f100 0006 	add.w	r0, r0, #6
 8011fd2:	d1b6      	bne.n	8011f42 <fonction+0x12>
 8011fd4:	490a      	ldr	r1, [pc, #40]	; (8012000 <fonction+0xd0>)
 8011fd6:	3a01      	subs	r2, #1
 8011fd8:	f101 0020 	add.w	r0, r1, #32
 8011fdc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011fe0:	ac08      	add	r4, sp, #32
 8011fe2:	4423      	add	r3, r4
 8011fe4:	4288      	cmp	r0, r1
 8011fe6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011fea:	f802 3f01 	strb.w	r3, [r2, #1]!
 8011fee:	d1f5      	bne.n	8011fdc <fonction+0xac>
 8011ff0:	b009      	add	sp, #36	; 0x24
 8011ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ff6:	bf00      	nop
 8011ff8:	20000710 	.word	0x20000710
 8011ffc:	200009d8 	.word	0x200009d8
 8012000:	2000073f 	.word	0x2000073f
 8012004:	20000760 	.word	0x20000760
	...

08012010 <chiffrement>:
 8012010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012012:	4606      	mov	r6, r0
 8012014:	b0a1      	sub	sp, #132	; 0x84
 8012016:	68f3      	ldr	r3, [r6, #12]
 8012018:	6800      	ldr	r0, [r0, #0]
 801201a:	4615      	mov	r5, r2
 801201c:	460f      	mov	r7, r1
 801201e:	68b2      	ldr	r2, [r6, #8]
 8012020:	6871      	ldr	r1, [r6, #4]
 8012022:	ac08      	add	r4, sp, #32
 8012024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012026:	46b4      	mov	ip, r6
 8012028:	6930      	ldr	r0, [r6, #16]
 801202a:	6971      	ldr	r1, [r6, #20]
 801202c:	69b2      	ldr	r2, [r6, #24]
 801202e:	69f3      	ldr	r3, [r6, #28]
 8012030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012032:	f85c 0f20 	ldr.w	r0, [ip, #32]!
 8012036:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801203a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801203e:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8012042:	466c      	mov	r4, sp
 8012044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012046:	f8dc 0010 	ldr.w	r0, [ip, #16]
 801204a:	f8dc 1014 	ldr.w	r1, [ip, #20]
 801204e:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8012052:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8012056:	f505 7640 	add.w	r6, r5, #768	; 0x300
 801205a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801205c:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8012060:	46ee      	mov	lr, sp
 8012062:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012066:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
 801206a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801206e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8012072:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8012076:	aa10      	add	r2, sp, #64	; 0x40
 8012078:	4669      	mov	r1, sp
 801207a:	4628      	mov	r0, r5
 801207c:	f7ff ff58 	bl	8011f30 <fonction>
 8012080:	f10d 021f 	add.w	r2, sp, #31
 8012084:	4620      	mov	r0, r4
 8012086:	f10d 31ff 	add.w	r1, sp, #4294967295	; 0xffffffff
 801208a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801208e:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8012092:	42a2      	cmp	r2, r4
 8012094:	ea83 030c 	eor.w	r3, r3, ip
 8012098:	f801 3f01 	strb.w	r3, [r1, #1]!
 801209c:	d1f5      	bne.n	801208a <chiffrement+0x7a>
 801209e:	f10d 0e60 	add.w	lr, sp, #96	; 0x60
 80120a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80120a6:	f10d 0c20 	add.w	ip, sp, #32
 80120aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120ae:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80120b2:	3530      	adds	r5, #48	; 0x30
 80120b4:	42b5      	cmp	r5, r6
 80120b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80120ba:	d1d1      	bne.n	8012060 <chiffrement+0x50>
 80120bc:	466c      	mov	r4, sp
 80120be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120c0:	6038      	str	r0, [r7, #0]
 80120c2:	6079      	str	r1, [r7, #4]
 80120c4:	60ba      	str	r2, [r7, #8]
 80120c6:	60fb      	str	r3, [r7, #12]
 80120c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120ca:	ac08      	add	r4, sp, #32
 80120cc:	6138      	str	r0, [r7, #16]
 80120ce:	6179      	str	r1, [r7, #20]
 80120d0:	61ba      	str	r2, [r7, #24]
 80120d2:	61fb      	str	r3, [r7, #28]
 80120d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120d6:	6238      	str	r0, [r7, #32]
 80120d8:	6279      	str	r1, [r7, #36]	; 0x24
 80120da:	62ba      	str	r2, [r7, #40]	; 0x28
 80120dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120e0:	6338      	str	r0, [r7, #48]	; 0x30
 80120e2:	6379      	str	r1, [r7, #52]	; 0x34
 80120e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80120e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80120e8:	b021      	add	sp, #132	; 0x84
 80120ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120ec:	0000      	movs	r0, r0
	...

080120f0 <Des_Encrypt>:
 80120f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120f2:	4e44      	ldr	r6, [pc, #272]	; (8012204 <Des_Encrypt+0x114>)
 80120f4:	b091      	sub	sp, #68	; 0x44
 80120f6:	460c      	mov	r4, r1
 80120f8:	f106 0740 	add.w	r7, r6, #64	; 0x40
 80120fc:	f1a6 0308 	sub.w	r3, r6, #8
 8012100:	2180      	movs	r1, #128	; 0x80
 8012102:	7805      	ldrb	r5, [r0, #0]
 8012104:	4229      	tst	r1, r5
 8012106:	bf14      	ite	ne
 8012108:	2501      	movne	r5, #1
 801210a:	2500      	moveq	r5, #0
 801210c:	f803 5b01 	strb.w	r5, [r3], #1
 8012110:	42b3      	cmp	r3, r6
 8012112:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012116:	d1f4      	bne.n	8012102 <Des_Encrypt+0x12>
 8012118:	f103 0608 	add.w	r6, r3, #8
 801211c:	42be      	cmp	r6, r7
 801211e:	f100 0001 	add.w	r0, r0, #1
 8012122:	d1eb      	bne.n	80120fc <Des_Encrypt+0xc>
 8012124:	4838      	ldr	r0, [pc, #224]	; (8012208 <Des_Encrypt+0x118>)
 8012126:	4615      	mov	r5, r2
 8012128:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801212c:	f1a0 0308 	sub.w	r3, r0, #8
 8012130:	2280      	movs	r2, #128	; 0x80
 8012132:	7829      	ldrb	r1, [r5, #0]
 8012134:	420a      	tst	r2, r1
 8012136:	bf14      	ite	ne
 8012138:	2101      	movne	r1, #1
 801213a:	2100      	moveq	r1, #0
 801213c:	f803 1b01 	strb.w	r1, [r3], #1
 8012140:	4283      	cmp	r3, r0
 8012142:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012146:	d1f4      	bne.n	8012132 <Des_Encrypt+0x42>
 8012148:	f103 0008 	add.w	r0, r3, #8
 801214c:	42b0      	cmp	r0, r6
 801214e:	f105 0501 	add.w	r5, r5, #1
 8012152:	d1eb      	bne.n	801212c <Des_Encrypt+0x3c>
 8012154:	4e2d      	ldr	r6, [pc, #180]	; (801220c <Des_Encrypt+0x11c>)
 8012156:	492e      	ldr	r1, [pc, #184]	; (8012210 <Des_Encrypt+0x120>)
 8012158:	482e      	ldr	r0, [pc, #184]	; (8012214 <Des_Encrypt+0x124>)
 801215a:	4d2f      	ldr	r5, [pc, #188]	; (8012218 <Des_Encrypt+0x128>)
 801215c:	f7ff fe50 	bl	8011e00 <Ks>
 8012160:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012162:	466f      	mov	r7, sp
 8012164:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012166:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012168:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801216a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801216c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801216e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8012172:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8012176:	f1a6 0231 	sub.w	r2, r6, #49	; 0x31
 801217a:	f105 0140 	add.w	r1, r5, #64	; 0x40
 801217e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8012182:	a810      	add	r0, sp, #64	; 0x40
 8012184:	4403      	add	r3, r0
 8012186:	42a9      	cmp	r1, r5
 8012188:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 801218c:	f802 3f01 	strb.w	r3, [r2, #1]!
 8012190:	d1f5      	bne.n	801217e <Des_Encrypt+0x8e>
 8012192:	4e22      	ldr	r6, [pc, #136]	; (801221c <Des_Encrypt+0x12c>)
 8012194:	4a1e      	ldr	r2, [pc, #120]	; (8012210 <Des_Encrypt+0x120>)
 8012196:	4921      	ldr	r1, [pc, #132]	; (801221c <Des_Encrypt+0x12c>)
 8012198:	481c      	ldr	r0, [pc, #112]	; (801220c <Des_Encrypt+0x11c>)
 801219a:	4d21      	ldr	r5, [pc, #132]	; (8012220 <Des_Encrypt+0x130>)
 801219c:	f7ff ff38 	bl	8012010 <chiffrement>
 80121a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80121a2:	466f      	mov	r7, sp
 80121a4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80121a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80121a8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80121aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80121ac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80121ae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80121b2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80121b6:	f1a6 0231 	sub.w	r2, r6, #49	; 0x31
 80121ba:	f105 0140 	add.w	r1, r5, #64	; 0x40
 80121be:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80121c2:	a810      	add	r0, sp, #64	; 0x40
 80121c4:	4403      	add	r3, r0
 80121c6:	428d      	cmp	r5, r1
 80121c8:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80121cc:	f802 3f01 	strb.w	r3, [r2, #1]!
 80121d0:	d1f5      	bne.n	80121be <Des_Encrypt+0xce>
 80121d2:	4814      	ldr	r0, [pc, #80]	; (8012224 <Des_Encrypt+0x134>)
 80121d4:	3c01      	subs	r4, #1
 80121d6:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80121da:	f1a0 0308 	sub.w	r3, r0, #8
 80121de:	2500      	movs	r5, #0
 80121e0:	2280      	movs	r2, #128	; 0x80
 80121e2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80121e6:	b101      	cbz	r1, 80121ea <Des_Encrypt+0xfa>
 80121e8:	4315      	orrs	r5, r2
 80121ea:	4283      	cmp	r3, r0
 80121ec:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80121f0:	d1f7      	bne.n	80121e2 <Des_Encrypt+0xf2>
 80121f2:	f103 0008 	add.w	r0, r3, #8
 80121f6:	4286      	cmp	r6, r0
 80121f8:	f804 5f01 	strb.w	r5, [r4, #1]!
 80121fc:	d1ed      	bne.n	80121da <Des_Encrypt+0xea>
 80121fe:	b011      	add	sp, #68	; 0x44
 8012200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012202:	bf00      	nop
 8012204:	200135dc 	.word	0x200135dc
 8012208:	2001329c 	.word	0x2001329c
 801220c:	200135d4 	.word	0x200135d4
 8012210:	200132d4 	.word	0x200132d4
 8012214:	20013294 	.word	0x20013294
 8012218:	2000068f 	.word	0x2000068f
 801221c:	20013614 	.word	0x20013614
 8012220:	200006cf 	.word	0x200006cf
 8012224:	2001361c 	.word	0x2001361c

08012228 <calloc>:
 8012228:	4b02      	ldr	r3, [pc, #8]	; (8012234 <calloc+0xc>)
 801222a:	460a      	mov	r2, r1
 801222c:	4601      	mov	r1, r0
 801222e:	6818      	ldr	r0, [r3, #0]
 8012230:	f000 b8d6 	b.w	80123e0 <_calloc_r>
 8012234:	20000a18 	.word	0x20000a18

08012238 <__errno>:
 8012238:	4b01      	ldr	r3, [pc, #4]	; (8012240 <__errno+0x8>)
 801223a:	6818      	ldr	r0, [r3, #0]
 801223c:	4770      	bx	lr
 801223e:	bf00      	nop
 8012240:	20000a18 	.word	0x20000a18

08012244 <fiprintf>:
 8012244:	b40e      	push	{r1, r2, r3}
 8012246:	b503      	push	{r0, r1, lr}
 8012248:	4601      	mov	r1, r0
 801224a:	ab03      	add	r3, sp, #12
 801224c:	4805      	ldr	r0, [pc, #20]	; (8012264 <fiprintf+0x20>)
 801224e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012252:	6800      	ldr	r0, [r0, #0]
 8012254:	9301      	str	r3, [sp, #4]
 8012256:	f000 f9db 	bl	8012610 <_vfiprintf_r>
 801225a:	b002      	add	sp, #8
 801225c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012260:	b003      	add	sp, #12
 8012262:	4770      	bx	lr
 8012264:	20000a18 	.word	0x20000a18

08012268 <_fwrite_r>:
 8012268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801226c:	9c08      	ldr	r4, [sp, #32]
 801226e:	468a      	mov	sl, r1
 8012270:	4690      	mov	r8, r2
 8012272:	4605      	mov	r5, r0
 8012274:	fb02 f903 	mul.w	r9, r2, r3
 8012278:	b118      	cbz	r0, 8012282 <_fwrite_r+0x1a>
 801227a:	6983      	ldr	r3, [r0, #24]
 801227c:	b90b      	cbnz	r3, 8012282 <_fwrite_r+0x1a>
 801227e:	f000 ff3d 	bl	80130fc <__sinit>
 8012282:	4b26      	ldr	r3, [pc, #152]	; (801231c <_fwrite_r+0xb4>)
 8012284:	429c      	cmp	r4, r3
 8012286:	d123      	bne.n	80122d0 <_fwrite_r+0x68>
 8012288:	686c      	ldr	r4, [r5, #4]
 801228a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801228c:	07de      	lsls	r6, r3, #31
 801228e:	d405      	bmi.n	801229c <_fwrite_r+0x34>
 8012290:	89a3      	ldrh	r3, [r4, #12]
 8012292:	0598      	lsls	r0, r3, #22
 8012294:	d402      	bmi.n	801229c <_fwrite_r+0x34>
 8012296:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012298:	f000 f879 	bl	801238e <__retarget_lock_acquire_recursive>
 801229c:	89a3      	ldrh	r3, [r4, #12]
 801229e:	0719      	lsls	r1, r3, #28
 80122a0:	d520      	bpl.n	80122e4 <_fwrite_r+0x7c>
 80122a2:	6923      	ldr	r3, [r4, #16]
 80122a4:	b1f3      	cbz	r3, 80122e4 <_fwrite_r+0x7c>
 80122a6:	2600      	movs	r6, #0
 80122a8:	454e      	cmp	r6, r9
 80122aa:	d029      	beq.n	8012300 <_fwrite_r+0x98>
 80122ac:	68a7      	ldr	r7, [r4, #8]
 80122ae:	f81a 1006 	ldrb.w	r1, [sl, r6]
 80122b2:	3f01      	subs	r7, #1
 80122b4:	2f00      	cmp	r7, #0
 80122b6:	60a7      	str	r7, [r4, #8]
 80122b8:	da04      	bge.n	80122c4 <_fwrite_r+0x5c>
 80122ba:	69a3      	ldr	r3, [r4, #24]
 80122bc:	429f      	cmp	r7, r3
 80122be:	db19      	blt.n	80122f4 <_fwrite_r+0x8c>
 80122c0:	290a      	cmp	r1, #10
 80122c2:	d017      	beq.n	80122f4 <_fwrite_r+0x8c>
 80122c4:	6823      	ldr	r3, [r4, #0]
 80122c6:	1c5a      	adds	r2, r3, #1
 80122c8:	6022      	str	r2, [r4, #0]
 80122ca:	7019      	strb	r1, [r3, #0]
 80122cc:	3601      	adds	r6, #1
 80122ce:	e7eb      	b.n	80122a8 <_fwrite_r+0x40>
 80122d0:	4b13      	ldr	r3, [pc, #76]	; (8012320 <_fwrite_r+0xb8>)
 80122d2:	429c      	cmp	r4, r3
 80122d4:	d101      	bne.n	80122da <_fwrite_r+0x72>
 80122d6:	68ac      	ldr	r4, [r5, #8]
 80122d8:	e7d7      	b.n	801228a <_fwrite_r+0x22>
 80122da:	4b12      	ldr	r3, [pc, #72]	; (8012324 <_fwrite_r+0xbc>)
 80122dc:	429c      	cmp	r4, r3
 80122de:	bf08      	it	eq
 80122e0:	68ec      	ldreq	r4, [r5, #12]
 80122e2:	e7d2      	b.n	801228a <_fwrite_r+0x22>
 80122e4:	4621      	mov	r1, r4
 80122e6:	4628      	mov	r0, r5
 80122e8:	f000 fd74 	bl	8012dd4 <__swsetup_r>
 80122ec:	2800      	cmp	r0, #0
 80122ee:	d0da      	beq.n	80122a6 <_fwrite_r+0x3e>
 80122f0:	2600      	movs	r6, #0
 80122f2:	e005      	b.n	8012300 <_fwrite_r+0x98>
 80122f4:	4622      	mov	r2, r4
 80122f6:	4628      	mov	r0, r5
 80122f8:	f000 fd08 	bl	8012d0c <__swbuf_r>
 80122fc:	3001      	adds	r0, #1
 80122fe:	d1e5      	bne.n	80122cc <_fwrite_r+0x64>
 8012300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012302:	07da      	lsls	r2, r3, #31
 8012304:	d405      	bmi.n	8012312 <_fwrite_r+0xaa>
 8012306:	89a3      	ldrh	r3, [r4, #12]
 8012308:	059b      	lsls	r3, r3, #22
 801230a:	d402      	bmi.n	8012312 <_fwrite_r+0xaa>
 801230c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801230e:	f000 f83f 	bl	8012390 <__retarget_lock_release_recursive>
 8012312:	fbb6 f0f8 	udiv	r0, r6, r8
 8012316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801231a:	bf00      	nop
 801231c:	08014c7c 	.word	0x08014c7c
 8012320:	08014c9c 	.word	0x08014c9c
 8012324:	08014c5c 	.word	0x08014c5c

08012328 <fwrite>:
 8012328:	b507      	push	{r0, r1, r2, lr}
 801232a:	9300      	str	r3, [sp, #0]
 801232c:	4613      	mov	r3, r2
 801232e:	460a      	mov	r2, r1
 8012330:	4601      	mov	r1, r0
 8012332:	4803      	ldr	r0, [pc, #12]	; (8012340 <fwrite+0x18>)
 8012334:	6800      	ldr	r0, [r0, #0]
 8012336:	f7ff ff97 	bl	8012268 <_fwrite_r>
 801233a:	b003      	add	sp, #12
 801233c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012340:	20000a18 	.word	0x20000a18

08012344 <__libc_init_array>:
 8012344:	b570      	push	{r4, r5, r6, lr}
 8012346:	2600      	movs	r6, #0
 8012348:	4d0c      	ldr	r5, [pc, #48]	; (801237c <__libc_init_array+0x38>)
 801234a:	4c0d      	ldr	r4, [pc, #52]	; (8012380 <__libc_init_array+0x3c>)
 801234c:	1b64      	subs	r4, r4, r5
 801234e:	10a4      	asrs	r4, r4, #2
 8012350:	42a6      	cmp	r6, r4
 8012352:	d109      	bne.n	8012368 <__libc_init_array+0x24>
 8012354:	f001 fa2a 	bl	80137ac <_init>
 8012358:	2600      	movs	r6, #0
 801235a:	4d0a      	ldr	r5, [pc, #40]	; (8012384 <__libc_init_array+0x40>)
 801235c:	4c0a      	ldr	r4, [pc, #40]	; (8012388 <__libc_init_array+0x44>)
 801235e:	1b64      	subs	r4, r4, r5
 8012360:	10a4      	asrs	r4, r4, #2
 8012362:	42a6      	cmp	r6, r4
 8012364:	d105      	bne.n	8012372 <__libc_init_array+0x2e>
 8012366:	bd70      	pop	{r4, r5, r6, pc}
 8012368:	f855 3b04 	ldr.w	r3, [r5], #4
 801236c:	4798      	blx	r3
 801236e:	3601      	adds	r6, #1
 8012370:	e7ee      	b.n	8012350 <__libc_init_array+0xc>
 8012372:	f855 3b04 	ldr.w	r3, [r5], #4
 8012376:	4798      	blx	r3
 8012378:	3601      	adds	r6, #1
 801237a:	e7f2      	b.n	8012362 <__libc_init_array+0x1e>
 801237c:	08014cc4 	.word	0x08014cc4
 8012380:	08014cc4 	.word	0x08014cc4
 8012384:	08014cc4 	.word	0x08014cc4
 8012388:	08014cc8 	.word	0x08014cc8

0801238c <__retarget_lock_init_recursive>:
 801238c:	4770      	bx	lr

0801238e <__retarget_lock_acquire_recursive>:
 801238e:	4770      	bx	lr

08012390 <__retarget_lock_release_recursive>:
 8012390:	4770      	bx	lr
	...

08012394 <malloc>:
 8012394:	4b02      	ldr	r3, [pc, #8]	; (80123a0 <malloc+0xc>)
 8012396:	4601      	mov	r1, r0
 8012398:	6818      	ldr	r0, [r3, #0]
 801239a:	f000 b89d 	b.w	80124d8 <_malloc_r>
 801239e:	bf00      	nop
 80123a0:	20000a18 	.word	0x20000a18

080123a4 <free>:
 80123a4:	4b02      	ldr	r3, [pc, #8]	; (80123b0 <free+0xc>)
 80123a6:	4601      	mov	r1, r0
 80123a8:	6818      	ldr	r0, [r3, #0]
 80123aa:	f000 b82d 	b.w	8012408 <_free_r>
 80123ae:	bf00      	nop
 80123b0:	20000a18 	.word	0x20000a18

080123b4 <memcpy>:
 80123b4:	440a      	add	r2, r1
 80123b6:	4291      	cmp	r1, r2
 80123b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80123bc:	d100      	bne.n	80123c0 <memcpy+0xc>
 80123be:	4770      	bx	lr
 80123c0:	b510      	push	{r4, lr}
 80123c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123c6:	4291      	cmp	r1, r2
 80123c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80123cc:	d1f9      	bne.n	80123c2 <memcpy+0xe>
 80123ce:	bd10      	pop	{r4, pc}

080123d0 <memset>:
 80123d0:	4603      	mov	r3, r0
 80123d2:	4402      	add	r2, r0
 80123d4:	4293      	cmp	r3, r2
 80123d6:	d100      	bne.n	80123da <memset+0xa>
 80123d8:	4770      	bx	lr
 80123da:	f803 1b01 	strb.w	r1, [r3], #1
 80123de:	e7f9      	b.n	80123d4 <memset+0x4>

080123e0 <_calloc_r>:
 80123e0:	b570      	push	{r4, r5, r6, lr}
 80123e2:	fba1 5402 	umull	r5, r4, r1, r2
 80123e6:	b934      	cbnz	r4, 80123f6 <_calloc_r+0x16>
 80123e8:	4629      	mov	r1, r5
 80123ea:	f000 f875 	bl	80124d8 <_malloc_r>
 80123ee:	4606      	mov	r6, r0
 80123f0:	b928      	cbnz	r0, 80123fe <_calloc_r+0x1e>
 80123f2:	4630      	mov	r0, r6
 80123f4:	bd70      	pop	{r4, r5, r6, pc}
 80123f6:	220c      	movs	r2, #12
 80123f8:	2600      	movs	r6, #0
 80123fa:	6002      	str	r2, [r0, #0]
 80123fc:	e7f9      	b.n	80123f2 <_calloc_r+0x12>
 80123fe:	462a      	mov	r2, r5
 8012400:	4621      	mov	r1, r4
 8012402:	f7ff ffe5 	bl	80123d0 <memset>
 8012406:	e7f4      	b.n	80123f2 <_calloc_r+0x12>

08012408 <_free_r>:
 8012408:	b538      	push	{r3, r4, r5, lr}
 801240a:	4605      	mov	r5, r0
 801240c:	2900      	cmp	r1, #0
 801240e:	d040      	beq.n	8012492 <_free_r+0x8a>
 8012410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012414:	1f0c      	subs	r4, r1, #4
 8012416:	2b00      	cmp	r3, #0
 8012418:	bfb8      	it	lt
 801241a:	18e4      	addlt	r4, r4, r3
 801241c:	f000 ffac 	bl	8013378 <__malloc_lock>
 8012420:	4a1c      	ldr	r2, [pc, #112]	; (8012494 <_free_r+0x8c>)
 8012422:	6813      	ldr	r3, [r2, #0]
 8012424:	b933      	cbnz	r3, 8012434 <_free_r+0x2c>
 8012426:	6063      	str	r3, [r4, #4]
 8012428:	6014      	str	r4, [r2, #0]
 801242a:	4628      	mov	r0, r5
 801242c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012430:	f000 bfa8 	b.w	8013384 <__malloc_unlock>
 8012434:	42a3      	cmp	r3, r4
 8012436:	d908      	bls.n	801244a <_free_r+0x42>
 8012438:	6820      	ldr	r0, [r4, #0]
 801243a:	1821      	adds	r1, r4, r0
 801243c:	428b      	cmp	r3, r1
 801243e:	bf01      	itttt	eq
 8012440:	6819      	ldreq	r1, [r3, #0]
 8012442:	685b      	ldreq	r3, [r3, #4]
 8012444:	1809      	addeq	r1, r1, r0
 8012446:	6021      	streq	r1, [r4, #0]
 8012448:	e7ed      	b.n	8012426 <_free_r+0x1e>
 801244a:	461a      	mov	r2, r3
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	b10b      	cbz	r3, 8012454 <_free_r+0x4c>
 8012450:	42a3      	cmp	r3, r4
 8012452:	d9fa      	bls.n	801244a <_free_r+0x42>
 8012454:	6811      	ldr	r1, [r2, #0]
 8012456:	1850      	adds	r0, r2, r1
 8012458:	42a0      	cmp	r0, r4
 801245a:	d10b      	bne.n	8012474 <_free_r+0x6c>
 801245c:	6820      	ldr	r0, [r4, #0]
 801245e:	4401      	add	r1, r0
 8012460:	1850      	adds	r0, r2, r1
 8012462:	4283      	cmp	r3, r0
 8012464:	6011      	str	r1, [r2, #0]
 8012466:	d1e0      	bne.n	801242a <_free_r+0x22>
 8012468:	6818      	ldr	r0, [r3, #0]
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	4401      	add	r1, r0
 801246e:	6011      	str	r1, [r2, #0]
 8012470:	6053      	str	r3, [r2, #4]
 8012472:	e7da      	b.n	801242a <_free_r+0x22>
 8012474:	d902      	bls.n	801247c <_free_r+0x74>
 8012476:	230c      	movs	r3, #12
 8012478:	602b      	str	r3, [r5, #0]
 801247a:	e7d6      	b.n	801242a <_free_r+0x22>
 801247c:	6820      	ldr	r0, [r4, #0]
 801247e:	1821      	adds	r1, r4, r0
 8012480:	428b      	cmp	r3, r1
 8012482:	bf01      	itttt	eq
 8012484:	6819      	ldreq	r1, [r3, #0]
 8012486:	685b      	ldreq	r3, [r3, #4]
 8012488:	1809      	addeq	r1, r1, r0
 801248a:	6021      	streq	r1, [r4, #0]
 801248c:	6063      	str	r3, [r4, #4]
 801248e:	6054      	str	r4, [r2, #4]
 8012490:	e7cb      	b.n	801242a <_free_r+0x22>
 8012492:	bd38      	pop	{r3, r4, r5, pc}
 8012494:	20013658 	.word	0x20013658

08012498 <sbrk_aligned>:
 8012498:	b570      	push	{r4, r5, r6, lr}
 801249a:	4e0e      	ldr	r6, [pc, #56]	; (80124d4 <sbrk_aligned+0x3c>)
 801249c:	460c      	mov	r4, r1
 801249e:	6831      	ldr	r1, [r6, #0]
 80124a0:	4605      	mov	r5, r0
 80124a2:	b911      	cbnz	r1, 80124aa <sbrk_aligned+0x12>
 80124a4:	f000 fba6 	bl	8012bf4 <_sbrk_r>
 80124a8:	6030      	str	r0, [r6, #0]
 80124aa:	4621      	mov	r1, r4
 80124ac:	4628      	mov	r0, r5
 80124ae:	f000 fba1 	bl	8012bf4 <_sbrk_r>
 80124b2:	1c43      	adds	r3, r0, #1
 80124b4:	d00a      	beq.n	80124cc <sbrk_aligned+0x34>
 80124b6:	1cc4      	adds	r4, r0, #3
 80124b8:	f024 0403 	bic.w	r4, r4, #3
 80124bc:	42a0      	cmp	r0, r4
 80124be:	d007      	beq.n	80124d0 <sbrk_aligned+0x38>
 80124c0:	1a21      	subs	r1, r4, r0
 80124c2:	4628      	mov	r0, r5
 80124c4:	f000 fb96 	bl	8012bf4 <_sbrk_r>
 80124c8:	3001      	adds	r0, #1
 80124ca:	d101      	bne.n	80124d0 <sbrk_aligned+0x38>
 80124cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80124d0:	4620      	mov	r0, r4
 80124d2:	bd70      	pop	{r4, r5, r6, pc}
 80124d4:	2001365c 	.word	0x2001365c

080124d8 <_malloc_r>:
 80124d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124dc:	1ccd      	adds	r5, r1, #3
 80124de:	f025 0503 	bic.w	r5, r5, #3
 80124e2:	3508      	adds	r5, #8
 80124e4:	2d0c      	cmp	r5, #12
 80124e6:	bf38      	it	cc
 80124e8:	250c      	movcc	r5, #12
 80124ea:	2d00      	cmp	r5, #0
 80124ec:	4607      	mov	r7, r0
 80124ee:	db01      	blt.n	80124f4 <_malloc_r+0x1c>
 80124f0:	42a9      	cmp	r1, r5
 80124f2:	d905      	bls.n	8012500 <_malloc_r+0x28>
 80124f4:	230c      	movs	r3, #12
 80124f6:	2600      	movs	r6, #0
 80124f8:	603b      	str	r3, [r7, #0]
 80124fa:	4630      	mov	r0, r6
 80124fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012500:	4e2e      	ldr	r6, [pc, #184]	; (80125bc <_malloc_r+0xe4>)
 8012502:	f000 ff39 	bl	8013378 <__malloc_lock>
 8012506:	6833      	ldr	r3, [r6, #0]
 8012508:	461c      	mov	r4, r3
 801250a:	bb34      	cbnz	r4, 801255a <_malloc_r+0x82>
 801250c:	4629      	mov	r1, r5
 801250e:	4638      	mov	r0, r7
 8012510:	f7ff ffc2 	bl	8012498 <sbrk_aligned>
 8012514:	1c43      	adds	r3, r0, #1
 8012516:	4604      	mov	r4, r0
 8012518:	d14d      	bne.n	80125b6 <_malloc_r+0xde>
 801251a:	6834      	ldr	r4, [r6, #0]
 801251c:	4626      	mov	r6, r4
 801251e:	2e00      	cmp	r6, #0
 8012520:	d140      	bne.n	80125a4 <_malloc_r+0xcc>
 8012522:	6823      	ldr	r3, [r4, #0]
 8012524:	4631      	mov	r1, r6
 8012526:	4638      	mov	r0, r7
 8012528:	eb04 0803 	add.w	r8, r4, r3
 801252c:	f000 fb62 	bl	8012bf4 <_sbrk_r>
 8012530:	4580      	cmp	r8, r0
 8012532:	d13a      	bne.n	80125aa <_malloc_r+0xd2>
 8012534:	6821      	ldr	r1, [r4, #0]
 8012536:	3503      	adds	r5, #3
 8012538:	1a6d      	subs	r5, r5, r1
 801253a:	f025 0503 	bic.w	r5, r5, #3
 801253e:	3508      	adds	r5, #8
 8012540:	2d0c      	cmp	r5, #12
 8012542:	bf38      	it	cc
 8012544:	250c      	movcc	r5, #12
 8012546:	4638      	mov	r0, r7
 8012548:	4629      	mov	r1, r5
 801254a:	f7ff ffa5 	bl	8012498 <sbrk_aligned>
 801254e:	3001      	adds	r0, #1
 8012550:	d02b      	beq.n	80125aa <_malloc_r+0xd2>
 8012552:	6823      	ldr	r3, [r4, #0]
 8012554:	442b      	add	r3, r5
 8012556:	6023      	str	r3, [r4, #0]
 8012558:	e00e      	b.n	8012578 <_malloc_r+0xa0>
 801255a:	6822      	ldr	r2, [r4, #0]
 801255c:	1b52      	subs	r2, r2, r5
 801255e:	d41e      	bmi.n	801259e <_malloc_r+0xc6>
 8012560:	2a0b      	cmp	r2, #11
 8012562:	d916      	bls.n	8012592 <_malloc_r+0xba>
 8012564:	1961      	adds	r1, r4, r5
 8012566:	42a3      	cmp	r3, r4
 8012568:	6025      	str	r5, [r4, #0]
 801256a:	bf18      	it	ne
 801256c:	6059      	strne	r1, [r3, #4]
 801256e:	6863      	ldr	r3, [r4, #4]
 8012570:	bf08      	it	eq
 8012572:	6031      	streq	r1, [r6, #0]
 8012574:	5162      	str	r2, [r4, r5]
 8012576:	604b      	str	r3, [r1, #4]
 8012578:	4638      	mov	r0, r7
 801257a:	f104 060b 	add.w	r6, r4, #11
 801257e:	f000 ff01 	bl	8013384 <__malloc_unlock>
 8012582:	f026 0607 	bic.w	r6, r6, #7
 8012586:	1d23      	adds	r3, r4, #4
 8012588:	1af2      	subs	r2, r6, r3
 801258a:	d0b6      	beq.n	80124fa <_malloc_r+0x22>
 801258c:	1b9b      	subs	r3, r3, r6
 801258e:	50a3      	str	r3, [r4, r2]
 8012590:	e7b3      	b.n	80124fa <_malloc_r+0x22>
 8012592:	6862      	ldr	r2, [r4, #4]
 8012594:	42a3      	cmp	r3, r4
 8012596:	bf0c      	ite	eq
 8012598:	6032      	streq	r2, [r6, #0]
 801259a:	605a      	strne	r2, [r3, #4]
 801259c:	e7ec      	b.n	8012578 <_malloc_r+0xa0>
 801259e:	4623      	mov	r3, r4
 80125a0:	6864      	ldr	r4, [r4, #4]
 80125a2:	e7b2      	b.n	801250a <_malloc_r+0x32>
 80125a4:	4634      	mov	r4, r6
 80125a6:	6876      	ldr	r6, [r6, #4]
 80125a8:	e7b9      	b.n	801251e <_malloc_r+0x46>
 80125aa:	230c      	movs	r3, #12
 80125ac:	4638      	mov	r0, r7
 80125ae:	603b      	str	r3, [r7, #0]
 80125b0:	f000 fee8 	bl	8013384 <__malloc_unlock>
 80125b4:	e7a1      	b.n	80124fa <_malloc_r+0x22>
 80125b6:	6025      	str	r5, [r4, #0]
 80125b8:	e7de      	b.n	8012578 <_malloc_r+0xa0>
 80125ba:	bf00      	nop
 80125bc:	20013658 	.word	0x20013658

080125c0 <__sfputc_r>:
 80125c0:	6893      	ldr	r3, [r2, #8]
 80125c2:	b410      	push	{r4}
 80125c4:	3b01      	subs	r3, #1
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	6093      	str	r3, [r2, #8]
 80125ca:	da07      	bge.n	80125dc <__sfputc_r+0x1c>
 80125cc:	6994      	ldr	r4, [r2, #24]
 80125ce:	42a3      	cmp	r3, r4
 80125d0:	db01      	blt.n	80125d6 <__sfputc_r+0x16>
 80125d2:	290a      	cmp	r1, #10
 80125d4:	d102      	bne.n	80125dc <__sfputc_r+0x1c>
 80125d6:	bc10      	pop	{r4}
 80125d8:	f000 bb98 	b.w	8012d0c <__swbuf_r>
 80125dc:	6813      	ldr	r3, [r2, #0]
 80125de:	1c58      	adds	r0, r3, #1
 80125e0:	6010      	str	r0, [r2, #0]
 80125e2:	7019      	strb	r1, [r3, #0]
 80125e4:	4608      	mov	r0, r1
 80125e6:	bc10      	pop	{r4}
 80125e8:	4770      	bx	lr

080125ea <__sfputs_r>:
 80125ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ec:	4606      	mov	r6, r0
 80125ee:	460f      	mov	r7, r1
 80125f0:	4614      	mov	r4, r2
 80125f2:	18d5      	adds	r5, r2, r3
 80125f4:	42ac      	cmp	r4, r5
 80125f6:	d101      	bne.n	80125fc <__sfputs_r+0x12>
 80125f8:	2000      	movs	r0, #0
 80125fa:	e007      	b.n	801260c <__sfputs_r+0x22>
 80125fc:	463a      	mov	r2, r7
 80125fe:	4630      	mov	r0, r6
 8012600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012604:	f7ff ffdc 	bl	80125c0 <__sfputc_r>
 8012608:	1c43      	adds	r3, r0, #1
 801260a:	d1f3      	bne.n	80125f4 <__sfputs_r+0xa>
 801260c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012610 <_vfiprintf_r>:
 8012610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012614:	460d      	mov	r5, r1
 8012616:	4614      	mov	r4, r2
 8012618:	4698      	mov	r8, r3
 801261a:	4606      	mov	r6, r0
 801261c:	b09d      	sub	sp, #116	; 0x74
 801261e:	b118      	cbz	r0, 8012628 <_vfiprintf_r+0x18>
 8012620:	6983      	ldr	r3, [r0, #24]
 8012622:	b90b      	cbnz	r3, 8012628 <_vfiprintf_r+0x18>
 8012624:	f000 fd6a 	bl	80130fc <__sinit>
 8012628:	4b89      	ldr	r3, [pc, #548]	; (8012850 <_vfiprintf_r+0x240>)
 801262a:	429d      	cmp	r5, r3
 801262c:	d11b      	bne.n	8012666 <_vfiprintf_r+0x56>
 801262e:	6875      	ldr	r5, [r6, #4]
 8012630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012632:	07d9      	lsls	r1, r3, #31
 8012634:	d405      	bmi.n	8012642 <_vfiprintf_r+0x32>
 8012636:	89ab      	ldrh	r3, [r5, #12]
 8012638:	059a      	lsls	r2, r3, #22
 801263a:	d402      	bmi.n	8012642 <_vfiprintf_r+0x32>
 801263c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801263e:	f7ff fea6 	bl	801238e <__retarget_lock_acquire_recursive>
 8012642:	89ab      	ldrh	r3, [r5, #12]
 8012644:	071b      	lsls	r3, r3, #28
 8012646:	d501      	bpl.n	801264c <_vfiprintf_r+0x3c>
 8012648:	692b      	ldr	r3, [r5, #16]
 801264a:	b9eb      	cbnz	r3, 8012688 <_vfiprintf_r+0x78>
 801264c:	4629      	mov	r1, r5
 801264e:	4630      	mov	r0, r6
 8012650:	f000 fbc0 	bl	8012dd4 <__swsetup_r>
 8012654:	b1c0      	cbz	r0, 8012688 <_vfiprintf_r+0x78>
 8012656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012658:	07dc      	lsls	r4, r3, #31
 801265a:	d50e      	bpl.n	801267a <_vfiprintf_r+0x6a>
 801265c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012660:	b01d      	add	sp, #116	; 0x74
 8012662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012666:	4b7b      	ldr	r3, [pc, #492]	; (8012854 <_vfiprintf_r+0x244>)
 8012668:	429d      	cmp	r5, r3
 801266a:	d101      	bne.n	8012670 <_vfiprintf_r+0x60>
 801266c:	68b5      	ldr	r5, [r6, #8]
 801266e:	e7df      	b.n	8012630 <_vfiprintf_r+0x20>
 8012670:	4b79      	ldr	r3, [pc, #484]	; (8012858 <_vfiprintf_r+0x248>)
 8012672:	429d      	cmp	r5, r3
 8012674:	bf08      	it	eq
 8012676:	68f5      	ldreq	r5, [r6, #12]
 8012678:	e7da      	b.n	8012630 <_vfiprintf_r+0x20>
 801267a:	89ab      	ldrh	r3, [r5, #12]
 801267c:	0598      	lsls	r0, r3, #22
 801267e:	d4ed      	bmi.n	801265c <_vfiprintf_r+0x4c>
 8012680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012682:	f7ff fe85 	bl	8012390 <__retarget_lock_release_recursive>
 8012686:	e7e9      	b.n	801265c <_vfiprintf_r+0x4c>
 8012688:	2300      	movs	r3, #0
 801268a:	9309      	str	r3, [sp, #36]	; 0x24
 801268c:	2320      	movs	r3, #32
 801268e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012692:	2330      	movs	r3, #48	; 0x30
 8012694:	f04f 0901 	mov.w	r9, #1
 8012698:	f8cd 800c 	str.w	r8, [sp, #12]
 801269c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801285c <_vfiprintf_r+0x24c>
 80126a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126a4:	4623      	mov	r3, r4
 80126a6:	469a      	mov	sl, r3
 80126a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126ac:	b10a      	cbz	r2, 80126b2 <_vfiprintf_r+0xa2>
 80126ae:	2a25      	cmp	r2, #37	; 0x25
 80126b0:	d1f9      	bne.n	80126a6 <_vfiprintf_r+0x96>
 80126b2:	ebba 0b04 	subs.w	fp, sl, r4
 80126b6:	d00b      	beq.n	80126d0 <_vfiprintf_r+0xc0>
 80126b8:	465b      	mov	r3, fp
 80126ba:	4622      	mov	r2, r4
 80126bc:	4629      	mov	r1, r5
 80126be:	4630      	mov	r0, r6
 80126c0:	f7ff ff93 	bl	80125ea <__sfputs_r>
 80126c4:	3001      	adds	r0, #1
 80126c6:	f000 80aa 	beq.w	801281e <_vfiprintf_r+0x20e>
 80126ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126cc:	445a      	add	r2, fp
 80126ce:	9209      	str	r2, [sp, #36]	; 0x24
 80126d0:	f89a 3000 	ldrb.w	r3, [sl]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	f000 80a2 	beq.w	801281e <_vfiprintf_r+0x20e>
 80126da:	2300      	movs	r3, #0
 80126dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80126e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126e4:	f10a 0a01 	add.w	sl, sl, #1
 80126e8:	9304      	str	r3, [sp, #16]
 80126ea:	9307      	str	r3, [sp, #28]
 80126ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80126f0:	931a      	str	r3, [sp, #104]	; 0x68
 80126f2:	4654      	mov	r4, sl
 80126f4:	2205      	movs	r2, #5
 80126f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126fa:	4858      	ldr	r0, [pc, #352]	; (801285c <_vfiprintf_r+0x24c>)
 80126fc:	f000 fe14 	bl	8013328 <memchr>
 8012700:	9a04      	ldr	r2, [sp, #16]
 8012702:	b9d8      	cbnz	r0, 801273c <_vfiprintf_r+0x12c>
 8012704:	06d1      	lsls	r1, r2, #27
 8012706:	bf44      	itt	mi
 8012708:	2320      	movmi	r3, #32
 801270a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801270e:	0713      	lsls	r3, r2, #28
 8012710:	bf44      	itt	mi
 8012712:	232b      	movmi	r3, #43	; 0x2b
 8012714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012718:	f89a 3000 	ldrb.w	r3, [sl]
 801271c:	2b2a      	cmp	r3, #42	; 0x2a
 801271e:	d015      	beq.n	801274c <_vfiprintf_r+0x13c>
 8012720:	4654      	mov	r4, sl
 8012722:	2000      	movs	r0, #0
 8012724:	f04f 0c0a 	mov.w	ip, #10
 8012728:	9a07      	ldr	r2, [sp, #28]
 801272a:	4621      	mov	r1, r4
 801272c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012730:	3b30      	subs	r3, #48	; 0x30
 8012732:	2b09      	cmp	r3, #9
 8012734:	d94e      	bls.n	80127d4 <_vfiprintf_r+0x1c4>
 8012736:	b1b0      	cbz	r0, 8012766 <_vfiprintf_r+0x156>
 8012738:	9207      	str	r2, [sp, #28]
 801273a:	e014      	b.n	8012766 <_vfiprintf_r+0x156>
 801273c:	eba0 0308 	sub.w	r3, r0, r8
 8012740:	fa09 f303 	lsl.w	r3, r9, r3
 8012744:	4313      	orrs	r3, r2
 8012746:	46a2      	mov	sl, r4
 8012748:	9304      	str	r3, [sp, #16]
 801274a:	e7d2      	b.n	80126f2 <_vfiprintf_r+0xe2>
 801274c:	9b03      	ldr	r3, [sp, #12]
 801274e:	1d19      	adds	r1, r3, #4
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	9103      	str	r1, [sp, #12]
 8012754:	2b00      	cmp	r3, #0
 8012756:	bfbb      	ittet	lt
 8012758:	425b      	neglt	r3, r3
 801275a:	f042 0202 	orrlt.w	r2, r2, #2
 801275e:	9307      	strge	r3, [sp, #28]
 8012760:	9307      	strlt	r3, [sp, #28]
 8012762:	bfb8      	it	lt
 8012764:	9204      	strlt	r2, [sp, #16]
 8012766:	7823      	ldrb	r3, [r4, #0]
 8012768:	2b2e      	cmp	r3, #46	; 0x2e
 801276a:	d10c      	bne.n	8012786 <_vfiprintf_r+0x176>
 801276c:	7863      	ldrb	r3, [r4, #1]
 801276e:	2b2a      	cmp	r3, #42	; 0x2a
 8012770:	d135      	bne.n	80127de <_vfiprintf_r+0x1ce>
 8012772:	9b03      	ldr	r3, [sp, #12]
 8012774:	3402      	adds	r4, #2
 8012776:	1d1a      	adds	r2, r3, #4
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	9203      	str	r2, [sp, #12]
 801277c:	2b00      	cmp	r3, #0
 801277e:	bfb8      	it	lt
 8012780:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012784:	9305      	str	r3, [sp, #20]
 8012786:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8012860 <_vfiprintf_r+0x250>
 801278a:	2203      	movs	r2, #3
 801278c:	4650      	mov	r0, sl
 801278e:	7821      	ldrb	r1, [r4, #0]
 8012790:	f000 fdca 	bl	8013328 <memchr>
 8012794:	b140      	cbz	r0, 80127a8 <_vfiprintf_r+0x198>
 8012796:	2340      	movs	r3, #64	; 0x40
 8012798:	eba0 000a 	sub.w	r0, r0, sl
 801279c:	fa03 f000 	lsl.w	r0, r3, r0
 80127a0:	9b04      	ldr	r3, [sp, #16]
 80127a2:	3401      	adds	r4, #1
 80127a4:	4303      	orrs	r3, r0
 80127a6:	9304      	str	r3, [sp, #16]
 80127a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127ac:	2206      	movs	r2, #6
 80127ae:	482d      	ldr	r0, [pc, #180]	; (8012864 <_vfiprintf_r+0x254>)
 80127b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80127b4:	f000 fdb8 	bl	8013328 <memchr>
 80127b8:	2800      	cmp	r0, #0
 80127ba:	d03f      	beq.n	801283c <_vfiprintf_r+0x22c>
 80127bc:	4b2a      	ldr	r3, [pc, #168]	; (8012868 <_vfiprintf_r+0x258>)
 80127be:	bb1b      	cbnz	r3, 8012808 <_vfiprintf_r+0x1f8>
 80127c0:	9b03      	ldr	r3, [sp, #12]
 80127c2:	3307      	adds	r3, #7
 80127c4:	f023 0307 	bic.w	r3, r3, #7
 80127c8:	3308      	adds	r3, #8
 80127ca:	9303      	str	r3, [sp, #12]
 80127cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ce:	443b      	add	r3, r7
 80127d0:	9309      	str	r3, [sp, #36]	; 0x24
 80127d2:	e767      	b.n	80126a4 <_vfiprintf_r+0x94>
 80127d4:	460c      	mov	r4, r1
 80127d6:	2001      	movs	r0, #1
 80127d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80127dc:	e7a5      	b.n	801272a <_vfiprintf_r+0x11a>
 80127de:	2300      	movs	r3, #0
 80127e0:	f04f 0c0a 	mov.w	ip, #10
 80127e4:	4619      	mov	r1, r3
 80127e6:	3401      	adds	r4, #1
 80127e8:	9305      	str	r3, [sp, #20]
 80127ea:	4620      	mov	r0, r4
 80127ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127f0:	3a30      	subs	r2, #48	; 0x30
 80127f2:	2a09      	cmp	r2, #9
 80127f4:	d903      	bls.n	80127fe <_vfiprintf_r+0x1ee>
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d0c5      	beq.n	8012786 <_vfiprintf_r+0x176>
 80127fa:	9105      	str	r1, [sp, #20]
 80127fc:	e7c3      	b.n	8012786 <_vfiprintf_r+0x176>
 80127fe:	4604      	mov	r4, r0
 8012800:	2301      	movs	r3, #1
 8012802:	fb0c 2101 	mla	r1, ip, r1, r2
 8012806:	e7f0      	b.n	80127ea <_vfiprintf_r+0x1da>
 8012808:	ab03      	add	r3, sp, #12
 801280a:	9300      	str	r3, [sp, #0]
 801280c:	462a      	mov	r2, r5
 801280e:	4630      	mov	r0, r6
 8012810:	4b16      	ldr	r3, [pc, #88]	; (801286c <_vfiprintf_r+0x25c>)
 8012812:	a904      	add	r1, sp, #16
 8012814:	f3af 8000 	nop.w
 8012818:	4607      	mov	r7, r0
 801281a:	1c78      	adds	r0, r7, #1
 801281c:	d1d6      	bne.n	80127cc <_vfiprintf_r+0x1bc>
 801281e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012820:	07d9      	lsls	r1, r3, #31
 8012822:	d405      	bmi.n	8012830 <_vfiprintf_r+0x220>
 8012824:	89ab      	ldrh	r3, [r5, #12]
 8012826:	059a      	lsls	r2, r3, #22
 8012828:	d402      	bmi.n	8012830 <_vfiprintf_r+0x220>
 801282a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801282c:	f7ff fdb0 	bl	8012390 <__retarget_lock_release_recursive>
 8012830:	89ab      	ldrh	r3, [r5, #12]
 8012832:	065b      	lsls	r3, r3, #25
 8012834:	f53f af12 	bmi.w	801265c <_vfiprintf_r+0x4c>
 8012838:	9809      	ldr	r0, [sp, #36]	; 0x24
 801283a:	e711      	b.n	8012660 <_vfiprintf_r+0x50>
 801283c:	ab03      	add	r3, sp, #12
 801283e:	9300      	str	r3, [sp, #0]
 8012840:	462a      	mov	r2, r5
 8012842:	4630      	mov	r0, r6
 8012844:	4b09      	ldr	r3, [pc, #36]	; (801286c <_vfiprintf_r+0x25c>)
 8012846:	a904      	add	r1, sp, #16
 8012848:	f000 f882 	bl	8012950 <_printf_i>
 801284c:	e7e4      	b.n	8012818 <_vfiprintf_r+0x208>
 801284e:	bf00      	nop
 8012850:	08014c7c 	.word	0x08014c7c
 8012854:	08014c9c 	.word	0x08014c9c
 8012858:	08014c5c 	.word	0x08014c5c
 801285c:	08014c28 	.word	0x08014c28
 8012860:	08014c2e 	.word	0x08014c2e
 8012864:	08014c32 	.word	0x08014c32
 8012868:	00000000 	.word	0x00000000
 801286c:	080125eb 	.word	0x080125eb

08012870 <_printf_common>:
 8012870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012874:	4616      	mov	r6, r2
 8012876:	4699      	mov	r9, r3
 8012878:	688a      	ldr	r2, [r1, #8]
 801287a:	690b      	ldr	r3, [r1, #16]
 801287c:	4607      	mov	r7, r0
 801287e:	4293      	cmp	r3, r2
 8012880:	bfb8      	it	lt
 8012882:	4613      	movlt	r3, r2
 8012884:	6033      	str	r3, [r6, #0]
 8012886:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801288a:	460c      	mov	r4, r1
 801288c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012890:	b10a      	cbz	r2, 8012896 <_printf_common+0x26>
 8012892:	3301      	adds	r3, #1
 8012894:	6033      	str	r3, [r6, #0]
 8012896:	6823      	ldr	r3, [r4, #0]
 8012898:	0699      	lsls	r1, r3, #26
 801289a:	bf42      	ittt	mi
 801289c:	6833      	ldrmi	r3, [r6, #0]
 801289e:	3302      	addmi	r3, #2
 80128a0:	6033      	strmi	r3, [r6, #0]
 80128a2:	6825      	ldr	r5, [r4, #0]
 80128a4:	f015 0506 	ands.w	r5, r5, #6
 80128a8:	d106      	bne.n	80128b8 <_printf_common+0x48>
 80128aa:	f104 0a19 	add.w	sl, r4, #25
 80128ae:	68e3      	ldr	r3, [r4, #12]
 80128b0:	6832      	ldr	r2, [r6, #0]
 80128b2:	1a9b      	subs	r3, r3, r2
 80128b4:	42ab      	cmp	r3, r5
 80128b6:	dc28      	bgt.n	801290a <_printf_common+0x9a>
 80128b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80128bc:	1e13      	subs	r3, r2, #0
 80128be:	6822      	ldr	r2, [r4, #0]
 80128c0:	bf18      	it	ne
 80128c2:	2301      	movne	r3, #1
 80128c4:	0692      	lsls	r2, r2, #26
 80128c6:	d42d      	bmi.n	8012924 <_printf_common+0xb4>
 80128c8:	4649      	mov	r1, r9
 80128ca:	4638      	mov	r0, r7
 80128cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80128d0:	47c0      	blx	r8
 80128d2:	3001      	adds	r0, #1
 80128d4:	d020      	beq.n	8012918 <_printf_common+0xa8>
 80128d6:	6823      	ldr	r3, [r4, #0]
 80128d8:	68e5      	ldr	r5, [r4, #12]
 80128da:	f003 0306 	and.w	r3, r3, #6
 80128de:	2b04      	cmp	r3, #4
 80128e0:	bf18      	it	ne
 80128e2:	2500      	movne	r5, #0
 80128e4:	6832      	ldr	r2, [r6, #0]
 80128e6:	f04f 0600 	mov.w	r6, #0
 80128ea:	68a3      	ldr	r3, [r4, #8]
 80128ec:	bf08      	it	eq
 80128ee:	1aad      	subeq	r5, r5, r2
 80128f0:	6922      	ldr	r2, [r4, #16]
 80128f2:	bf08      	it	eq
 80128f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80128f8:	4293      	cmp	r3, r2
 80128fa:	bfc4      	itt	gt
 80128fc:	1a9b      	subgt	r3, r3, r2
 80128fe:	18ed      	addgt	r5, r5, r3
 8012900:	341a      	adds	r4, #26
 8012902:	42b5      	cmp	r5, r6
 8012904:	d11a      	bne.n	801293c <_printf_common+0xcc>
 8012906:	2000      	movs	r0, #0
 8012908:	e008      	b.n	801291c <_printf_common+0xac>
 801290a:	2301      	movs	r3, #1
 801290c:	4652      	mov	r2, sl
 801290e:	4649      	mov	r1, r9
 8012910:	4638      	mov	r0, r7
 8012912:	47c0      	blx	r8
 8012914:	3001      	adds	r0, #1
 8012916:	d103      	bne.n	8012920 <_printf_common+0xb0>
 8012918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801291c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012920:	3501      	adds	r5, #1
 8012922:	e7c4      	b.n	80128ae <_printf_common+0x3e>
 8012924:	2030      	movs	r0, #48	; 0x30
 8012926:	18e1      	adds	r1, r4, r3
 8012928:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801292c:	1c5a      	adds	r2, r3, #1
 801292e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012932:	4422      	add	r2, r4
 8012934:	3302      	adds	r3, #2
 8012936:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801293a:	e7c5      	b.n	80128c8 <_printf_common+0x58>
 801293c:	2301      	movs	r3, #1
 801293e:	4622      	mov	r2, r4
 8012940:	4649      	mov	r1, r9
 8012942:	4638      	mov	r0, r7
 8012944:	47c0      	blx	r8
 8012946:	3001      	adds	r0, #1
 8012948:	d0e6      	beq.n	8012918 <_printf_common+0xa8>
 801294a:	3601      	adds	r6, #1
 801294c:	e7d9      	b.n	8012902 <_printf_common+0x92>
	...

08012950 <_printf_i>:
 8012950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012954:	7e0f      	ldrb	r7, [r1, #24]
 8012956:	4691      	mov	r9, r2
 8012958:	2f78      	cmp	r7, #120	; 0x78
 801295a:	4680      	mov	r8, r0
 801295c:	460c      	mov	r4, r1
 801295e:	469a      	mov	sl, r3
 8012960:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012966:	d807      	bhi.n	8012978 <_printf_i+0x28>
 8012968:	2f62      	cmp	r7, #98	; 0x62
 801296a:	d80a      	bhi.n	8012982 <_printf_i+0x32>
 801296c:	2f00      	cmp	r7, #0
 801296e:	f000 80d9 	beq.w	8012b24 <_printf_i+0x1d4>
 8012972:	2f58      	cmp	r7, #88	; 0x58
 8012974:	f000 80a4 	beq.w	8012ac0 <_printf_i+0x170>
 8012978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801297c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012980:	e03a      	b.n	80129f8 <_printf_i+0xa8>
 8012982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012986:	2b15      	cmp	r3, #21
 8012988:	d8f6      	bhi.n	8012978 <_printf_i+0x28>
 801298a:	a101      	add	r1, pc, #4	; (adr r1, 8012990 <_printf_i+0x40>)
 801298c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012990:	080129e9 	.word	0x080129e9
 8012994:	080129fd 	.word	0x080129fd
 8012998:	08012979 	.word	0x08012979
 801299c:	08012979 	.word	0x08012979
 80129a0:	08012979 	.word	0x08012979
 80129a4:	08012979 	.word	0x08012979
 80129a8:	080129fd 	.word	0x080129fd
 80129ac:	08012979 	.word	0x08012979
 80129b0:	08012979 	.word	0x08012979
 80129b4:	08012979 	.word	0x08012979
 80129b8:	08012979 	.word	0x08012979
 80129bc:	08012b0b 	.word	0x08012b0b
 80129c0:	08012a2d 	.word	0x08012a2d
 80129c4:	08012aed 	.word	0x08012aed
 80129c8:	08012979 	.word	0x08012979
 80129cc:	08012979 	.word	0x08012979
 80129d0:	08012b2d 	.word	0x08012b2d
 80129d4:	08012979 	.word	0x08012979
 80129d8:	08012a2d 	.word	0x08012a2d
 80129dc:	08012979 	.word	0x08012979
 80129e0:	08012979 	.word	0x08012979
 80129e4:	08012af5 	.word	0x08012af5
 80129e8:	682b      	ldr	r3, [r5, #0]
 80129ea:	1d1a      	adds	r2, r3, #4
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	602a      	str	r2, [r5, #0]
 80129f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80129f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80129f8:	2301      	movs	r3, #1
 80129fa:	e0a4      	b.n	8012b46 <_printf_i+0x1f6>
 80129fc:	6820      	ldr	r0, [r4, #0]
 80129fe:	6829      	ldr	r1, [r5, #0]
 8012a00:	0606      	lsls	r6, r0, #24
 8012a02:	f101 0304 	add.w	r3, r1, #4
 8012a06:	d50a      	bpl.n	8012a1e <_printf_i+0xce>
 8012a08:	680e      	ldr	r6, [r1, #0]
 8012a0a:	602b      	str	r3, [r5, #0]
 8012a0c:	2e00      	cmp	r6, #0
 8012a0e:	da03      	bge.n	8012a18 <_printf_i+0xc8>
 8012a10:	232d      	movs	r3, #45	; 0x2d
 8012a12:	4276      	negs	r6, r6
 8012a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a18:	230a      	movs	r3, #10
 8012a1a:	485e      	ldr	r0, [pc, #376]	; (8012b94 <_printf_i+0x244>)
 8012a1c:	e019      	b.n	8012a52 <_printf_i+0x102>
 8012a1e:	680e      	ldr	r6, [r1, #0]
 8012a20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012a24:	602b      	str	r3, [r5, #0]
 8012a26:	bf18      	it	ne
 8012a28:	b236      	sxthne	r6, r6
 8012a2a:	e7ef      	b.n	8012a0c <_printf_i+0xbc>
 8012a2c:	682b      	ldr	r3, [r5, #0]
 8012a2e:	6820      	ldr	r0, [r4, #0]
 8012a30:	1d19      	adds	r1, r3, #4
 8012a32:	6029      	str	r1, [r5, #0]
 8012a34:	0601      	lsls	r1, r0, #24
 8012a36:	d501      	bpl.n	8012a3c <_printf_i+0xec>
 8012a38:	681e      	ldr	r6, [r3, #0]
 8012a3a:	e002      	b.n	8012a42 <_printf_i+0xf2>
 8012a3c:	0646      	lsls	r6, r0, #25
 8012a3e:	d5fb      	bpl.n	8012a38 <_printf_i+0xe8>
 8012a40:	881e      	ldrh	r6, [r3, #0]
 8012a42:	2f6f      	cmp	r7, #111	; 0x6f
 8012a44:	bf0c      	ite	eq
 8012a46:	2308      	moveq	r3, #8
 8012a48:	230a      	movne	r3, #10
 8012a4a:	4852      	ldr	r0, [pc, #328]	; (8012b94 <_printf_i+0x244>)
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012a52:	6865      	ldr	r5, [r4, #4]
 8012a54:	2d00      	cmp	r5, #0
 8012a56:	bfa8      	it	ge
 8012a58:	6821      	ldrge	r1, [r4, #0]
 8012a5a:	60a5      	str	r5, [r4, #8]
 8012a5c:	bfa4      	itt	ge
 8012a5e:	f021 0104 	bicge.w	r1, r1, #4
 8012a62:	6021      	strge	r1, [r4, #0]
 8012a64:	b90e      	cbnz	r6, 8012a6a <_printf_i+0x11a>
 8012a66:	2d00      	cmp	r5, #0
 8012a68:	d04d      	beq.n	8012b06 <_printf_i+0x1b6>
 8012a6a:	4615      	mov	r5, r2
 8012a6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8012a70:	fb03 6711 	mls	r7, r3, r1, r6
 8012a74:	5dc7      	ldrb	r7, [r0, r7]
 8012a76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012a7a:	4637      	mov	r7, r6
 8012a7c:	42bb      	cmp	r3, r7
 8012a7e:	460e      	mov	r6, r1
 8012a80:	d9f4      	bls.n	8012a6c <_printf_i+0x11c>
 8012a82:	2b08      	cmp	r3, #8
 8012a84:	d10b      	bne.n	8012a9e <_printf_i+0x14e>
 8012a86:	6823      	ldr	r3, [r4, #0]
 8012a88:	07de      	lsls	r6, r3, #31
 8012a8a:	d508      	bpl.n	8012a9e <_printf_i+0x14e>
 8012a8c:	6923      	ldr	r3, [r4, #16]
 8012a8e:	6861      	ldr	r1, [r4, #4]
 8012a90:	4299      	cmp	r1, r3
 8012a92:	bfde      	ittt	le
 8012a94:	2330      	movle	r3, #48	; 0x30
 8012a96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012a9a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012a9e:	1b52      	subs	r2, r2, r5
 8012aa0:	6122      	str	r2, [r4, #16]
 8012aa2:	464b      	mov	r3, r9
 8012aa4:	4621      	mov	r1, r4
 8012aa6:	4640      	mov	r0, r8
 8012aa8:	f8cd a000 	str.w	sl, [sp]
 8012aac:	aa03      	add	r2, sp, #12
 8012aae:	f7ff fedf 	bl	8012870 <_printf_common>
 8012ab2:	3001      	adds	r0, #1
 8012ab4:	d14c      	bne.n	8012b50 <_printf_i+0x200>
 8012ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012aba:	b004      	add	sp, #16
 8012abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ac0:	4834      	ldr	r0, [pc, #208]	; (8012b94 <_printf_i+0x244>)
 8012ac2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012ac6:	6829      	ldr	r1, [r5, #0]
 8012ac8:	6823      	ldr	r3, [r4, #0]
 8012aca:	f851 6b04 	ldr.w	r6, [r1], #4
 8012ace:	6029      	str	r1, [r5, #0]
 8012ad0:	061d      	lsls	r5, r3, #24
 8012ad2:	d514      	bpl.n	8012afe <_printf_i+0x1ae>
 8012ad4:	07df      	lsls	r7, r3, #31
 8012ad6:	bf44      	itt	mi
 8012ad8:	f043 0320 	orrmi.w	r3, r3, #32
 8012adc:	6023      	strmi	r3, [r4, #0]
 8012ade:	b91e      	cbnz	r6, 8012ae8 <_printf_i+0x198>
 8012ae0:	6823      	ldr	r3, [r4, #0]
 8012ae2:	f023 0320 	bic.w	r3, r3, #32
 8012ae6:	6023      	str	r3, [r4, #0]
 8012ae8:	2310      	movs	r3, #16
 8012aea:	e7af      	b.n	8012a4c <_printf_i+0xfc>
 8012aec:	6823      	ldr	r3, [r4, #0]
 8012aee:	f043 0320 	orr.w	r3, r3, #32
 8012af2:	6023      	str	r3, [r4, #0]
 8012af4:	2378      	movs	r3, #120	; 0x78
 8012af6:	4828      	ldr	r0, [pc, #160]	; (8012b98 <_printf_i+0x248>)
 8012af8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012afc:	e7e3      	b.n	8012ac6 <_printf_i+0x176>
 8012afe:	0659      	lsls	r1, r3, #25
 8012b00:	bf48      	it	mi
 8012b02:	b2b6      	uxthmi	r6, r6
 8012b04:	e7e6      	b.n	8012ad4 <_printf_i+0x184>
 8012b06:	4615      	mov	r5, r2
 8012b08:	e7bb      	b.n	8012a82 <_printf_i+0x132>
 8012b0a:	682b      	ldr	r3, [r5, #0]
 8012b0c:	6826      	ldr	r6, [r4, #0]
 8012b0e:	1d18      	adds	r0, r3, #4
 8012b10:	6961      	ldr	r1, [r4, #20]
 8012b12:	6028      	str	r0, [r5, #0]
 8012b14:	0635      	lsls	r5, r6, #24
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	d501      	bpl.n	8012b1e <_printf_i+0x1ce>
 8012b1a:	6019      	str	r1, [r3, #0]
 8012b1c:	e002      	b.n	8012b24 <_printf_i+0x1d4>
 8012b1e:	0670      	lsls	r0, r6, #25
 8012b20:	d5fb      	bpl.n	8012b1a <_printf_i+0x1ca>
 8012b22:	8019      	strh	r1, [r3, #0]
 8012b24:	2300      	movs	r3, #0
 8012b26:	4615      	mov	r5, r2
 8012b28:	6123      	str	r3, [r4, #16]
 8012b2a:	e7ba      	b.n	8012aa2 <_printf_i+0x152>
 8012b2c:	682b      	ldr	r3, [r5, #0]
 8012b2e:	2100      	movs	r1, #0
 8012b30:	1d1a      	adds	r2, r3, #4
 8012b32:	602a      	str	r2, [r5, #0]
 8012b34:	681d      	ldr	r5, [r3, #0]
 8012b36:	6862      	ldr	r2, [r4, #4]
 8012b38:	4628      	mov	r0, r5
 8012b3a:	f000 fbf5 	bl	8013328 <memchr>
 8012b3e:	b108      	cbz	r0, 8012b44 <_printf_i+0x1f4>
 8012b40:	1b40      	subs	r0, r0, r5
 8012b42:	6060      	str	r0, [r4, #4]
 8012b44:	6863      	ldr	r3, [r4, #4]
 8012b46:	6123      	str	r3, [r4, #16]
 8012b48:	2300      	movs	r3, #0
 8012b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b4e:	e7a8      	b.n	8012aa2 <_printf_i+0x152>
 8012b50:	462a      	mov	r2, r5
 8012b52:	4649      	mov	r1, r9
 8012b54:	4640      	mov	r0, r8
 8012b56:	6923      	ldr	r3, [r4, #16]
 8012b58:	47d0      	blx	sl
 8012b5a:	3001      	adds	r0, #1
 8012b5c:	d0ab      	beq.n	8012ab6 <_printf_i+0x166>
 8012b5e:	6823      	ldr	r3, [r4, #0]
 8012b60:	079b      	lsls	r3, r3, #30
 8012b62:	d413      	bmi.n	8012b8c <_printf_i+0x23c>
 8012b64:	68e0      	ldr	r0, [r4, #12]
 8012b66:	9b03      	ldr	r3, [sp, #12]
 8012b68:	4298      	cmp	r0, r3
 8012b6a:	bfb8      	it	lt
 8012b6c:	4618      	movlt	r0, r3
 8012b6e:	e7a4      	b.n	8012aba <_printf_i+0x16a>
 8012b70:	2301      	movs	r3, #1
 8012b72:	4632      	mov	r2, r6
 8012b74:	4649      	mov	r1, r9
 8012b76:	4640      	mov	r0, r8
 8012b78:	47d0      	blx	sl
 8012b7a:	3001      	adds	r0, #1
 8012b7c:	d09b      	beq.n	8012ab6 <_printf_i+0x166>
 8012b7e:	3501      	adds	r5, #1
 8012b80:	68e3      	ldr	r3, [r4, #12]
 8012b82:	9903      	ldr	r1, [sp, #12]
 8012b84:	1a5b      	subs	r3, r3, r1
 8012b86:	42ab      	cmp	r3, r5
 8012b88:	dcf2      	bgt.n	8012b70 <_printf_i+0x220>
 8012b8a:	e7eb      	b.n	8012b64 <_printf_i+0x214>
 8012b8c:	2500      	movs	r5, #0
 8012b8e:	f104 0619 	add.w	r6, r4, #25
 8012b92:	e7f5      	b.n	8012b80 <_printf_i+0x230>
 8012b94:	08014c39 	.word	0x08014c39
 8012b98:	08014c4a 	.word	0x08014c4a

08012b9c <iprintf>:
 8012b9c:	b40f      	push	{r0, r1, r2, r3}
 8012b9e:	4b0a      	ldr	r3, [pc, #40]	; (8012bc8 <iprintf+0x2c>)
 8012ba0:	b513      	push	{r0, r1, r4, lr}
 8012ba2:	681c      	ldr	r4, [r3, #0]
 8012ba4:	b124      	cbz	r4, 8012bb0 <iprintf+0x14>
 8012ba6:	69a3      	ldr	r3, [r4, #24]
 8012ba8:	b913      	cbnz	r3, 8012bb0 <iprintf+0x14>
 8012baa:	4620      	mov	r0, r4
 8012bac:	f000 faa6 	bl	80130fc <__sinit>
 8012bb0:	ab05      	add	r3, sp, #20
 8012bb2:	4620      	mov	r0, r4
 8012bb4:	9a04      	ldr	r2, [sp, #16]
 8012bb6:	68a1      	ldr	r1, [r4, #8]
 8012bb8:	9301      	str	r3, [sp, #4]
 8012bba:	f7ff fd29 	bl	8012610 <_vfiprintf_r>
 8012bbe:	b002      	add	sp, #8
 8012bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bc4:	b004      	add	sp, #16
 8012bc6:	4770      	bx	lr
 8012bc8:	20000a18 	.word	0x20000a18

08012bcc <putchar>:
 8012bcc:	b538      	push	{r3, r4, r5, lr}
 8012bce:	4b08      	ldr	r3, [pc, #32]	; (8012bf0 <putchar+0x24>)
 8012bd0:	4605      	mov	r5, r0
 8012bd2:	681c      	ldr	r4, [r3, #0]
 8012bd4:	b124      	cbz	r4, 8012be0 <putchar+0x14>
 8012bd6:	69a3      	ldr	r3, [r4, #24]
 8012bd8:	b913      	cbnz	r3, 8012be0 <putchar+0x14>
 8012bda:	4620      	mov	r0, r4
 8012bdc:	f000 fa8e 	bl	80130fc <__sinit>
 8012be0:	4629      	mov	r1, r5
 8012be2:	4620      	mov	r0, r4
 8012be4:	68a2      	ldr	r2, [r4, #8]
 8012be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bea:	f000 bd5b 	b.w	80136a4 <_putc_r>
 8012bee:	bf00      	nop
 8012bf0:	20000a18 	.word	0x20000a18

08012bf4 <_sbrk_r>:
 8012bf4:	b538      	push	{r3, r4, r5, lr}
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	4d05      	ldr	r5, [pc, #20]	; (8012c10 <_sbrk_r+0x1c>)
 8012bfa:	4604      	mov	r4, r0
 8012bfc:	4608      	mov	r0, r1
 8012bfe:	602b      	str	r3, [r5, #0]
 8012c00:	f7ee f88a 	bl	8000d18 <_sbrk>
 8012c04:	1c43      	adds	r3, r0, #1
 8012c06:	d102      	bne.n	8012c0e <_sbrk_r+0x1a>
 8012c08:	682b      	ldr	r3, [r5, #0]
 8012c0a:	b103      	cbz	r3, 8012c0e <_sbrk_r+0x1a>
 8012c0c:	6023      	str	r3, [r4, #0]
 8012c0e:	bd38      	pop	{r3, r4, r5, pc}
 8012c10:	20013660 	.word	0x20013660

08012c14 <__sread>:
 8012c14:	b510      	push	{r4, lr}
 8012c16:	460c      	mov	r4, r1
 8012c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c1c:	f000 fd8a 	bl	8013734 <_read_r>
 8012c20:	2800      	cmp	r0, #0
 8012c22:	bfab      	itete	ge
 8012c24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012c26:	89a3      	ldrhlt	r3, [r4, #12]
 8012c28:	181b      	addge	r3, r3, r0
 8012c2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012c2e:	bfac      	ite	ge
 8012c30:	6563      	strge	r3, [r4, #84]	; 0x54
 8012c32:	81a3      	strhlt	r3, [r4, #12]
 8012c34:	bd10      	pop	{r4, pc}

08012c36 <__swrite>:
 8012c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c3a:	461f      	mov	r7, r3
 8012c3c:	898b      	ldrh	r3, [r1, #12]
 8012c3e:	4605      	mov	r5, r0
 8012c40:	05db      	lsls	r3, r3, #23
 8012c42:	460c      	mov	r4, r1
 8012c44:	4616      	mov	r6, r2
 8012c46:	d505      	bpl.n	8012c54 <__swrite+0x1e>
 8012c48:	2302      	movs	r3, #2
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c50:	f000 faf2 	bl	8013238 <_lseek_r>
 8012c54:	89a3      	ldrh	r3, [r4, #12]
 8012c56:	4632      	mov	r2, r6
 8012c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c5c:	81a3      	strh	r3, [r4, #12]
 8012c5e:	4628      	mov	r0, r5
 8012c60:	463b      	mov	r3, r7
 8012c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c6a:	f000 b8a1 	b.w	8012db0 <_write_r>

08012c6e <__sseek>:
 8012c6e:	b510      	push	{r4, lr}
 8012c70:	460c      	mov	r4, r1
 8012c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c76:	f000 fadf 	bl	8013238 <_lseek_r>
 8012c7a:	1c43      	adds	r3, r0, #1
 8012c7c:	89a3      	ldrh	r3, [r4, #12]
 8012c7e:	bf15      	itete	ne
 8012c80:	6560      	strne	r0, [r4, #84]	; 0x54
 8012c82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012c86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012c8a:	81a3      	strheq	r3, [r4, #12]
 8012c8c:	bf18      	it	ne
 8012c8e:	81a3      	strhne	r3, [r4, #12]
 8012c90:	bd10      	pop	{r4, pc}

08012c92 <__sclose>:
 8012c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c96:	f000 b90b 	b.w	8012eb0 <_close_r>

08012c9a <_vsniprintf_r>:
 8012c9a:	b530      	push	{r4, r5, lr}
 8012c9c:	4614      	mov	r4, r2
 8012c9e:	2c00      	cmp	r4, #0
 8012ca0:	4605      	mov	r5, r0
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	b09b      	sub	sp, #108	; 0x6c
 8012ca6:	da05      	bge.n	8012cb4 <_vsniprintf_r+0x1a>
 8012ca8:	238b      	movs	r3, #139	; 0x8b
 8012caa:	6003      	str	r3, [r0, #0]
 8012cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012cb0:	b01b      	add	sp, #108	; 0x6c
 8012cb2:	bd30      	pop	{r4, r5, pc}
 8012cb4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012cb8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012cbc:	bf0c      	ite	eq
 8012cbe:	4623      	moveq	r3, r4
 8012cc0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8012cc4:	9302      	str	r3, [sp, #8]
 8012cc6:	9305      	str	r3, [sp, #20]
 8012cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012ccc:	9100      	str	r1, [sp, #0]
 8012cce:	9104      	str	r1, [sp, #16]
 8012cd0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012cd4:	4669      	mov	r1, sp
 8012cd6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012cd8:	f000 fbe4 	bl	80134a4 <_svfiprintf_r>
 8012cdc:	1c43      	adds	r3, r0, #1
 8012cde:	bfbc      	itt	lt
 8012ce0:	238b      	movlt	r3, #139	; 0x8b
 8012ce2:	602b      	strlt	r3, [r5, #0]
 8012ce4:	2c00      	cmp	r4, #0
 8012ce6:	d0e3      	beq.n	8012cb0 <_vsniprintf_r+0x16>
 8012ce8:	2200      	movs	r2, #0
 8012cea:	9b00      	ldr	r3, [sp, #0]
 8012cec:	701a      	strb	r2, [r3, #0]
 8012cee:	e7df      	b.n	8012cb0 <_vsniprintf_r+0x16>

08012cf0 <vsniprintf>:
 8012cf0:	b507      	push	{r0, r1, r2, lr}
 8012cf2:	9300      	str	r3, [sp, #0]
 8012cf4:	4613      	mov	r3, r2
 8012cf6:	460a      	mov	r2, r1
 8012cf8:	4601      	mov	r1, r0
 8012cfa:	4803      	ldr	r0, [pc, #12]	; (8012d08 <vsniprintf+0x18>)
 8012cfc:	6800      	ldr	r0, [r0, #0]
 8012cfe:	f7ff ffcc 	bl	8012c9a <_vsniprintf_r>
 8012d02:	b003      	add	sp, #12
 8012d04:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d08:	20000a18 	.word	0x20000a18

08012d0c <__swbuf_r>:
 8012d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d0e:	460e      	mov	r6, r1
 8012d10:	4614      	mov	r4, r2
 8012d12:	4605      	mov	r5, r0
 8012d14:	b118      	cbz	r0, 8012d1e <__swbuf_r+0x12>
 8012d16:	6983      	ldr	r3, [r0, #24]
 8012d18:	b90b      	cbnz	r3, 8012d1e <__swbuf_r+0x12>
 8012d1a:	f000 f9ef 	bl	80130fc <__sinit>
 8012d1e:	4b21      	ldr	r3, [pc, #132]	; (8012da4 <__swbuf_r+0x98>)
 8012d20:	429c      	cmp	r4, r3
 8012d22:	d12b      	bne.n	8012d7c <__swbuf_r+0x70>
 8012d24:	686c      	ldr	r4, [r5, #4]
 8012d26:	69a3      	ldr	r3, [r4, #24]
 8012d28:	60a3      	str	r3, [r4, #8]
 8012d2a:	89a3      	ldrh	r3, [r4, #12]
 8012d2c:	071a      	lsls	r2, r3, #28
 8012d2e:	d52f      	bpl.n	8012d90 <__swbuf_r+0x84>
 8012d30:	6923      	ldr	r3, [r4, #16]
 8012d32:	b36b      	cbz	r3, 8012d90 <__swbuf_r+0x84>
 8012d34:	6923      	ldr	r3, [r4, #16]
 8012d36:	6820      	ldr	r0, [r4, #0]
 8012d38:	b2f6      	uxtb	r6, r6
 8012d3a:	1ac0      	subs	r0, r0, r3
 8012d3c:	6963      	ldr	r3, [r4, #20]
 8012d3e:	4637      	mov	r7, r6
 8012d40:	4283      	cmp	r3, r0
 8012d42:	dc04      	bgt.n	8012d4e <__swbuf_r+0x42>
 8012d44:	4621      	mov	r1, r4
 8012d46:	4628      	mov	r0, r5
 8012d48:	f000 f944 	bl	8012fd4 <_fflush_r>
 8012d4c:	bb30      	cbnz	r0, 8012d9c <__swbuf_r+0x90>
 8012d4e:	68a3      	ldr	r3, [r4, #8]
 8012d50:	3001      	adds	r0, #1
 8012d52:	3b01      	subs	r3, #1
 8012d54:	60a3      	str	r3, [r4, #8]
 8012d56:	6823      	ldr	r3, [r4, #0]
 8012d58:	1c5a      	adds	r2, r3, #1
 8012d5a:	6022      	str	r2, [r4, #0]
 8012d5c:	701e      	strb	r6, [r3, #0]
 8012d5e:	6963      	ldr	r3, [r4, #20]
 8012d60:	4283      	cmp	r3, r0
 8012d62:	d004      	beq.n	8012d6e <__swbuf_r+0x62>
 8012d64:	89a3      	ldrh	r3, [r4, #12]
 8012d66:	07db      	lsls	r3, r3, #31
 8012d68:	d506      	bpl.n	8012d78 <__swbuf_r+0x6c>
 8012d6a:	2e0a      	cmp	r6, #10
 8012d6c:	d104      	bne.n	8012d78 <__swbuf_r+0x6c>
 8012d6e:	4621      	mov	r1, r4
 8012d70:	4628      	mov	r0, r5
 8012d72:	f000 f92f 	bl	8012fd4 <_fflush_r>
 8012d76:	b988      	cbnz	r0, 8012d9c <__swbuf_r+0x90>
 8012d78:	4638      	mov	r0, r7
 8012d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d7c:	4b0a      	ldr	r3, [pc, #40]	; (8012da8 <__swbuf_r+0x9c>)
 8012d7e:	429c      	cmp	r4, r3
 8012d80:	d101      	bne.n	8012d86 <__swbuf_r+0x7a>
 8012d82:	68ac      	ldr	r4, [r5, #8]
 8012d84:	e7cf      	b.n	8012d26 <__swbuf_r+0x1a>
 8012d86:	4b09      	ldr	r3, [pc, #36]	; (8012dac <__swbuf_r+0xa0>)
 8012d88:	429c      	cmp	r4, r3
 8012d8a:	bf08      	it	eq
 8012d8c:	68ec      	ldreq	r4, [r5, #12]
 8012d8e:	e7ca      	b.n	8012d26 <__swbuf_r+0x1a>
 8012d90:	4621      	mov	r1, r4
 8012d92:	4628      	mov	r0, r5
 8012d94:	f000 f81e 	bl	8012dd4 <__swsetup_r>
 8012d98:	2800      	cmp	r0, #0
 8012d9a:	d0cb      	beq.n	8012d34 <__swbuf_r+0x28>
 8012d9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012da0:	e7ea      	b.n	8012d78 <__swbuf_r+0x6c>
 8012da2:	bf00      	nop
 8012da4:	08014c7c 	.word	0x08014c7c
 8012da8:	08014c9c 	.word	0x08014c9c
 8012dac:	08014c5c 	.word	0x08014c5c

08012db0 <_write_r>:
 8012db0:	b538      	push	{r3, r4, r5, lr}
 8012db2:	4604      	mov	r4, r0
 8012db4:	4608      	mov	r0, r1
 8012db6:	4611      	mov	r1, r2
 8012db8:	2200      	movs	r2, #0
 8012dba:	4d05      	ldr	r5, [pc, #20]	; (8012dd0 <_write_r+0x20>)
 8012dbc:	602a      	str	r2, [r5, #0]
 8012dbe:	461a      	mov	r2, r3
 8012dc0:	f7ed ff5d 	bl	8000c7e <_write>
 8012dc4:	1c43      	adds	r3, r0, #1
 8012dc6:	d102      	bne.n	8012dce <_write_r+0x1e>
 8012dc8:	682b      	ldr	r3, [r5, #0]
 8012dca:	b103      	cbz	r3, 8012dce <_write_r+0x1e>
 8012dcc:	6023      	str	r3, [r4, #0]
 8012dce:	bd38      	pop	{r3, r4, r5, pc}
 8012dd0:	20013660 	.word	0x20013660

08012dd4 <__swsetup_r>:
 8012dd4:	4b32      	ldr	r3, [pc, #200]	; (8012ea0 <__swsetup_r+0xcc>)
 8012dd6:	b570      	push	{r4, r5, r6, lr}
 8012dd8:	681d      	ldr	r5, [r3, #0]
 8012dda:	4606      	mov	r6, r0
 8012ddc:	460c      	mov	r4, r1
 8012dde:	b125      	cbz	r5, 8012dea <__swsetup_r+0x16>
 8012de0:	69ab      	ldr	r3, [r5, #24]
 8012de2:	b913      	cbnz	r3, 8012dea <__swsetup_r+0x16>
 8012de4:	4628      	mov	r0, r5
 8012de6:	f000 f989 	bl	80130fc <__sinit>
 8012dea:	4b2e      	ldr	r3, [pc, #184]	; (8012ea4 <__swsetup_r+0xd0>)
 8012dec:	429c      	cmp	r4, r3
 8012dee:	d10f      	bne.n	8012e10 <__swsetup_r+0x3c>
 8012df0:	686c      	ldr	r4, [r5, #4]
 8012df2:	89a3      	ldrh	r3, [r4, #12]
 8012df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012df8:	0719      	lsls	r1, r3, #28
 8012dfa:	d42c      	bmi.n	8012e56 <__swsetup_r+0x82>
 8012dfc:	06dd      	lsls	r5, r3, #27
 8012dfe:	d411      	bmi.n	8012e24 <__swsetup_r+0x50>
 8012e00:	2309      	movs	r3, #9
 8012e02:	6033      	str	r3, [r6, #0]
 8012e04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e0c:	81a3      	strh	r3, [r4, #12]
 8012e0e:	e03e      	b.n	8012e8e <__swsetup_r+0xba>
 8012e10:	4b25      	ldr	r3, [pc, #148]	; (8012ea8 <__swsetup_r+0xd4>)
 8012e12:	429c      	cmp	r4, r3
 8012e14:	d101      	bne.n	8012e1a <__swsetup_r+0x46>
 8012e16:	68ac      	ldr	r4, [r5, #8]
 8012e18:	e7eb      	b.n	8012df2 <__swsetup_r+0x1e>
 8012e1a:	4b24      	ldr	r3, [pc, #144]	; (8012eac <__swsetup_r+0xd8>)
 8012e1c:	429c      	cmp	r4, r3
 8012e1e:	bf08      	it	eq
 8012e20:	68ec      	ldreq	r4, [r5, #12]
 8012e22:	e7e6      	b.n	8012df2 <__swsetup_r+0x1e>
 8012e24:	0758      	lsls	r0, r3, #29
 8012e26:	d512      	bpl.n	8012e4e <__swsetup_r+0x7a>
 8012e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e2a:	b141      	cbz	r1, 8012e3e <__swsetup_r+0x6a>
 8012e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e30:	4299      	cmp	r1, r3
 8012e32:	d002      	beq.n	8012e3a <__swsetup_r+0x66>
 8012e34:	4630      	mov	r0, r6
 8012e36:	f7ff fae7 	bl	8012408 <_free_r>
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	6363      	str	r3, [r4, #52]	; 0x34
 8012e3e:	89a3      	ldrh	r3, [r4, #12]
 8012e40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012e44:	81a3      	strh	r3, [r4, #12]
 8012e46:	2300      	movs	r3, #0
 8012e48:	6063      	str	r3, [r4, #4]
 8012e4a:	6923      	ldr	r3, [r4, #16]
 8012e4c:	6023      	str	r3, [r4, #0]
 8012e4e:	89a3      	ldrh	r3, [r4, #12]
 8012e50:	f043 0308 	orr.w	r3, r3, #8
 8012e54:	81a3      	strh	r3, [r4, #12]
 8012e56:	6923      	ldr	r3, [r4, #16]
 8012e58:	b94b      	cbnz	r3, 8012e6e <__swsetup_r+0x9a>
 8012e5a:	89a3      	ldrh	r3, [r4, #12]
 8012e5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e64:	d003      	beq.n	8012e6e <__swsetup_r+0x9a>
 8012e66:	4621      	mov	r1, r4
 8012e68:	4630      	mov	r0, r6
 8012e6a:	f000 fa1d 	bl	80132a8 <__smakebuf_r>
 8012e6e:	89a0      	ldrh	r0, [r4, #12]
 8012e70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012e74:	f010 0301 	ands.w	r3, r0, #1
 8012e78:	d00a      	beq.n	8012e90 <__swsetup_r+0xbc>
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	60a3      	str	r3, [r4, #8]
 8012e7e:	6963      	ldr	r3, [r4, #20]
 8012e80:	425b      	negs	r3, r3
 8012e82:	61a3      	str	r3, [r4, #24]
 8012e84:	6923      	ldr	r3, [r4, #16]
 8012e86:	b943      	cbnz	r3, 8012e9a <__swsetup_r+0xc6>
 8012e88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012e8c:	d1ba      	bne.n	8012e04 <__swsetup_r+0x30>
 8012e8e:	bd70      	pop	{r4, r5, r6, pc}
 8012e90:	0781      	lsls	r1, r0, #30
 8012e92:	bf58      	it	pl
 8012e94:	6963      	ldrpl	r3, [r4, #20]
 8012e96:	60a3      	str	r3, [r4, #8]
 8012e98:	e7f4      	b.n	8012e84 <__swsetup_r+0xb0>
 8012e9a:	2000      	movs	r0, #0
 8012e9c:	e7f7      	b.n	8012e8e <__swsetup_r+0xba>
 8012e9e:	bf00      	nop
 8012ea0:	20000a18 	.word	0x20000a18
 8012ea4:	08014c7c 	.word	0x08014c7c
 8012ea8:	08014c9c 	.word	0x08014c9c
 8012eac:	08014c5c 	.word	0x08014c5c

08012eb0 <_close_r>:
 8012eb0:	b538      	push	{r3, r4, r5, lr}
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	4d05      	ldr	r5, [pc, #20]	; (8012ecc <_close_r+0x1c>)
 8012eb6:	4604      	mov	r4, r0
 8012eb8:	4608      	mov	r0, r1
 8012eba:	602b      	str	r3, [r5, #0]
 8012ebc:	f7ed fefb 	bl	8000cb6 <_close>
 8012ec0:	1c43      	adds	r3, r0, #1
 8012ec2:	d102      	bne.n	8012eca <_close_r+0x1a>
 8012ec4:	682b      	ldr	r3, [r5, #0]
 8012ec6:	b103      	cbz	r3, 8012eca <_close_r+0x1a>
 8012ec8:	6023      	str	r3, [r4, #0]
 8012eca:	bd38      	pop	{r3, r4, r5, pc}
 8012ecc:	20013660 	.word	0x20013660

08012ed0 <__sflush_r>:
 8012ed0:	898a      	ldrh	r2, [r1, #12]
 8012ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ed4:	4605      	mov	r5, r0
 8012ed6:	0710      	lsls	r0, r2, #28
 8012ed8:	460c      	mov	r4, r1
 8012eda:	d457      	bmi.n	8012f8c <__sflush_r+0xbc>
 8012edc:	684b      	ldr	r3, [r1, #4]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	dc04      	bgt.n	8012eec <__sflush_r+0x1c>
 8012ee2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	dc01      	bgt.n	8012eec <__sflush_r+0x1c>
 8012ee8:	2000      	movs	r0, #0
 8012eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012eee:	2e00      	cmp	r6, #0
 8012ef0:	d0fa      	beq.n	8012ee8 <__sflush_r+0x18>
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012ef8:	682f      	ldr	r7, [r5, #0]
 8012efa:	602b      	str	r3, [r5, #0]
 8012efc:	d032      	beq.n	8012f64 <__sflush_r+0x94>
 8012efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f00:	89a3      	ldrh	r3, [r4, #12]
 8012f02:	075a      	lsls	r2, r3, #29
 8012f04:	d505      	bpl.n	8012f12 <__sflush_r+0x42>
 8012f06:	6863      	ldr	r3, [r4, #4]
 8012f08:	1ac0      	subs	r0, r0, r3
 8012f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f0c:	b10b      	cbz	r3, 8012f12 <__sflush_r+0x42>
 8012f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f10:	1ac0      	subs	r0, r0, r3
 8012f12:	2300      	movs	r3, #0
 8012f14:	4602      	mov	r2, r0
 8012f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f18:	4628      	mov	r0, r5
 8012f1a:	6a21      	ldr	r1, [r4, #32]
 8012f1c:	47b0      	blx	r6
 8012f1e:	1c43      	adds	r3, r0, #1
 8012f20:	89a3      	ldrh	r3, [r4, #12]
 8012f22:	d106      	bne.n	8012f32 <__sflush_r+0x62>
 8012f24:	6829      	ldr	r1, [r5, #0]
 8012f26:	291d      	cmp	r1, #29
 8012f28:	d82c      	bhi.n	8012f84 <__sflush_r+0xb4>
 8012f2a:	4a29      	ldr	r2, [pc, #164]	; (8012fd0 <__sflush_r+0x100>)
 8012f2c:	40ca      	lsrs	r2, r1
 8012f2e:	07d6      	lsls	r6, r2, #31
 8012f30:	d528      	bpl.n	8012f84 <__sflush_r+0xb4>
 8012f32:	2200      	movs	r2, #0
 8012f34:	6062      	str	r2, [r4, #4]
 8012f36:	6922      	ldr	r2, [r4, #16]
 8012f38:	04d9      	lsls	r1, r3, #19
 8012f3a:	6022      	str	r2, [r4, #0]
 8012f3c:	d504      	bpl.n	8012f48 <__sflush_r+0x78>
 8012f3e:	1c42      	adds	r2, r0, #1
 8012f40:	d101      	bne.n	8012f46 <__sflush_r+0x76>
 8012f42:	682b      	ldr	r3, [r5, #0]
 8012f44:	b903      	cbnz	r3, 8012f48 <__sflush_r+0x78>
 8012f46:	6560      	str	r0, [r4, #84]	; 0x54
 8012f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f4a:	602f      	str	r7, [r5, #0]
 8012f4c:	2900      	cmp	r1, #0
 8012f4e:	d0cb      	beq.n	8012ee8 <__sflush_r+0x18>
 8012f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f54:	4299      	cmp	r1, r3
 8012f56:	d002      	beq.n	8012f5e <__sflush_r+0x8e>
 8012f58:	4628      	mov	r0, r5
 8012f5a:	f7ff fa55 	bl	8012408 <_free_r>
 8012f5e:	2000      	movs	r0, #0
 8012f60:	6360      	str	r0, [r4, #52]	; 0x34
 8012f62:	e7c2      	b.n	8012eea <__sflush_r+0x1a>
 8012f64:	6a21      	ldr	r1, [r4, #32]
 8012f66:	2301      	movs	r3, #1
 8012f68:	4628      	mov	r0, r5
 8012f6a:	47b0      	blx	r6
 8012f6c:	1c41      	adds	r1, r0, #1
 8012f6e:	d1c7      	bne.n	8012f00 <__sflush_r+0x30>
 8012f70:	682b      	ldr	r3, [r5, #0]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d0c4      	beq.n	8012f00 <__sflush_r+0x30>
 8012f76:	2b1d      	cmp	r3, #29
 8012f78:	d001      	beq.n	8012f7e <__sflush_r+0xae>
 8012f7a:	2b16      	cmp	r3, #22
 8012f7c:	d101      	bne.n	8012f82 <__sflush_r+0xb2>
 8012f7e:	602f      	str	r7, [r5, #0]
 8012f80:	e7b2      	b.n	8012ee8 <__sflush_r+0x18>
 8012f82:	89a3      	ldrh	r3, [r4, #12]
 8012f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f88:	81a3      	strh	r3, [r4, #12]
 8012f8a:	e7ae      	b.n	8012eea <__sflush_r+0x1a>
 8012f8c:	690f      	ldr	r7, [r1, #16]
 8012f8e:	2f00      	cmp	r7, #0
 8012f90:	d0aa      	beq.n	8012ee8 <__sflush_r+0x18>
 8012f92:	0793      	lsls	r3, r2, #30
 8012f94:	bf18      	it	ne
 8012f96:	2300      	movne	r3, #0
 8012f98:	680e      	ldr	r6, [r1, #0]
 8012f9a:	bf08      	it	eq
 8012f9c:	694b      	ldreq	r3, [r1, #20]
 8012f9e:	1bf6      	subs	r6, r6, r7
 8012fa0:	600f      	str	r7, [r1, #0]
 8012fa2:	608b      	str	r3, [r1, #8]
 8012fa4:	2e00      	cmp	r6, #0
 8012fa6:	dd9f      	ble.n	8012ee8 <__sflush_r+0x18>
 8012fa8:	4633      	mov	r3, r6
 8012faa:	463a      	mov	r2, r7
 8012fac:	4628      	mov	r0, r5
 8012fae:	6a21      	ldr	r1, [r4, #32]
 8012fb0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8012fb4:	47e0      	blx	ip
 8012fb6:	2800      	cmp	r0, #0
 8012fb8:	dc06      	bgt.n	8012fc8 <__sflush_r+0xf8>
 8012fba:	89a3      	ldrh	r3, [r4, #12]
 8012fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fc4:	81a3      	strh	r3, [r4, #12]
 8012fc6:	e790      	b.n	8012eea <__sflush_r+0x1a>
 8012fc8:	4407      	add	r7, r0
 8012fca:	1a36      	subs	r6, r6, r0
 8012fcc:	e7ea      	b.n	8012fa4 <__sflush_r+0xd4>
 8012fce:	bf00      	nop
 8012fd0:	20400001 	.word	0x20400001

08012fd4 <_fflush_r>:
 8012fd4:	b538      	push	{r3, r4, r5, lr}
 8012fd6:	690b      	ldr	r3, [r1, #16]
 8012fd8:	4605      	mov	r5, r0
 8012fda:	460c      	mov	r4, r1
 8012fdc:	b913      	cbnz	r3, 8012fe4 <_fflush_r+0x10>
 8012fde:	2500      	movs	r5, #0
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	bd38      	pop	{r3, r4, r5, pc}
 8012fe4:	b118      	cbz	r0, 8012fee <_fflush_r+0x1a>
 8012fe6:	6983      	ldr	r3, [r0, #24]
 8012fe8:	b90b      	cbnz	r3, 8012fee <_fflush_r+0x1a>
 8012fea:	f000 f887 	bl	80130fc <__sinit>
 8012fee:	4b14      	ldr	r3, [pc, #80]	; (8013040 <_fflush_r+0x6c>)
 8012ff0:	429c      	cmp	r4, r3
 8012ff2:	d11b      	bne.n	801302c <_fflush_r+0x58>
 8012ff4:	686c      	ldr	r4, [r5, #4]
 8012ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d0ef      	beq.n	8012fde <_fflush_r+0xa>
 8012ffe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013000:	07d0      	lsls	r0, r2, #31
 8013002:	d404      	bmi.n	801300e <_fflush_r+0x3a>
 8013004:	0599      	lsls	r1, r3, #22
 8013006:	d402      	bmi.n	801300e <_fflush_r+0x3a>
 8013008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801300a:	f7ff f9c0 	bl	801238e <__retarget_lock_acquire_recursive>
 801300e:	4628      	mov	r0, r5
 8013010:	4621      	mov	r1, r4
 8013012:	f7ff ff5d 	bl	8012ed0 <__sflush_r>
 8013016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013018:	4605      	mov	r5, r0
 801301a:	07da      	lsls	r2, r3, #31
 801301c:	d4e0      	bmi.n	8012fe0 <_fflush_r+0xc>
 801301e:	89a3      	ldrh	r3, [r4, #12]
 8013020:	059b      	lsls	r3, r3, #22
 8013022:	d4dd      	bmi.n	8012fe0 <_fflush_r+0xc>
 8013024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013026:	f7ff f9b3 	bl	8012390 <__retarget_lock_release_recursive>
 801302a:	e7d9      	b.n	8012fe0 <_fflush_r+0xc>
 801302c:	4b05      	ldr	r3, [pc, #20]	; (8013044 <_fflush_r+0x70>)
 801302e:	429c      	cmp	r4, r3
 8013030:	d101      	bne.n	8013036 <_fflush_r+0x62>
 8013032:	68ac      	ldr	r4, [r5, #8]
 8013034:	e7df      	b.n	8012ff6 <_fflush_r+0x22>
 8013036:	4b04      	ldr	r3, [pc, #16]	; (8013048 <_fflush_r+0x74>)
 8013038:	429c      	cmp	r4, r3
 801303a:	bf08      	it	eq
 801303c:	68ec      	ldreq	r4, [r5, #12]
 801303e:	e7da      	b.n	8012ff6 <_fflush_r+0x22>
 8013040:	08014c7c 	.word	0x08014c7c
 8013044:	08014c9c 	.word	0x08014c9c
 8013048:	08014c5c 	.word	0x08014c5c

0801304c <std>:
 801304c:	2300      	movs	r3, #0
 801304e:	b510      	push	{r4, lr}
 8013050:	4604      	mov	r4, r0
 8013052:	e9c0 3300 	strd	r3, r3, [r0]
 8013056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801305a:	6083      	str	r3, [r0, #8]
 801305c:	8181      	strh	r1, [r0, #12]
 801305e:	6643      	str	r3, [r0, #100]	; 0x64
 8013060:	81c2      	strh	r2, [r0, #14]
 8013062:	6183      	str	r3, [r0, #24]
 8013064:	4619      	mov	r1, r3
 8013066:	2208      	movs	r2, #8
 8013068:	305c      	adds	r0, #92	; 0x5c
 801306a:	f7ff f9b1 	bl	80123d0 <memset>
 801306e:	4b05      	ldr	r3, [pc, #20]	; (8013084 <std+0x38>)
 8013070:	6224      	str	r4, [r4, #32]
 8013072:	6263      	str	r3, [r4, #36]	; 0x24
 8013074:	4b04      	ldr	r3, [pc, #16]	; (8013088 <std+0x3c>)
 8013076:	62a3      	str	r3, [r4, #40]	; 0x28
 8013078:	4b04      	ldr	r3, [pc, #16]	; (801308c <std+0x40>)
 801307a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801307c:	4b04      	ldr	r3, [pc, #16]	; (8013090 <std+0x44>)
 801307e:	6323      	str	r3, [r4, #48]	; 0x30
 8013080:	bd10      	pop	{r4, pc}
 8013082:	bf00      	nop
 8013084:	08012c15 	.word	0x08012c15
 8013088:	08012c37 	.word	0x08012c37
 801308c:	08012c6f 	.word	0x08012c6f
 8013090:	08012c93 	.word	0x08012c93

08013094 <_cleanup_r>:
 8013094:	4901      	ldr	r1, [pc, #4]	; (801309c <_cleanup_r+0x8>)
 8013096:	f000 b8af 	b.w	80131f8 <_fwalk_reent>
 801309a:	bf00      	nop
 801309c:	08012fd5 	.word	0x08012fd5

080130a0 <__sfmoreglue>:
 80130a0:	2268      	movs	r2, #104	; 0x68
 80130a2:	b570      	push	{r4, r5, r6, lr}
 80130a4:	1e4d      	subs	r5, r1, #1
 80130a6:	4355      	muls	r5, r2
 80130a8:	460e      	mov	r6, r1
 80130aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80130ae:	f7ff fa13 	bl	80124d8 <_malloc_r>
 80130b2:	4604      	mov	r4, r0
 80130b4:	b140      	cbz	r0, 80130c8 <__sfmoreglue+0x28>
 80130b6:	2100      	movs	r1, #0
 80130b8:	e9c0 1600 	strd	r1, r6, [r0]
 80130bc:	300c      	adds	r0, #12
 80130be:	60a0      	str	r0, [r4, #8]
 80130c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80130c4:	f7ff f984 	bl	80123d0 <memset>
 80130c8:	4620      	mov	r0, r4
 80130ca:	bd70      	pop	{r4, r5, r6, pc}

080130cc <__sfp_lock_acquire>:
 80130cc:	4801      	ldr	r0, [pc, #4]	; (80130d4 <__sfp_lock_acquire+0x8>)
 80130ce:	f7ff b95e 	b.w	801238e <__retarget_lock_acquire_recursive>
 80130d2:	bf00      	nop
 80130d4:	20013655 	.word	0x20013655

080130d8 <__sfp_lock_release>:
 80130d8:	4801      	ldr	r0, [pc, #4]	; (80130e0 <__sfp_lock_release+0x8>)
 80130da:	f7ff b959 	b.w	8012390 <__retarget_lock_release_recursive>
 80130de:	bf00      	nop
 80130e0:	20013655 	.word	0x20013655

080130e4 <__sinit_lock_acquire>:
 80130e4:	4801      	ldr	r0, [pc, #4]	; (80130ec <__sinit_lock_acquire+0x8>)
 80130e6:	f7ff b952 	b.w	801238e <__retarget_lock_acquire_recursive>
 80130ea:	bf00      	nop
 80130ec:	20013656 	.word	0x20013656

080130f0 <__sinit_lock_release>:
 80130f0:	4801      	ldr	r0, [pc, #4]	; (80130f8 <__sinit_lock_release+0x8>)
 80130f2:	f7ff b94d 	b.w	8012390 <__retarget_lock_release_recursive>
 80130f6:	bf00      	nop
 80130f8:	20013656 	.word	0x20013656

080130fc <__sinit>:
 80130fc:	b510      	push	{r4, lr}
 80130fe:	4604      	mov	r4, r0
 8013100:	f7ff fff0 	bl	80130e4 <__sinit_lock_acquire>
 8013104:	69a3      	ldr	r3, [r4, #24]
 8013106:	b11b      	cbz	r3, 8013110 <__sinit+0x14>
 8013108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801310c:	f7ff bff0 	b.w	80130f0 <__sinit_lock_release>
 8013110:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013114:	6523      	str	r3, [r4, #80]	; 0x50
 8013116:	4b13      	ldr	r3, [pc, #76]	; (8013164 <__sinit+0x68>)
 8013118:	4a13      	ldr	r2, [pc, #76]	; (8013168 <__sinit+0x6c>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	62a2      	str	r2, [r4, #40]	; 0x28
 801311e:	42a3      	cmp	r3, r4
 8013120:	bf08      	it	eq
 8013122:	2301      	moveq	r3, #1
 8013124:	4620      	mov	r0, r4
 8013126:	bf08      	it	eq
 8013128:	61a3      	streq	r3, [r4, #24]
 801312a:	f000 f81f 	bl	801316c <__sfp>
 801312e:	6060      	str	r0, [r4, #4]
 8013130:	4620      	mov	r0, r4
 8013132:	f000 f81b 	bl	801316c <__sfp>
 8013136:	60a0      	str	r0, [r4, #8]
 8013138:	4620      	mov	r0, r4
 801313a:	f000 f817 	bl	801316c <__sfp>
 801313e:	2200      	movs	r2, #0
 8013140:	2104      	movs	r1, #4
 8013142:	60e0      	str	r0, [r4, #12]
 8013144:	6860      	ldr	r0, [r4, #4]
 8013146:	f7ff ff81 	bl	801304c <std>
 801314a:	2201      	movs	r2, #1
 801314c:	2109      	movs	r1, #9
 801314e:	68a0      	ldr	r0, [r4, #8]
 8013150:	f7ff ff7c 	bl	801304c <std>
 8013154:	2202      	movs	r2, #2
 8013156:	2112      	movs	r1, #18
 8013158:	68e0      	ldr	r0, [r4, #12]
 801315a:	f7ff ff77 	bl	801304c <std>
 801315e:	2301      	movs	r3, #1
 8013160:	61a3      	str	r3, [r4, #24]
 8013162:	e7d1      	b.n	8013108 <__sinit+0xc>
 8013164:	08014c24 	.word	0x08014c24
 8013168:	08013095 	.word	0x08013095

0801316c <__sfp>:
 801316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801316e:	4607      	mov	r7, r0
 8013170:	f7ff ffac 	bl	80130cc <__sfp_lock_acquire>
 8013174:	4b1e      	ldr	r3, [pc, #120]	; (80131f0 <__sfp+0x84>)
 8013176:	681e      	ldr	r6, [r3, #0]
 8013178:	69b3      	ldr	r3, [r6, #24]
 801317a:	b913      	cbnz	r3, 8013182 <__sfp+0x16>
 801317c:	4630      	mov	r0, r6
 801317e:	f7ff ffbd 	bl	80130fc <__sinit>
 8013182:	3648      	adds	r6, #72	; 0x48
 8013184:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013188:	3b01      	subs	r3, #1
 801318a:	d503      	bpl.n	8013194 <__sfp+0x28>
 801318c:	6833      	ldr	r3, [r6, #0]
 801318e:	b30b      	cbz	r3, 80131d4 <__sfp+0x68>
 8013190:	6836      	ldr	r6, [r6, #0]
 8013192:	e7f7      	b.n	8013184 <__sfp+0x18>
 8013194:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013198:	b9d5      	cbnz	r5, 80131d0 <__sfp+0x64>
 801319a:	4b16      	ldr	r3, [pc, #88]	; (80131f4 <__sfp+0x88>)
 801319c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80131a0:	60e3      	str	r3, [r4, #12]
 80131a2:	6665      	str	r5, [r4, #100]	; 0x64
 80131a4:	f7ff f8f2 	bl	801238c <__retarget_lock_init_recursive>
 80131a8:	f7ff ff96 	bl	80130d8 <__sfp_lock_release>
 80131ac:	2208      	movs	r2, #8
 80131ae:	4629      	mov	r1, r5
 80131b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80131b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80131b8:	6025      	str	r5, [r4, #0]
 80131ba:	61a5      	str	r5, [r4, #24]
 80131bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80131c0:	f7ff f906 	bl	80123d0 <memset>
 80131c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80131c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80131cc:	4620      	mov	r0, r4
 80131ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131d0:	3468      	adds	r4, #104	; 0x68
 80131d2:	e7d9      	b.n	8013188 <__sfp+0x1c>
 80131d4:	2104      	movs	r1, #4
 80131d6:	4638      	mov	r0, r7
 80131d8:	f7ff ff62 	bl	80130a0 <__sfmoreglue>
 80131dc:	4604      	mov	r4, r0
 80131de:	6030      	str	r0, [r6, #0]
 80131e0:	2800      	cmp	r0, #0
 80131e2:	d1d5      	bne.n	8013190 <__sfp+0x24>
 80131e4:	f7ff ff78 	bl	80130d8 <__sfp_lock_release>
 80131e8:	230c      	movs	r3, #12
 80131ea:	603b      	str	r3, [r7, #0]
 80131ec:	e7ee      	b.n	80131cc <__sfp+0x60>
 80131ee:	bf00      	nop
 80131f0:	08014c24 	.word	0x08014c24
 80131f4:	ffff0001 	.word	0xffff0001

080131f8 <_fwalk_reent>:
 80131f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131fc:	4606      	mov	r6, r0
 80131fe:	4688      	mov	r8, r1
 8013200:	2700      	movs	r7, #0
 8013202:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013206:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801320a:	f1b9 0901 	subs.w	r9, r9, #1
 801320e:	d505      	bpl.n	801321c <_fwalk_reent+0x24>
 8013210:	6824      	ldr	r4, [r4, #0]
 8013212:	2c00      	cmp	r4, #0
 8013214:	d1f7      	bne.n	8013206 <_fwalk_reent+0xe>
 8013216:	4638      	mov	r0, r7
 8013218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801321c:	89ab      	ldrh	r3, [r5, #12]
 801321e:	2b01      	cmp	r3, #1
 8013220:	d907      	bls.n	8013232 <_fwalk_reent+0x3a>
 8013222:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013226:	3301      	adds	r3, #1
 8013228:	d003      	beq.n	8013232 <_fwalk_reent+0x3a>
 801322a:	4629      	mov	r1, r5
 801322c:	4630      	mov	r0, r6
 801322e:	47c0      	blx	r8
 8013230:	4307      	orrs	r7, r0
 8013232:	3568      	adds	r5, #104	; 0x68
 8013234:	e7e9      	b.n	801320a <_fwalk_reent+0x12>
	...

08013238 <_lseek_r>:
 8013238:	b538      	push	{r3, r4, r5, lr}
 801323a:	4604      	mov	r4, r0
 801323c:	4608      	mov	r0, r1
 801323e:	4611      	mov	r1, r2
 8013240:	2200      	movs	r2, #0
 8013242:	4d05      	ldr	r5, [pc, #20]	; (8013258 <_lseek_r+0x20>)
 8013244:	602a      	str	r2, [r5, #0]
 8013246:	461a      	mov	r2, r3
 8013248:	f7ed fd59 	bl	8000cfe <_lseek>
 801324c:	1c43      	adds	r3, r0, #1
 801324e:	d102      	bne.n	8013256 <_lseek_r+0x1e>
 8013250:	682b      	ldr	r3, [r5, #0]
 8013252:	b103      	cbz	r3, 8013256 <_lseek_r+0x1e>
 8013254:	6023      	str	r3, [r4, #0]
 8013256:	bd38      	pop	{r3, r4, r5, pc}
 8013258:	20013660 	.word	0x20013660

0801325c <__swhatbuf_r>:
 801325c:	b570      	push	{r4, r5, r6, lr}
 801325e:	460e      	mov	r6, r1
 8013260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013264:	4614      	mov	r4, r2
 8013266:	2900      	cmp	r1, #0
 8013268:	461d      	mov	r5, r3
 801326a:	b096      	sub	sp, #88	; 0x58
 801326c:	da08      	bge.n	8013280 <__swhatbuf_r+0x24>
 801326e:	2200      	movs	r2, #0
 8013270:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013274:	602a      	str	r2, [r5, #0]
 8013276:	061a      	lsls	r2, r3, #24
 8013278:	d410      	bmi.n	801329c <__swhatbuf_r+0x40>
 801327a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801327e:	e00e      	b.n	801329e <__swhatbuf_r+0x42>
 8013280:	466a      	mov	r2, sp
 8013282:	f000 fa69 	bl	8013758 <_fstat_r>
 8013286:	2800      	cmp	r0, #0
 8013288:	dbf1      	blt.n	801326e <__swhatbuf_r+0x12>
 801328a:	9a01      	ldr	r2, [sp, #4]
 801328c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013290:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013294:	425a      	negs	r2, r3
 8013296:	415a      	adcs	r2, r3
 8013298:	602a      	str	r2, [r5, #0]
 801329a:	e7ee      	b.n	801327a <__swhatbuf_r+0x1e>
 801329c:	2340      	movs	r3, #64	; 0x40
 801329e:	2000      	movs	r0, #0
 80132a0:	6023      	str	r3, [r4, #0]
 80132a2:	b016      	add	sp, #88	; 0x58
 80132a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080132a8 <__smakebuf_r>:
 80132a8:	898b      	ldrh	r3, [r1, #12]
 80132aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80132ac:	079d      	lsls	r5, r3, #30
 80132ae:	4606      	mov	r6, r0
 80132b0:	460c      	mov	r4, r1
 80132b2:	d507      	bpl.n	80132c4 <__smakebuf_r+0x1c>
 80132b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80132b8:	6023      	str	r3, [r4, #0]
 80132ba:	6123      	str	r3, [r4, #16]
 80132bc:	2301      	movs	r3, #1
 80132be:	6163      	str	r3, [r4, #20]
 80132c0:	b002      	add	sp, #8
 80132c2:	bd70      	pop	{r4, r5, r6, pc}
 80132c4:	466a      	mov	r2, sp
 80132c6:	ab01      	add	r3, sp, #4
 80132c8:	f7ff ffc8 	bl	801325c <__swhatbuf_r>
 80132cc:	9900      	ldr	r1, [sp, #0]
 80132ce:	4605      	mov	r5, r0
 80132d0:	4630      	mov	r0, r6
 80132d2:	f7ff f901 	bl	80124d8 <_malloc_r>
 80132d6:	b948      	cbnz	r0, 80132ec <__smakebuf_r+0x44>
 80132d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132dc:	059a      	lsls	r2, r3, #22
 80132de:	d4ef      	bmi.n	80132c0 <__smakebuf_r+0x18>
 80132e0:	f023 0303 	bic.w	r3, r3, #3
 80132e4:	f043 0302 	orr.w	r3, r3, #2
 80132e8:	81a3      	strh	r3, [r4, #12]
 80132ea:	e7e3      	b.n	80132b4 <__smakebuf_r+0xc>
 80132ec:	4b0d      	ldr	r3, [pc, #52]	; (8013324 <__smakebuf_r+0x7c>)
 80132ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80132f0:	89a3      	ldrh	r3, [r4, #12]
 80132f2:	6020      	str	r0, [r4, #0]
 80132f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132f8:	81a3      	strh	r3, [r4, #12]
 80132fa:	9b00      	ldr	r3, [sp, #0]
 80132fc:	6120      	str	r0, [r4, #16]
 80132fe:	6163      	str	r3, [r4, #20]
 8013300:	9b01      	ldr	r3, [sp, #4]
 8013302:	b15b      	cbz	r3, 801331c <__smakebuf_r+0x74>
 8013304:	4630      	mov	r0, r6
 8013306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801330a:	f000 fa37 	bl	801377c <_isatty_r>
 801330e:	b128      	cbz	r0, 801331c <__smakebuf_r+0x74>
 8013310:	89a3      	ldrh	r3, [r4, #12]
 8013312:	f023 0303 	bic.w	r3, r3, #3
 8013316:	f043 0301 	orr.w	r3, r3, #1
 801331a:	81a3      	strh	r3, [r4, #12]
 801331c:	89a0      	ldrh	r0, [r4, #12]
 801331e:	4305      	orrs	r5, r0
 8013320:	81a5      	strh	r5, [r4, #12]
 8013322:	e7cd      	b.n	80132c0 <__smakebuf_r+0x18>
 8013324:	08013095 	.word	0x08013095

08013328 <memchr>:
 8013328:	4603      	mov	r3, r0
 801332a:	b510      	push	{r4, lr}
 801332c:	b2c9      	uxtb	r1, r1
 801332e:	4402      	add	r2, r0
 8013330:	4293      	cmp	r3, r2
 8013332:	4618      	mov	r0, r3
 8013334:	d101      	bne.n	801333a <memchr+0x12>
 8013336:	2000      	movs	r0, #0
 8013338:	e003      	b.n	8013342 <memchr+0x1a>
 801333a:	7804      	ldrb	r4, [r0, #0]
 801333c:	3301      	adds	r3, #1
 801333e:	428c      	cmp	r4, r1
 8013340:	d1f6      	bne.n	8013330 <memchr+0x8>
 8013342:	bd10      	pop	{r4, pc}

08013344 <memmove>:
 8013344:	4288      	cmp	r0, r1
 8013346:	b510      	push	{r4, lr}
 8013348:	eb01 0402 	add.w	r4, r1, r2
 801334c:	d902      	bls.n	8013354 <memmove+0x10>
 801334e:	4284      	cmp	r4, r0
 8013350:	4623      	mov	r3, r4
 8013352:	d807      	bhi.n	8013364 <memmove+0x20>
 8013354:	1e43      	subs	r3, r0, #1
 8013356:	42a1      	cmp	r1, r4
 8013358:	d008      	beq.n	801336c <memmove+0x28>
 801335a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801335e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013362:	e7f8      	b.n	8013356 <memmove+0x12>
 8013364:	4601      	mov	r1, r0
 8013366:	4402      	add	r2, r0
 8013368:	428a      	cmp	r2, r1
 801336a:	d100      	bne.n	801336e <memmove+0x2a>
 801336c:	bd10      	pop	{r4, pc}
 801336e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013376:	e7f7      	b.n	8013368 <memmove+0x24>

08013378 <__malloc_lock>:
 8013378:	4801      	ldr	r0, [pc, #4]	; (8013380 <__malloc_lock+0x8>)
 801337a:	f7ff b808 	b.w	801238e <__retarget_lock_acquire_recursive>
 801337e:	bf00      	nop
 8013380:	20013654 	.word	0x20013654

08013384 <__malloc_unlock>:
 8013384:	4801      	ldr	r0, [pc, #4]	; (801338c <__malloc_unlock+0x8>)
 8013386:	f7ff b803 	b.w	8012390 <__retarget_lock_release_recursive>
 801338a:	bf00      	nop
 801338c:	20013654 	.word	0x20013654

08013390 <_realloc_r>:
 8013390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013394:	4680      	mov	r8, r0
 8013396:	4614      	mov	r4, r2
 8013398:	460e      	mov	r6, r1
 801339a:	b921      	cbnz	r1, 80133a6 <_realloc_r+0x16>
 801339c:	4611      	mov	r1, r2
 801339e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133a2:	f7ff b899 	b.w	80124d8 <_malloc_r>
 80133a6:	b92a      	cbnz	r2, 80133b4 <_realloc_r+0x24>
 80133a8:	f7ff f82e 	bl	8012408 <_free_r>
 80133ac:	4625      	mov	r5, r4
 80133ae:	4628      	mov	r0, r5
 80133b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133b4:	f000 f9f2 	bl	801379c <_malloc_usable_size_r>
 80133b8:	4284      	cmp	r4, r0
 80133ba:	4607      	mov	r7, r0
 80133bc:	d802      	bhi.n	80133c4 <_realloc_r+0x34>
 80133be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80133c2:	d812      	bhi.n	80133ea <_realloc_r+0x5a>
 80133c4:	4621      	mov	r1, r4
 80133c6:	4640      	mov	r0, r8
 80133c8:	f7ff f886 	bl	80124d8 <_malloc_r>
 80133cc:	4605      	mov	r5, r0
 80133ce:	2800      	cmp	r0, #0
 80133d0:	d0ed      	beq.n	80133ae <_realloc_r+0x1e>
 80133d2:	42bc      	cmp	r4, r7
 80133d4:	4622      	mov	r2, r4
 80133d6:	4631      	mov	r1, r6
 80133d8:	bf28      	it	cs
 80133da:	463a      	movcs	r2, r7
 80133dc:	f7fe ffea 	bl	80123b4 <memcpy>
 80133e0:	4631      	mov	r1, r6
 80133e2:	4640      	mov	r0, r8
 80133e4:	f7ff f810 	bl	8012408 <_free_r>
 80133e8:	e7e1      	b.n	80133ae <_realloc_r+0x1e>
 80133ea:	4635      	mov	r5, r6
 80133ec:	e7df      	b.n	80133ae <_realloc_r+0x1e>

080133ee <__ssputs_r>:
 80133ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133f2:	688e      	ldr	r6, [r1, #8]
 80133f4:	4682      	mov	sl, r0
 80133f6:	429e      	cmp	r6, r3
 80133f8:	460c      	mov	r4, r1
 80133fa:	4690      	mov	r8, r2
 80133fc:	461f      	mov	r7, r3
 80133fe:	d838      	bhi.n	8013472 <__ssputs_r+0x84>
 8013400:	898a      	ldrh	r2, [r1, #12]
 8013402:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013406:	d032      	beq.n	801346e <__ssputs_r+0x80>
 8013408:	6825      	ldr	r5, [r4, #0]
 801340a:	6909      	ldr	r1, [r1, #16]
 801340c:	3301      	adds	r3, #1
 801340e:	eba5 0901 	sub.w	r9, r5, r1
 8013412:	6965      	ldr	r5, [r4, #20]
 8013414:	444b      	add	r3, r9
 8013416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801341a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801341e:	106d      	asrs	r5, r5, #1
 8013420:	429d      	cmp	r5, r3
 8013422:	bf38      	it	cc
 8013424:	461d      	movcc	r5, r3
 8013426:	0553      	lsls	r3, r2, #21
 8013428:	d531      	bpl.n	801348e <__ssputs_r+0xa0>
 801342a:	4629      	mov	r1, r5
 801342c:	f7ff f854 	bl	80124d8 <_malloc_r>
 8013430:	4606      	mov	r6, r0
 8013432:	b950      	cbnz	r0, 801344a <__ssputs_r+0x5c>
 8013434:	230c      	movs	r3, #12
 8013436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801343a:	f8ca 3000 	str.w	r3, [sl]
 801343e:	89a3      	ldrh	r3, [r4, #12]
 8013440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013444:	81a3      	strh	r3, [r4, #12]
 8013446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801344a:	464a      	mov	r2, r9
 801344c:	6921      	ldr	r1, [r4, #16]
 801344e:	f7fe ffb1 	bl	80123b4 <memcpy>
 8013452:	89a3      	ldrh	r3, [r4, #12]
 8013454:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801345c:	81a3      	strh	r3, [r4, #12]
 801345e:	6126      	str	r6, [r4, #16]
 8013460:	444e      	add	r6, r9
 8013462:	6026      	str	r6, [r4, #0]
 8013464:	463e      	mov	r6, r7
 8013466:	6165      	str	r5, [r4, #20]
 8013468:	eba5 0509 	sub.w	r5, r5, r9
 801346c:	60a5      	str	r5, [r4, #8]
 801346e:	42be      	cmp	r6, r7
 8013470:	d900      	bls.n	8013474 <__ssputs_r+0x86>
 8013472:	463e      	mov	r6, r7
 8013474:	4632      	mov	r2, r6
 8013476:	4641      	mov	r1, r8
 8013478:	6820      	ldr	r0, [r4, #0]
 801347a:	f7ff ff63 	bl	8013344 <memmove>
 801347e:	68a3      	ldr	r3, [r4, #8]
 8013480:	2000      	movs	r0, #0
 8013482:	1b9b      	subs	r3, r3, r6
 8013484:	60a3      	str	r3, [r4, #8]
 8013486:	6823      	ldr	r3, [r4, #0]
 8013488:	4433      	add	r3, r6
 801348a:	6023      	str	r3, [r4, #0]
 801348c:	e7db      	b.n	8013446 <__ssputs_r+0x58>
 801348e:	462a      	mov	r2, r5
 8013490:	f7ff ff7e 	bl	8013390 <_realloc_r>
 8013494:	4606      	mov	r6, r0
 8013496:	2800      	cmp	r0, #0
 8013498:	d1e1      	bne.n	801345e <__ssputs_r+0x70>
 801349a:	4650      	mov	r0, sl
 801349c:	6921      	ldr	r1, [r4, #16]
 801349e:	f7fe ffb3 	bl	8012408 <_free_r>
 80134a2:	e7c7      	b.n	8013434 <__ssputs_r+0x46>

080134a4 <_svfiprintf_r>:
 80134a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134a8:	4698      	mov	r8, r3
 80134aa:	898b      	ldrh	r3, [r1, #12]
 80134ac:	4607      	mov	r7, r0
 80134ae:	061b      	lsls	r3, r3, #24
 80134b0:	460d      	mov	r5, r1
 80134b2:	4614      	mov	r4, r2
 80134b4:	b09d      	sub	sp, #116	; 0x74
 80134b6:	d50e      	bpl.n	80134d6 <_svfiprintf_r+0x32>
 80134b8:	690b      	ldr	r3, [r1, #16]
 80134ba:	b963      	cbnz	r3, 80134d6 <_svfiprintf_r+0x32>
 80134bc:	2140      	movs	r1, #64	; 0x40
 80134be:	f7ff f80b 	bl	80124d8 <_malloc_r>
 80134c2:	6028      	str	r0, [r5, #0]
 80134c4:	6128      	str	r0, [r5, #16]
 80134c6:	b920      	cbnz	r0, 80134d2 <_svfiprintf_r+0x2e>
 80134c8:	230c      	movs	r3, #12
 80134ca:	603b      	str	r3, [r7, #0]
 80134cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80134d0:	e0d1      	b.n	8013676 <_svfiprintf_r+0x1d2>
 80134d2:	2340      	movs	r3, #64	; 0x40
 80134d4:	616b      	str	r3, [r5, #20]
 80134d6:	2300      	movs	r3, #0
 80134d8:	9309      	str	r3, [sp, #36]	; 0x24
 80134da:	2320      	movs	r3, #32
 80134dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80134e0:	2330      	movs	r3, #48	; 0x30
 80134e2:	f04f 0901 	mov.w	r9, #1
 80134e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80134ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013690 <_svfiprintf_r+0x1ec>
 80134ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80134f2:	4623      	mov	r3, r4
 80134f4:	469a      	mov	sl, r3
 80134f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134fa:	b10a      	cbz	r2, 8013500 <_svfiprintf_r+0x5c>
 80134fc:	2a25      	cmp	r2, #37	; 0x25
 80134fe:	d1f9      	bne.n	80134f4 <_svfiprintf_r+0x50>
 8013500:	ebba 0b04 	subs.w	fp, sl, r4
 8013504:	d00b      	beq.n	801351e <_svfiprintf_r+0x7a>
 8013506:	465b      	mov	r3, fp
 8013508:	4622      	mov	r2, r4
 801350a:	4629      	mov	r1, r5
 801350c:	4638      	mov	r0, r7
 801350e:	f7ff ff6e 	bl	80133ee <__ssputs_r>
 8013512:	3001      	adds	r0, #1
 8013514:	f000 80aa 	beq.w	801366c <_svfiprintf_r+0x1c8>
 8013518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801351a:	445a      	add	r2, fp
 801351c:	9209      	str	r2, [sp, #36]	; 0x24
 801351e:	f89a 3000 	ldrb.w	r3, [sl]
 8013522:	2b00      	cmp	r3, #0
 8013524:	f000 80a2 	beq.w	801366c <_svfiprintf_r+0x1c8>
 8013528:	2300      	movs	r3, #0
 801352a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801352e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013532:	f10a 0a01 	add.w	sl, sl, #1
 8013536:	9304      	str	r3, [sp, #16]
 8013538:	9307      	str	r3, [sp, #28]
 801353a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801353e:	931a      	str	r3, [sp, #104]	; 0x68
 8013540:	4654      	mov	r4, sl
 8013542:	2205      	movs	r2, #5
 8013544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013548:	4851      	ldr	r0, [pc, #324]	; (8013690 <_svfiprintf_r+0x1ec>)
 801354a:	f7ff feed 	bl	8013328 <memchr>
 801354e:	9a04      	ldr	r2, [sp, #16]
 8013550:	b9d8      	cbnz	r0, 801358a <_svfiprintf_r+0xe6>
 8013552:	06d0      	lsls	r0, r2, #27
 8013554:	bf44      	itt	mi
 8013556:	2320      	movmi	r3, #32
 8013558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801355c:	0711      	lsls	r1, r2, #28
 801355e:	bf44      	itt	mi
 8013560:	232b      	movmi	r3, #43	; 0x2b
 8013562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013566:	f89a 3000 	ldrb.w	r3, [sl]
 801356a:	2b2a      	cmp	r3, #42	; 0x2a
 801356c:	d015      	beq.n	801359a <_svfiprintf_r+0xf6>
 801356e:	4654      	mov	r4, sl
 8013570:	2000      	movs	r0, #0
 8013572:	f04f 0c0a 	mov.w	ip, #10
 8013576:	9a07      	ldr	r2, [sp, #28]
 8013578:	4621      	mov	r1, r4
 801357a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801357e:	3b30      	subs	r3, #48	; 0x30
 8013580:	2b09      	cmp	r3, #9
 8013582:	d94e      	bls.n	8013622 <_svfiprintf_r+0x17e>
 8013584:	b1b0      	cbz	r0, 80135b4 <_svfiprintf_r+0x110>
 8013586:	9207      	str	r2, [sp, #28]
 8013588:	e014      	b.n	80135b4 <_svfiprintf_r+0x110>
 801358a:	eba0 0308 	sub.w	r3, r0, r8
 801358e:	fa09 f303 	lsl.w	r3, r9, r3
 8013592:	4313      	orrs	r3, r2
 8013594:	46a2      	mov	sl, r4
 8013596:	9304      	str	r3, [sp, #16]
 8013598:	e7d2      	b.n	8013540 <_svfiprintf_r+0x9c>
 801359a:	9b03      	ldr	r3, [sp, #12]
 801359c:	1d19      	adds	r1, r3, #4
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	9103      	str	r1, [sp, #12]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	bfbb      	ittet	lt
 80135a6:	425b      	neglt	r3, r3
 80135a8:	f042 0202 	orrlt.w	r2, r2, #2
 80135ac:	9307      	strge	r3, [sp, #28]
 80135ae:	9307      	strlt	r3, [sp, #28]
 80135b0:	bfb8      	it	lt
 80135b2:	9204      	strlt	r2, [sp, #16]
 80135b4:	7823      	ldrb	r3, [r4, #0]
 80135b6:	2b2e      	cmp	r3, #46	; 0x2e
 80135b8:	d10c      	bne.n	80135d4 <_svfiprintf_r+0x130>
 80135ba:	7863      	ldrb	r3, [r4, #1]
 80135bc:	2b2a      	cmp	r3, #42	; 0x2a
 80135be:	d135      	bne.n	801362c <_svfiprintf_r+0x188>
 80135c0:	9b03      	ldr	r3, [sp, #12]
 80135c2:	3402      	adds	r4, #2
 80135c4:	1d1a      	adds	r2, r3, #4
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	9203      	str	r2, [sp, #12]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	bfb8      	it	lt
 80135ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80135d2:	9305      	str	r3, [sp, #20]
 80135d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013694 <_svfiprintf_r+0x1f0>
 80135d8:	2203      	movs	r2, #3
 80135da:	4650      	mov	r0, sl
 80135dc:	7821      	ldrb	r1, [r4, #0]
 80135de:	f7ff fea3 	bl	8013328 <memchr>
 80135e2:	b140      	cbz	r0, 80135f6 <_svfiprintf_r+0x152>
 80135e4:	2340      	movs	r3, #64	; 0x40
 80135e6:	eba0 000a 	sub.w	r0, r0, sl
 80135ea:	fa03 f000 	lsl.w	r0, r3, r0
 80135ee:	9b04      	ldr	r3, [sp, #16]
 80135f0:	3401      	adds	r4, #1
 80135f2:	4303      	orrs	r3, r0
 80135f4:	9304      	str	r3, [sp, #16]
 80135f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135fa:	2206      	movs	r2, #6
 80135fc:	4826      	ldr	r0, [pc, #152]	; (8013698 <_svfiprintf_r+0x1f4>)
 80135fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013602:	f7ff fe91 	bl	8013328 <memchr>
 8013606:	2800      	cmp	r0, #0
 8013608:	d038      	beq.n	801367c <_svfiprintf_r+0x1d8>
 801360a:	4b24      	ldr	r3, [pc, #144]	; (801369c <_svfiprintf_r+0x1f8>)
 801360c:	bb1b      	cbnz	r3, 8013656 <_svfiprintf_r+0x1b2>
 801360e:	9b03      	ldr	r3, [sp, #12]
 8013610:	3307      	adds	r3, #7
 8013612:	f023 0307 	bic.w	r3, r3, #7
 8013616:	3308      	adds	r3, #8
 8013618:	9303      	str	r3, [sp, #12]
 801361a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801361c:	4433      	add	r3, r6
 801361e:	9309      	str	r3, [sp, #36]	; 0x24
 8013620:	e767      	b.n	80134f2 <_svfiprintf_r+0x4e>
 8013622:	460c      	mov	r4, r1
 8013624:	2001      	movs	r0, #1
 8013626:	fb0c 3202 	mla	r2, ip, r2, r3
 801362a:	e7a5      	b.n	8013578 <_svfiprintf_r+0xd4>
 801362c:	2300      	movs	r3, #0
 801362e:	f04f 0c0a 	mov.w	ip, #10
 8013632:	4619      	mov	r1, r3
 8013634:	3401      	adds	r4, #1
 8013636:	9305      	str	r3, [sp, #20]
 8013638:	4620      	mov	r0, r4
 801363a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801363e:	3a30      	subs	r2, #48	; 0x30
 8013640:	2a09      	cmp	r2, #9
 8013642:	d903      	bls.n	801364c <_svfiprintf_r+0x1a8>
 8013644:	2b00      	cmp	r3, #0
 8013646:	d0c5      	beq.n	80135d4 <_svfiprintf_r+0x130>
 8013648:	9105      	str	r1, [sp, #20]
 801364a:	e7c3      	b.n	80135d4 <_svfiprintf_r+0x130>
 801364c:	4604      	mov	r4, r0
 801364e:	2301      	movs	r3, #1
 8013650:	fb0c 2101 	mla	r1, ip, r1, r2
 8013654:	e7f0      	b.n	8013638 <_svfiprintf_r+0x194>
 8013656:	ab03      	add	r3, sp, #12
 8013658:	9300      	str	r3, [sp, #0]
 801365a:	462a      	mov	r2, r5
 801365c:	4638      	mov	r0, r7
 801365e:	4b10      	ldr	r3, [pc, #64]	; (80136a0 <_svfiprintf_r+0x1fc>)
 8013660:	a904      	add	r1, sp, #16
 8013662:	f3af 8000 	nop.w
 8013666:	1c42      	adds	r2, r0, #1
 8013668:	4606      	mov	r6, r0
 801366a:	d1d6      	bne.n	801361a <_svfiprintf_r+0x176>
 801366c:	89ab      	ldrh	r3, [r5, #12]
 801366e:	065b      	lsls	r3, r3, #25
 8013670:	f53f af2c 	bmi.w	80134cc <_svfiprintf_r+0x28>
 8013674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013676:	b01d      	add	sp, #116	; 0x74
 8013678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801367c:	ab03      	add	r3, sp, #12
 801367e:	9300      	str	r3, [sp, #0]
 8013680:	462a      	mov	r2, r5
 8013682:	4638      	mov	r0, r7
 8013684:	4b06      	ldr	r3, [pc, #24]	; (80136a0 <_svfiprintf_r+0x1fc>)
 8013686:	a904      	add	r1, sp, #16
 8013688:	f7ff f962 	bl	8012950 <_printf_i>
 801368c:	e7eb      	b.n	8013666 <_svfiprintf_r+0x1c2>
 801368e:	bf00      	nop
 8013690:	08014c28 	.word	0x08014c28
 8013694:	08014c2e 	.word	0x08014c2e
 8013698:	08014c32 	.word	0x08014c32
 801369c:	00000000 	.word	0x00000000
 80136a0:	080133ef 	.word	0x080133ef

080136a4 <_putc_r>:
 80136a4:	b570      	push	{r4, r5, r6, lr}
 80136a6:	460d      	mov	r5, r1
 80136a8:	4614      	mov	r4, r2
 80136aa:	4606      	mov	r6, r0
 80136ac:	b118      	cbz	r0, 80136b6 <_putc_r+0x12>
 80136ae:	6983      	ldr	r3, [r0, #24]
 80136b0:	b90b      	cbnz	r3, 80136b6 <_putc_r+0x12>
 80136b2:	f7ff fd23 	bl	80130fc <__sinit>
 80136b6:	4b1c      	ldr	r3, [pc, #112]	; (8013728 <_putc_r+0x84>)
 80136b8:	429c      	cmp	r4, r3
 80136ba:	d124      	bne.n	8013706 <_putc_r+0x62>
 80136bc:	6874      	ldr	r4, [r6, #4]
 80136be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80136c0:	07d8      	lsls	r0, r3, #31
 80136c2:	d405      	bmi.n	80136d0 <_putc_r+0x2c>
 80136c4:	89a3      	ldrh	r3, [r4, #12]
 80136c6:	0599      	lsls	r1, r3, #22
 80136c8:	d402      	bmi.n	80136d0 <_putc_r+0x2c>
 80136ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80136cc:	f7fe fe5f 	bl	801238e <__retarget_lock_acquire_recursive>
 80136d0:	68a3      	ldr	r3, [r4, #8]
 80136d2:	3b01      	subs	r3, #1
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	60a3      	str	r3, [r4, #8]
 80136d8:	da05      	bge.n	80136e6 <_putc_r+0x42>
 80136da:	69a2      	ldr	r2, [r4, #24]
 80136dc:	4293      	cmp	r3, r2
 80136de:	db1c      	blt.n	801371a <_putc_r+0x76>
 80136e0:	b2eb      	uxtb	r3, r5
 80136e2:	2b0a      	cmp	r3, #10
 80136e4:	d019      	beq.n	801371a <_putc_r+0x76>
 80136e6:	6823      	ldr	r3, [r4, #0]
 80136e8:	1c5a      	adds	r2, r3, #1
 80136ea:	6022      	str	r2, [r4, #0]
 80136ec:	701d      	strb	r5, [r3, #0]
 80136ee:	b2ed      	uxtb	r5, r5
 80136f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80136f2:	07da      	lsls	r2, r3, #31
 80136f4:	d405      	bmi.n	8013702 <_putc_r+0x5e>
 80136f6:	89a3      	ldrh	r3, [r4, #12]
 80136f8:	059b      	lsls	r3, r3, #22
 80136fa:	d402      	bmi.n	8013702 <_putc_r+0x5e>
 80136fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80136fe:	f7fe fe47 	bl	8012390 <__retarget_lock_release_recursive>
 8013702:	4628      	mov	r0, r5
 8013704:	bd70      	pop	{r4, r5, r6, pc}
 8013706:	4b09      	ldr	r3, [pc, #36]	; (801372c <_putc_r+0x88>)
 8013708:	429c      	cmp	r4, r3
 801370a:	d101      	bne.n	8013710 <_putc_r+0x6c>
 801370c:	68b4      	ldr	r4, [r6, #8]
 801370e:	e7d6      	b.n	80136be <_putc_r+0x1a>
 8013710:	4b07      	ldr	r3, [pc, #28]	; (8013730 <_putc_r+0x8c>)
 8013712:	429c      	cmp	r4, r3
 8013714:	bf08      	it	eq
 8013716:	68f4      	ldreq	r4, [r6, #12]
 8013718:	e7d1      	b.n	80136be <_putc_r+0x1a>
 801371a:	4629      	mov	r1, r5
 801371c:	4622      	mov	r2, r4
 801371e:	4630      	mov	r0, r6
 8013720:	f7ff faf4 	bl	8012d0c <__swbuf_r>
 8013724:	4605      	mov	r5, r0
 8013726:	e7e3      	b.n	80136f0 <_putc_r+0x4c>
 8013728:	08014c7c 	.word	0x08014c7c
 801372c:	08014c9c 	.word	0x08014c9c
 8013730:	08014c5c 	.word	0x08014c5c

08013734 <_read_r>:
 8013734:	b538      	push	{r3, r4, r5, lr}
 8013736:	4604      	mov	r4, r0
 8013738:	4608      	mov	r0, r1
 801373a:	4611      	mov	r1, r2
 801373c:	2200      	movs	r2, #0
 801373e:	4d05      	ldr	r5, [pc, #20]	; (8013754 <_read_r+0x20>)
 8013740:	602a      	str	r2, [r5, #0]
 8013742:	461a      	mov	r2, r3
 8013744:	f7ed fa7e 	bl	8000c44 <_read>
 8013748:	1c43      	adds	r3, r0, #1
 801374a:	d102      	bne.n	8013752 <_read_r+0x1e>
 801374c:	682b      	ldr	r3, [r5, #0]
 801374e:	b103      	cbz	r3, 8013752 <_read_r+0x1e>
 8013750:	6023      	str	r3, [r4, #0]
 8013752:	bd38      	pop	{r3, r4, r5, pc}
 8013754:	20013660 	.word	0x20013660

08013758 <_fstat_r>:
 8013758:	b538      	push	{r3, r4, r5, lr}
 801375a:	2300      	movs	r3, #0
 801375c:	4d06      	ldr	r5, [pc, #24]	; (8013778 <_fstat_r+0x20>)
 801375e:	4604      	mov	r4, r0
 8013760:	4608      	mov	r0, r1
 8013762:	4611      	mov	r1, r2
 8013764:	602b      	str	r3, [r5, #0]
 8013766:	f7ed fab1 	bl	8000ccc <_fstat>
 801376a:	1c43      	adds	r3, r0, #1
 801376c:	d102      	bne.n	8013774 <_fstat_r+0x1c>
 801376e:	682b      	ldr	r3, [r5, #0]
 8013770:	b103      	cbz	r3, 8013774 <_fstat_r+0x1c>
 8013772:	6023      	str	r3, [r4, #0]
 8013774:	bd38      	pop	{r3, r4, r5, pc}
 8013776:	bf00      	nop
 8013778:	20013660 	.word	0x20013660

0801377c <_isatty_r>:
 801377c:	b538      	push	{r3, r4, r5, lr}
 801377e:	2300      	movs	r3, #0
 8013780:	4d05      	ldr	r5, [pc, #20]	; (8013798 <_isatty_r+0x1c>)
 8013782:	4604      	mov	r4, r0
 8013784:	4608      	mov	r0, r1
 8013786:	602b      	str	r3, [r5, #0]
 8013788:	f7ed faaf 	bl	8000cea <_isatty>
 801378c:	1c43      	adds	r3, r0, #1
 801378e:	d102      	bne.n	8013796 <_isatty_r+0x1a>
 8013790:	682b      	ldr	r3, [r5, #0]
 8013792:	b103      	cbz	r3, 8013796 <_isatty_r+0x1a>
 8013794:	6023      	str	r3, [r4, #0]
 8013796:	bd38      	pop	{r3, r4, r5, pc}
 8013798:	20013660 	.word	0x20013660

0801379c <_malloc_usable_size_r>:
 801379c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137a0:	1f18      	subs	r0, r3, #4
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	bfbc      	itt	lt
 80137a6:	580b      	ldrlt	r3, [r1, r0]
 80137a8:	18c0      	addlt	r0, r0, r3
 80137aa:	4770      	bx	lr

080137ac <_init>:
 80137ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ae:	bf00      	nop
 80137b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137b2:	bc08      	pop	{r3}
 80137b4:	469e      	mov	lr, r3
 80137b6:	4770      	bx	lr

080137b8 <_fini>:
 80137b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ba:	bf00      	nop
 80137bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137be:	bc08      	pop	{r3}
 80137c0:	469e      	mov	lr, r3
 80137c2:	4770      	bx	lr
